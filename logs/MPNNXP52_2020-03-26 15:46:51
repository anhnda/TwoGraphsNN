class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)


        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.L1C = Linear(config.CHEM_FINGERPRINT_SIZE + config.EMBED_DIM, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=1)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=1)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug, drugFeatures = None):


        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]


            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)
            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xProtein = self.nodesEmbedding(proteinNodes)
            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)




            iLevel = 0
            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv1(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            iLevel += 1

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv2(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv2g(xAtom, edge_index))

            iLevel += 1
            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv3(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv3g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xDrug = x1 + x2 + x3

            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)

            # xDrug = self.lin2(xDrug)
            # xDrug = self.act2(xDrug)

            if config.COMBINE_FEATURE:
                #print (drugFeatures.shape, xDrug.shape)
                combinedFeatures = torch.cat((drugFeatures, xDrug), dim=1)
                xDrug = self.L1C(combinedFeatures)
                xDrug = self.actL1(xDrug)
                xDrug = self.L2(xDrug)
                xDrug = self.actL2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x = self.convD1(x, drugEdges)
            x = F.relu(x)
            x = self.convD2(x, drugEdges)
            x = F.relu(x)
            x = self.convD3(x, drugEdges)
            x = F.relu(x)
        if config.SE_GRAPH:
            # Conv SE:
            x = self.convS1(x, seEdges)
            x = F.relu(x)
            # x = self.convS2(x, seEdges)
            # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Combine Features: ', True)
('Inner mode: ', True)
('Cross Prob: ', 0.01)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7f9a155ca750>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
KFold: 5 x 10
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_0
('Number of substructures, proteins, pathways, drugs, se: ', 2048, 1448, 330, 808, 331)
((646, 3826), (81, 3826), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19463.0)
('VALIDATE SUM PROTEIN TEST: ', 2334.0)
((646, 331), (646, 331), 38139.06, 59640.0)
('Error: ', tensor(45163.2930, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5036892199882305, 0.28283438278033807)
('Val: AUC, AUPR, Erros: ', 0.49876713117288407, 0.23374498284555223, 4888.597)
('Test: AUC, AUPR, Erros: ', 0.503866237721563, 0.26597648955953607, 5351.715)
((646, 331), (646, 331), 59752.953, 59640.0)
('Error: ', tensor(42711.4688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6372050885904238, 0.3795387142402262)
('Val: AUC, AUPR, Erros: ', 0.6193193195500777, 0.310042344220326, 4834.144)
('Test: AUC, AUPR, Erros: ', 0.6176356937001255, 0.34048242463965617, 5150.4634)
((646, 331), (646, 331), 55483.434, 59640.0)
('Error: ', tensor(42025.0469, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6911775845448819, 0.45022468282866973)
('Val: AUC, AUPR, Erros: ', 0.6533862873184477, 0.3512213829583569, 4737.7476)
('Test: AUC, AUPR, Erros: ', 0.6797432230704035, 0.4085735847852638, 5055.949)
((646, 331), (646, 331), 59842.13, 59640.0)
('Error: ', tensor(40396.1016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7090049565963181, 0.47831085353312025)
('Val: AUC, AUPR, Erros: ', 0.6708176118525175, 0.37024570791424155, 4662.649)
('Test: AUC, AUPR, Erros: ', 0.7044249518731731, 0.4365423692039452, 4908.9565)
((646, 331), (646, 331), 62204.06, 59640.0)
('Error: ', tensor(38626.5195, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7297825796393902, 0.5194240338643279)
('Val: AUC, AUPR, Erros: ', 0.6958843728911475, 0.41116972939215257, 4538.516)
('Test: AUC, AUPR, Erros: ', 0.7183449998744705, 0.46688498370013987, 4753.849)
((646, 331), (646, 331), 63196.434, 59640.0)
('Error: ', tensor(37257.4609, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.746178555525405, 0.5553324400140869)
('Val: AUC, AUPR, Erros: ', 0.7172158991671773, 0.4519612758238214, 4412.7476)
('Test: AUC, AUPR, Erros: ', 0.7281039386516062, 0.49669527696859517, 4630.3164)
((646, 331), (646, 331), 59615.062, 59640.0)
('Error: ', tensor(36040.1484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.755945836229593, 0.5775685590936684)
('Val: AUC, AUPR, Erros: ', 0.7297468735056938, 0.47866123177925674, 4245.706)
('Test: AUC, AUPR, Erros: ', 0.7339392099957205, 0.5167073502381007, 4488.113)
((646, 331), (646, 331), 42724.945, 59640.0)
('Error: ', tensor(37272.0703, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7645251679156437, 0.595622624226923)
('Val: AUC, AUPR, Erros: ', 0.7374120302240526, 0.49989162372973933, 4169.2593)
('Test: AUC, AUPR, Erros: ', 0.7403509247189944, 0.5321703027006639, 4491.9873)
((646, 331), (646, 331), 57290.586, 59640.0)
('Error: ', tensor(34697.4219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7659197117228338, 0.6000037311479864)
('Val: AUC, AUPR, Erros: ', 0.7415311400855641, 0.5044567994684224, 4104.072)
('Test: AUC, AUPR, Erros: ', 0.7371596998317329, 0.5305944648019085, 4404.3643)
((646, 331), (646, 331), 53157.48, 59640.0)
('Error: ', tensor(34794.9805, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7695460553718325, 0.6069480502620134)
('Val: AUC, AUPR, Erros: ', 0.7451284541171671, 0.5121051075127359, 4047.8606)
('Test: AUC, AUPR, Erros: ', 0.7382936669972756, 0.5332283031903841, 4379.829)
((646, 331), (646, 331), 53779.65, 59640.0)
('Error: ', tensor(34490.9570, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7719301657122984, 0.6113960263072897)
('Val: AUC, AUPR, Erros: ', 0.7471993763117275, 0.515075004086349, 4037.2678)
('Test: AUC, AUPR, Erros: ', 0.73809527639992, 0.5335239287871691, 4389.0146)
((646, 331), (646, 331), 54476.582, 59640.0)
('Error: ', tensor(34291.8125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7737099710103894, 0.6149618054504787)
('Val: AUC, AUPR, Erros: ', 0.748753800155073, 0.5177937498546287, 4030.8455)
('Test: AUC, AUPR, Erros: ', 0.7380240023801533, 0.5335116503151035, 4399.345)
((646, 331), (646, 331), 54106.926, 59640.0)
('Error: ', tensor(34187.2812, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7754046542408477, 0.6179599988132489)
('Val: AUC, AUPR, Erros: ', 0.7499820778339877, 0.5194518447994106, 4022.8445)
('Test: AUC, AUPR, Erros: ', 0.7379420295020119, 0.5334056686131419, 4410.5103)
((646, 331), (646, 331), 54297.184, 59640.0)
('Error: ', tensor(34068.1055, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7768240514759569, 0.6204251496623526)
('Val: AUC, AUPR, Erros: ', 0.7508410843790634, 0.5204053822066239, 4021.1484)
('Test: AUC, AUPR, Erros: ', 0.7376861262283487, 0.5326181717486964, 4426.666)
((646, 331), (646, 331), 54395.6, 59640.0)
('Error: ', tensor(33957.1914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7781507002682649, 0.6226014880613256)
('Val: AUC, AUPR, Erros: ', 0.751391882449468, 0.5205452148387272, 4023.311)
('Test: AUC, AUPR, Erros: ', 0.737433905872555, 0.5317145790338512, 4444.723)
((646, 331), (646, 331), 54305.977, 59640.0)
('Error: ', tensor(33874.4375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7794681085531692, 0.6246394201319845)
('Val: AUC, AUPR, Erros: ', 0.7517524758086851, 0.5201878156646795, 4026.4875)
('Test: AUC, AUPR, Erros: ', 0.7371581090709294, 0.5304253085835564, 4463.9404)
((646, 331), (646, 331), 54165.074, 59640.0)
('Error: ', tensor(33803.2344, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.780722956789592, 0.6264068704609812)
('Val: AUC, AUPR, Erros: ', 0.751884718729185, 0.519484724961602, 4031.2244)
('Test: AUC, AUPR, Erros: ', 0.7369229253665531, 0.529136085082141, 4483.877)
Train: 0.7768 0.6204
Test: 0.7377 0.5326
[0.6110271714178387, 0.6293787640160069, 0.635615443430847, 0.6291569925277085, 0.6314933506234516, 0.6297169407730984, 0.6352940239911248, 0.6380352815249649, 0.6436388993684503, 0.6427805845087777, 0.6481362682711821, 0.6507214179582128, 0.6528203678903085, 0.6534505711250314, 0.6566411928772062, 0.6574208871568268, 0.6585182299284654, 0.6630673329214622, 0.6646306281089946, 0.6671396455484164, 0.6670308000500814, 0.669595883802507, 0.6716373432512129, 0.6755621179011337, 0.676367607259299, 0.6776687342675334, 0.6791206730924357, 0.679815219271794, 0.6821806072928032, 0.6828126214239936, 0.6874577291681591, 0.689097471533989, 0.6925670764089876, 0.6939470019541699, 0.6969823620886022, 0.6981676384011077, 0.6987661419745408, 0.7016907911469674, 0.7016907911469674, 0.7031747682866418, 0.703698649178774, 0.7053592245699294, 0.7063338747147148, 0.7099767064621395, 0.7128872883433294, 0.7128872883433294, 0.7137991883306288, 0.7137991883306288, 0.7159222983815884, 0.7172040563320254, 0.7172040563320254, 0.7194225058350856, 0.7194225058350856, 0.7194225058350856, 0.7194225058350856, 0.7194225058350856, 0.7194225058350856, 0.7194225058350856, 0.7219817984053845, 0.7219817984053845, 0.7231667053573029, 0.7247260924884152, 0.7247260924884152, 0.7247260924884152, 0.7247260924884152, 0.7247260924884152, 0.7247260924884152, 0.7267265339353616, 0.7267265339353616, 0.7267265339353616, 0.7331415101330414, 0.7331415101330414, 0.7331415101330414, 0.7351201613174829, 0.7351201613174829, 0.7351201613174829, 0.7351201613174829, 0.7351201613174829, 0.7376861262283487, 0.7376861262283487, 0.7376861262283487, 0.7376861262283487, 0.7376861262283487, 0.7376861262283487, 0.7376861262283487, 0.7376861262283487, 0.7376861262283487, 0.7376861262283487, 0.7376861262283487, 0.7376861262283487]
[0.14714280307779226, 0.1662203997395778, 0.17991721728351437, 0.1850528625016553, 0.19048053658340036, 0.19464244546688628, 0.20660384578172122, 0.2212608028346659, 0.23561826045219686, 0.23516929701104183, 0.24876905693641094, 0.2534362187770004, 0.2583341862970084, 0.25986760866153596, 0.271280592706102, 0.2776693425413823, 0.28434391539625764, 0.29809704708882984, 0.30098539790857226, 0.310143791543246, 0.31063982853281435, 0.3194032527098556, 0.32560587391337076, 0.3361600501049218, 0.34014966104694633, 0.34593738675667574, 0.3510698709843285, 0.35241225134362136, 0.3586551958814196, 0.3607459106834698, 0.37353654781096357, 0.37696171345303864, 0.38897197401334094, 0.39465035167536905, 0.40300711727671845, 0.4071321021466004, 0.40846480001490615, 0.41620261134750425, 0.41620261134750425, 0.42015518537444807, 0.42123058976474387, 0.4270467838230729, 0.4305016835110453, 0.44076317270090204, 0.4499549325118616, 0.4499549325118616, 0.45279173020972174, 0.45279173020972174, 0.4594376405710298, 0.4636266573860436, 0.4636266573860436, 0.4708337226580028, 0.4708337226580028, 0.4708337226580028, 0.4708337226580028, 0.4708337226580028, 0.4708337226580028, 0.4708337226580028, 0.4795337041980835, 0.4795337041980835, 0.48348927365038546, 0.48890183431968015, 0.48890183431968015, 0.48890183431968015, 0.48890183431968015, 0.48890183431968015, 0.48890183431968015, 0.4957617403417713, 0.4957617403417713, 0.4957617403417713, 0.5174877138051914, 0.5174877138051914, 0.5174877138051914, 0.5239327120480635, 0.5239327120480635, 0.5239327120480635, 0.5239327120480635, 0.5239327120480635, 0.5326181717486964, 0.5326181717486964, 0.5326181717486964, 0.5326181717486964, 0.5326181717486964, 0.5326181717486964, 0.5326181717486964, 0.5326181717486964, 0.5326181717486964, 0.5326181717486964, 0.5326181717486964, 0.5326181717486964]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_1
('Number of substructures, proteins, pathways, drugs, se: ', 2048, 1448, 330, 808, 331)
((646, 3826), (81, 3826), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19245.0)
('VALIDATE SUM PROTEIN TEST: ', 2846.0)
((646, 331), (646, 331), 52702.55, 59364.0)
('Error: ', tensor(43072.5508, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5166324270232225, 0.28259472813354747)
('Val: AUC, AUPR, Erros: ', 0.5152331537619407, 0.27559634024247354, 5313.501)
('Test: AUC, AUPR, Erros: ', 0.5140050860763057, 0.2366021580171298, 4807.9263)
((646, 331), (646, 331), 59610.973, 59364.0)
('Error: ', tensor(42327.0273, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6697214680160553, 0.43176366273807054)
('Val: AUC, AUPR, Erros: ', 0.653171598955878, 0.40092317887857987, 5245.4194)
('Test: AUC, AUPR, Erros: ', 0.6416894388393627, 0.3426701147283148, 4819.3604)
((646, 331), (646, 331), 52848.688, 59364.0)
('Error: ', tensor(41226.5781, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6923360396135294, 0.478095867468867)
('Val: AUC, AUPR, Erros: ', 0.6601768083046642, 0.41896917985190785, 5137.481)
('Test: AUC, AUPR, Erros: ', 0.6355750850503412, 0.35589925889493973, 4696.2935)
((646, 331), (646, 331), 35619.438, 59364.0)
('Error: ', tensor(42782.7734, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7079532031431941, 0.5072153541166461)
('Val: AUC, AUPR, Erros: ', 0.6699315729246187, 0.43089329174302765, 5290.1577)
('Test: AUC, AUPR, Erros: ', 0.6534243670700528, 0.378709585934591, 4704.8643)
((646, 331), (646, 331), 36087.477, 59364.0)
('Error: ', tensor(41258.4297, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7312703279908925, 0.541167548442745)
('Val: AUC, AUPR, Erros: ', 0.6856219911210489, 0.45998709330404963, 5147.331)
('Test: AUC, AUPR, Erros: ', 0.6908174800559048, 0.4209144945687799, 4550.9897)
((646, 331), (646, 331), 59689.89, 59364.0)
('Error: ', tensor(37137.5273, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7427662018656319, 0.5589718385462645)
('Val: AUC, AUPR, Erros: ', 0.6979357184716222, 0.47854632316141077, 4818.9497)
('Test: AUC, AUPR, Erros: ', 0.7164979918403149, 0.4536144739626726, 4418.669)
((646, 331), (646, 331), 65256.914, 59364.0)
('Error: ', tensor(36187.0117, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7512449305523313, 0.570614104256707)
('Val: AUC, AUPR, Erros: ', 0.7063443275940778, 0.4851500214625216, 4789.746)
('Test: AUC, AUPR, Erros: ', 0.7292241850603277, 0.4728538293798428, 4420.8677)
((646, 331), (646, 331), 77183.34, 59364.0)
('Error: ', tensor(36631.3594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.757136303370365, 0.5795119311541572)
('Val: AUC, AUPR, Erros: ', 0.7113160735705436, 0.489208973740924, 5003.3145)
('Test: AUC, AUPR, Erros: ', 0.7356817960640067, 0.4824924243760009, 4744.1304)
((646, 331), (646, 331), 67599.086, 59364.0)
('Error: ', tensor(34900.1445, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7623863131438722, 0.5883469383160429)
('Val: AUC, AUPR, Erros: ', 0.714415946497119, 0.4934391957272307, 4765.822)
('Test: AUC, AUPR, Erros: ', 0.7388442394875164, 0.48659748281262466, 4408.608)
((646, 331), (646, 331), 66993.94, 59364.0)
('Error: ', tensor(34582.2617, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7664072587463044, 0.5951907183029127)
('Val: AUC, AUPR, Erros: ', 0.7168501725915277, 0.4978321729924474, 4739.34)
('Test: AUC, AUPR, Erros: ', 0.742110812325551, 0.49460376552822927, 4361.899)
((646, 331), (646, 331), 70431.91, 59364.0)
('Error: ', tensor(34638.3203, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7690773755044178, 0.6004486278907615)
('Val: AUC, AUPR, Erros: ', 0.7178777611934625, 0.500773503518808, 4815.1367)
('Test: AUC, AUPR, Erros: ', 0.7433421481826419, 0.49797043235214955, 4465.8076)
((646, 331), (646, 331), 66807.76, 59364.0)
('Error: ', tensor(34152.2656, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7718920292140972, 0.6050251425825814)
('Val: AUC, AUPR, Erros: ', 0.7186945215123188, 0.5033517946828535, 4737.004)
('Test: AUC, AUPR, Erros: ', 0.744993987419897, 0.5017030752459034, 4346.1)
((646, 331), (646, 331), 68998.26, 59364.0)
('Error: ', tensor(34176.4375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7737711523951349, 0.6089042459255045)
('Val: AUC, AUPR, Erros: ', 0.7188095801847104, 0.5049479369371017, 4785.0825)
('Test: AUC, AUPR, Erros: ', 0.7453767758565123, 0.5033878642831241, 4414.1753)
((646, 331), (646, 331), 67141.38, 59364.0)
('Error: ', tensor(33900.1914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7758116969054125, 0.6123128283895053)
('Val: AUC, AUPR, Erros: ', 0.7190728876665013, 0.5070492427443009, 4746.2446)
('Test: AUC, AUPR, Erros: ', 0.7455449446087089, 0.5030783471035657, 4367.901)
((646, 331), (646, 331), 68014.09, 59364.0)
('Error: ', tensor(33855.0938, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7774004918049588, 0.6152809384044924)
('Val: AUC, AUPR, Erros: ', 0.719272880149363, 0.5090279064605268, 4761.3057)
('Test: AUC, AUPR, Erros: ', 0.746351643887974, 0.5061589432239997, 4388.832)
((646, 331), (646, 331), 67264.65, 59364.0)
('Error: ', tensor(33694.4453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7790840102105971, 0.618047565330325)
('Val: AUC, AUPR, Erros: ', 0.7194166172679932, 0.5105818377259379, 4746.575)
('Test: AUC, AUPR, Erros: ', 0.7469990190699454, 0.508125464594989, 4363.602)
((646, 331), (646, 331), 67794.59, 59364.0)
('Error: ', tensor(33633.8750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7806172297253329, 0.6207301300023489)
('Val: AUC, AUPR, Erros: ', 0.7197199492888774, 0.5127858472594743, 4752.4136)
('Test: AUC, AUPR, Erros: ', 0.7471985613150054, 0.5089765692322443, 4382.716)
Train: 0.7719 0.6050
Test: 0.7450 0.5017
[0.5470857464920124, 0.5578410798235836, 0.5626149244304002, 0.5627366760218377, 0.5699516066864302, 0.5718141714204943, 0.580137801253789, 0.5966622509429984, 0.6033976924391646, 0.6051982275263926, 0.6131783297104691, 0.6189685096117418, 0.6216497463877316, 0.6217126150999543, 0.6286209876326418, 0.633174481866564, 0.636085611379884, 0.6403428389268819, 0.644792915952728, 0.6477378738038414, 0.6482954133252974, 0.6517769587223645, 0.6572853969183179, 0.6613695756278785, 0.6630989815528666, 0.6681771905809596, 0.669399852316775, 0.6701842349103003, 0.6727262119664548, 0.6740032426405819, 0.6806505729715437, 0.684501681983825, 0.6878705136017413, 0.6901341419554274, 0.6931742485923649, 0.695253795971707, 0.697097257912994, 0.7012134650366515, 0.7012134650366515, 0.7040230303757453, 0.7057664623693685, 0.7070821319543378, 0.7089152342717827, 0.7136404724187362, 0.7171582083733622, 0.7171582083733622, 0.7177055076437864, 0.7177055076437864, 0.7208487970817309, 0.7222329568051793, 0.7222329568051793, 0.725062048820392, 0.725062048820392, 0.725062048820392, 0.725062048820392, 0.725062048820392, 0.725062048820392, 0.725062048820392, 0.727984049279025, 0.727984049279025, 0.7291843411534167, 0.7310940302204161, 0.7310940302204161, 0.7310940302204161, 0.7310940302204161, 0.7310940302204161, 0.7310940302204161, 0.7335462300450536, 0.7335462300450536, 0.7335462300450536, 0.7399257418824223, 0.7399257418824223, 0.7399257418824223, 0.7421861924747862, 0.7421861924747862, 0.7421861924747862, 0.7421861924747862, 0.7421861924747862, 0.744993987419897, 0.744993987419897, 0.744993987419897, 0.744993987419897, 0.744993987419897, 0.744993987419897, 0.744993987419897, 0.744993987419897, 0.744993987419897, 0.744993987419897, 0.744993987419897, 0.744993987419897]
[0.1206374716934801, 0.11886208766335715, 0.1237883228750082, 0.1261896714920858, 0.1310398799378354, 0.13090771520966427, 0.14189437519038922, 0.1578994604313655, 0.16338998792244414, 0.1657705776754073, 0.17778371896179393, 0.18891944073119235, 0.19242735768336836, 0.19217331047146913, 0.20559530037610196, 0.21437804971486912, 0.22074184912984643, 0.2311678105637629, 0.23982379550883182, 0.2486973192239436, 0.24916111058872495, 0.25819141546263713, 0.2711559649130568, 0.2783946677129579, 0.28312916005195166, 0.2931533276162063, 0.29725676236124066, 0.29806726418257123, 0.3025588016698796, 0.3050587587948075, 0.3206678728120274, 0.3294414193185471, 0.33631633551257245, 0.34171200315943884, 0.34744594485917335, 0.353032301012429, 0.35802546893921394, 0.3698376748917446, 0.3698376748917446, 0.37811797838864775, 0.381748347034379, 0.3845613181450886, 0.3901613300061861, 0.40470478207154825, 0.4146085927940133, 0.4146085927940133, 0.4162880455061253, 0.4162880455061253, 0.42552251919149225, 0.429472664046544, 0.429472664046544, 0.4379695158253165, 0.4379695158253165, 0.4379695158253165, 0.4379695158253165, 0.4379695158253165, 0.4379695158253165, 0.4379695158253165, 0.4459966161853775, 0.4459966161853775, 0.44957561450906847, 0.45544565970172457, 0.45544565970172457, 0.45544565970172457, 0.45544565970172457, 0.45544565970172457, 0.45544565970172457, 0.4638923441875508, 0.4638923441875508, 0.4638923441875508, 0.48491100184723, 0.48491100184723, 0.48491100184723, 0.49226921369803794, 0.49226921369803794, 0.49226921369803794, 0.49226921369803794, 0.49226921369803794, 0.5017030752459034, 0.5017030752459034, 0.5017030752459034, 0.5017030752459034, 0.5017030752459034, 0.5017030752459034, 0.5017030752459034, 0.5017030752459034, 0.5017030752459034, 0.5017030752459034, 0.5017030752459034, 0.5017030752459034]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_2
('Number of substructures, proteins, pathways, drugs, se: ', 2048, 1448, 330, 808, 331)
((646, 3826), (81, 3826), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19732.0)
('VALIDATE SUM PROTEIN TEST: ', 2552.0)
((646, 331), (646, 331), 48321.47, 58006.0)
('Error: ', tensor(42689.9336, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5260405023273499, 0.28423863817381906)
('Val: AUC, AUPR, Erros: ', 0.5371169837263049, 0.3071814037526431, 5547.2646)
('Test: AUC, AUPR, Erros: ', 0.5279045540204232, 0.28670852759064425, 5350.916)
((646, 331), (646, 331), 52511.727, 58006.0)
('Error: ', tensor(42078.3281, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6704260060589822, 0.4235824798449012)
('Val: AUC, AUPR, Erros: ', 0.6647656456998776, 0.43415579544570904, 5458.179)
('Test: AUC, AUPR, Erros: ', 0.6627228447948814, 0.41813533552035054, 5276.3403)
((646, 331), (646, 331), 58665.043, 58006.0)
('Error: ', tensor(40396.3867, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7175083795920307, 0.5026654120909562)
('Val: AUC, AUPR, Erros: ', 0.7029057051331016, 0.5010785215559777, 5248.7935)
('Test: AUC, AUPR, Erros: ', 0.6991048728090321, 0.4709963707657252, 5099.6636)
((646, 331), (646, 331), 59893.16, 58006.0)
('Error: ', tensor(38306.5703, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.736483987314118, 0.5365134616501084)
('Val: AUC, AUPR, Erros: ', 0.71849702635742, 0.5313322275597911, 5010.9873)
('Test: AUC, AUPR, Erros: ', 0.7145677004890505, 0.497092466607756, 4890.762)
((646, 331), (646, 331), 48920.562, 58006.0)
('Error: ', tensor(37060.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7511732986624282, 0.5600327074768439)
('Val: AUC, AUPR, Erros: ', 0.7270871352500072, 0.5481847054110598, 4899.796)
('Test: AUC, AUPR, Erros: ', 0.7225909401307784, 0.5096642682741626, 4743.8784)
((646, 331), (646, 331), 48228.21, 58006.0)
('Error: ', tensor(35868.1680, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7588168314199817, 0.5724457726099761)
('Val: AUC, AUPR, Erros: ', 0.731730562552259, 0.5565280023073533, 4777.0024)
('Test: AUC, AUPR, Erros: ', 0.7264554953730886, 0.5147995247957111, 4632.473)
((646, 331), (646, 331), 49515.676, 58006.0)
('Error: ', tensor(34989.2500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7636690506100323, 0.5816383335400431)
('Val: AUC, AUPR, Erros: ', 0.734568859745435, 0.5621033276405054, 4688.063)
('Test: AUC, AUPR, Erros: ', 0.7284476531958326, 0.5181898671496602, 4565.9395)
((646, 331), (646, 331), 50641.746, 58006.0)
('Error: ', tensor(34463.1016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7673691943060803, 0.5890412670360179)
('Val: AUC, AUPR, Erros: ', 0.736740839086056, 0.5662243384895222, 4639.029)
('Test: AUC, AUPR, Erros: ', 0.729507062942802, 0.5203272529601379, 4538.8125)
((646, 331), (646, 331), 51708.08, 58006.0)
('Error: ', tensor(34098.4844, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.770367733248668, 0.5952435851918075)
('Val: AUC, AUPR, Erros: ', 0.7377786692472899, 0.5687273690247672, 4610.801)
('Test: AUC, AUPR, Erros: ', 0.7301333398181556, 0.5222234928423591, 4526.0317)
((646, 331), (646, 331), 51054.17, 58006.0)
('Error: ', tensor(33963.6406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7729452957417826, 0.6003326192330777)
('Val: AUC, AUPR, Erros: ', 0.7374568588501242, 0.56986622434126, 4617.361)
('Test: AUC, AUPR, Erros: ', 0.7305425206091359, 0.5234476437180258, 4526.3076)
((646, 331), (646, 331), 52288.617, 58006.0)
('Error: ', tensor(33701.7539, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7747339384464687, 0.6039696133380348)
('Val: AUC, AUPR, Erros: ', 0.7367919757905332, 0.5698356971441612, 4602.3096)
('Test: AUC, AUPR, Erros: ', 0.7306324552874552, 0.5248260246526975, 4519.5767)
((646, 331), (646, 331), 52496.848, 58006.0)
('Error: ', tensor(33563.8125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7763526945147633, 0.6070245177879692)
('Val: AUC, AUPR, Erros: ', 0.7362406531778819, 0.56940318290785, 4603.134)
('Test: AUC, AUPR, Erros: ', 0.7303198007479693, 0.5258244865030355, 4519.194)
((646, 331), (646, 331), 52756.7, 58006.0)
('Error: ', tensor(33442.7109, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7777450085683071, 0.6096295088692961)
('Val: AUC, AUPR, Erros: ', 0.7356170204160106, 0.5688793381341932, 4604.0107)
('Test: AUC, AUPR, Erros: ', 0.7303618523805749, 0.5270150010536526, 4517.1235)
((646, 331), (646, 331), 52763.16, 58006.0)
('Error: ', tensor(33351.2969, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7790703454862372, 0.6120143256321311)
('Val: AUC, AUPR, Erros: ', 0.7341413324362005, 0.5679328408384317, 4611.359)
('Test: AUC, AUPR, Erros: ', 0.7304655297675162, 0.5284267674739045, 4514.6787)
((646, 331), (646, 331), 52989.19, 58006.0)
('Error: ', tensor(33255.3516, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.780225927482183, 0.6140775985609815)
('Val: AUC, AUPR, Erros: ', 0.7335612285599229, 0.5675143246884367, 4612.245)
('Test: AUC, AUPR, Erros: ', 0.7301973199571439, 0.5291318725798606, 4514.372)
((646, 331), (646, 331), 52886.625, 58006.0)
('Error: ', tensor(33189.5312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7814236527224823, 0.6160701224458186)
('Val: AUC, AUPR, Erros: ', 0.7319531570159531, 0.5664103377768123, 4621.3735)
('Test: AUC, AUPR, Erros: ', 0.7297476782388836, 0.5296712914208433, 4515.2485)
((646, 331), (646, 331), 53034.0, 58006.0)
('Error: ', tensor(33107.7578, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7825379974877498, 0.6179359597208034)
('Val: AUC, AUPR, Erros: ', 0.7303426839018553, 0.5652419891845657, 4628.3213)
('Test: AUC, AUPR, Erros: ', 0.7293333628481903, 0.5297780170929136, 4516.849)
Train: 0.7747 0.6040
Test: 0.7306 0.5248
[0.6035198050772118, 0.6089093045614784, 0.6063288569460118, 0.6045119715391867, 0.6011878269379225, 0.6008339345628047, 0.6059952631375146, 0.6009847996934574, 0.603999776290524, 0.604514355771723, 0.6085654961144964, 0.6118408005616945, 0.6134049705807252, 0.6161843093927063, 0.6210694814284979, 0.6231282785592944, 0.6280640102448914, 0.6332070744206055, 0.638102805347774, 0.6410171540400267, 0.6412766992026935, 0.6444162722163451, 0.6469076367915226, 0.650960935202445, 0.65285081645164, 0.6599015896390551, 0.661471730528978, 0.6625774906707724, 0.6654397488656748, 0.6663800597106697, 0.673207160282154, 0.6756500167309732, 0.6785912975640639, 0.6801472231498343, 0.6840673744894558, 0.6856744243149047, 0.6865896520631936, 0.6899784914296588, 0.6899784914296588, 0.691922824678253, 0.6929667929556795, 0.6948903540254521, 0.696393608365459, 0.7007156267704383, 0.7047108001322807, 0.7047108001322807, 0.7052715993113059, 0.7052715993113059, 0.7076029247974129, 0.7084873312148658, 0.7084873312148658, 0.7108316798070287, 0.7108316798070287, 0.7108316798070287, 0.7108316798070287, 0.7108316798070287, 0.7108316798070287, 0.7108316798070287, 0.7141339515872651, 0.7141339515872651, 0.7160250008891862, 0.7176925049826445, 0.7176925049826445, 0.7176925049826445, 0.7176925049826445, 0.7176925049826445, 0.7176925049826445, 0.7198747513944127, 0.7198747513944127, 0.7198747513944127, 0.7265812869105133, 0.7265812869105133, 0.7265812869105133, 0.728427694870466, 0.728427694870466, 0.728427694870466, 0.728427694870466, 0.728427694870466, 0.7306324552874552, 0.7306324552874552, 0.7306324552874552, 0.7306324552874552, 0.7306324552874552, 0.7306324552874552, 0.7306324552874552, 0.7306324552874552, 0.7306324552874552, 0.7306324552874552, 0.7306324552874552, 0.7306324552874552]
[0.16471052097822597, 0.1728798271979164, 0.17543486332999722, 0.18153575727043397, 0.1796334989836692, 0.183531823322387, 0.19392975894404746, 0.1958333821137443, 0.20308249942201345, 0.20553443291590523, 0.21517923457594446, 0.22305575966335434, 0.22733654701243367, 0.2329646844757966, 0.24387620812645594, 0.249187039360248, 0.2587571698492578, 0.2711775477830699, 0.2814821171005827, 0.2889940759839657, 0.28955165875335787, 0.29740879671287235, 0.30379719353831464, 0.31251732689304124, 0.3170076057599527, 0.33146030383877895, 0.3342505542426847, 0.3361364284565053, 0.34145885784689034, 0.34397576366917443, 0.36044860983682836, 0.36530514217755294, 0.37303491869576105, 0.37694731583457963, 0.38694159783063126, 0.39147618906342374, 0.3931611524780384, 0.4006723748763547, 0.4006723748763547, 0.4061412858624235, 0.4082273267840818, 0.4134391899406914, 0.4183104643909347, 0.4307874297936304, 0.4426662805848414, 0.4426662805848414, 0.4442727242188159, 0.4442727242188159, 0.45084523975942936, 0.4534466309939249, 0.4534466309939249, 0.45963987499318704, 0.45963987499318704, 0.45963987499318704, 0.45963987499318704, 0.45963987499318704, 0.45963987499318704, 0.45963987499318704, 0.46953344812417463, 0.46953344812417463, 0.4759393380061928, 0.4811547238052549, 0.4811547238052549, 0.4811547238052549, 0.4811547238052549, 0.4811547238052549, 0.4811547238052549, 0.48826440590688747, 0.48826440590688747, 0.48826440590688747, 0.5124316649522309, 0.5124316649522309, 0.5124316649522309, 0.5179382975469498, 0.5179382975469498, 0.5179382975469498, 0.5179382975469498, 0.5179382975469498, 0.5248260246526975, 0.5248260246526975, 0.5248260246526975, 0.5248260246526975, 0.5248260246526975, 0.5248260246526975, 0.5248260246526975, 0.5248260246526975, 0.5248260246526975, 0.5248260246526975, 0.5248260246526975, 0.5248260246526975]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_3
('Number of substructures, proteins, pathways, drugs, se: ', 2048, 1448, 330, 808, 331)
((647, 3826), (81, 3826), (647, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19668.0)
('VALIDATE SUM PROTEIN TEST: ', 2359.0)
((647, 331), (647, 331), 43929.953, 57502.0)
('Error: ', tensor(42919.1328, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5051484387811649, 0.27201125059678366)
('Val: AUC, AUPR, Erros: ', 0.5093884864940594, 0.3014702233161368, 5698.7856)
('Test: AUC, AUPR, Erros: ', 0.5056585535729146, 0.2888016513261576, 5627.675)
((647, 331), (647, 331), 62635.53, 57502.0)
('Error: ', tensor(41654.2031, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6586144226668389, 0.3891437027594979)
('Val: AUC, AUPR, Erros: ', 0.6452968625236473, 0.40431112601059044, 5428.5796)
('Test: AUC, AUPR, Erros: ', 0.6422090537075802, 0.39083368524085, 5400.8955)
((647, 331), (647, 331), 63152.434, 57502.0)
('Error: ', tensor(40842.3828, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6971200613714792, 0.4482686031021419)
('Val: AUC, AUPR, Erros: ', 0.668376063968315, 0.4433172616250284, 5338.8076)
('Test: AUC, AUPR, Erros: ', 0.6749200922804175, 0.4392600596416488, 5313.849)
