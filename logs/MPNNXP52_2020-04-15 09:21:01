class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = XSAGE(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = XSAGE(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD3 = XSAGE(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.L1C = Linear(config.CHEM_FINGERPRINT_SIZE + config.EMBED_DIM, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        # self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=1)
        # self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=1)
        # self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=1)

        # self.conv4= EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv4g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool4 = TopKPooling(config.EMBED_DIM, ratio=1)

        # self.conv5 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv5g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool5 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, drugId2ProteinIdList, drugGraphBatch,
                nDrug, drugFeatures=None):

        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]

            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)
            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)

            xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xAtom = F.relu(self.conv2g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xAtom = F.relu(self.conv3g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xsum = 0
            #            if config.N_INNER_LAYER >= 4:
            #                if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
            #                    xAtom = F.relu(self.conv4(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch))
            #                else:
            #                    xAtom = F.relu(self.conv4g(xAtom, edge_index))
            #
            #                xAtom, edge_index, _, batch, _, _ = self.pool4(xAtom, edge_index, None, batch)
            #                x4 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            #                xsum += x4
            #                iLevel += 1
            #                if config.N_INNER_LAYER == 5:
            #                    if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
            #                        xAtom = F.relu(self.conv5(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch))
            #                    else:
            #                        xAtom = F.relu(self.conv5g(xAtom, edge_index))
            #                    xAtom, edge_index, _, batch, _, _ = self.pool5(xAtom, edge_index, None, batch)
            #                    x5 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            #                    xsum += x5

            xDrug = x1 + x2 + x3 + xsum
            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)

            # xDrug = self.lin2(xDrug)
            # xDrug = self.act2(xDrug)


            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x0 = x
            x = self.convD1(x, drugEdges, x0)
            x = F.relu(x)
            x = self.convD2(x, drugEdges, x0)
            x = F.relu(x)
#            x = self.convD3(x, drugEdges, x0)
#            x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Combine Features: ', False)
('Inner mode: ', False)
('Cross Prob: ', 0.0)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7ffb71534e90>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
KFold: 5 x 10
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19463.0)
('VALIDATE SUM PROTEIN TEST: ', 2334.0)
((646, 331), (646, 331), 53631.266, 59640.0)
('Error: ', tensor(43205.1172, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5079332268391022, 0.28156394677177127)
('Val: AUC, AUPR, Erros: ', 0.47910833909768874, 0.22276788748202583, 4833.5684)
('Test: AUC, AUPR, Erros: ', 0.5253225384762114, 0.27677712368181906, 5167.2734)
((646, 331), (646, 331), 81643.7, 59640.0)
('Error: ', tensor(50391.8594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4204745747997469, 0.23492713836678694)
('Val: AUC, AUPR, Erros: ', 0.4813565541267964, 0.21980187688943015, 5677.3413)
('Test: AUC, AUPR, Erros: ', 0.4345706374268719, 0.21970997721678442, 6206.818)
((646, 331), (646, 331), 66611.945, 59640.0)
('Error: ', tensor(40452.8477, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6671773716682116, 0.4733873106650261)
('Val: AUC, AUPR, Erros: ', 0.68307718063977, 0.45708152250795275, 4602.462)
('Test: AUC, AUPR, Erros: ', 0.6425576778845724, 0.4387617879222361, 4982.9473)
((646, 331), (646, 331), 59838.82, 59640.0)
('Error: ', tensor(36951.0547, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7198310603071645, 0.532801229041756)
('Val: AUC, AUPR, Erros: ', 0.7321123820868564, 0.5046962839416842, 4127.745)
('Test: AUC, AUPR, Erros: ', 0.6979133294356688, 0.48656028692725306, 4594.779)
((646, 331), (646, 331), 62351.504, 59640.0)
('Error: ', tensor(36516.2031, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.727528328265417, 0.5459723060339766)
('Val: AUC, AUPR, Erros: ', 0.7427049061265819, 0.522751804099268, 4088.9084)
('Test: AUC, AUPR, Erros: ', 0.7093794431283894, 0.500718638652163, 4561.618)
((646, 331), (646, 331), 60065.316, 59640.0)
('Error: ', tensor(36153.1758, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7360980768365311, 0.552747773754554)
('Val: AUC, AUPR, Erros: ', 0.7440127119618248, 0.5219442079235364, 4064.24)
('Test: AUC, AUPR, Erros: ', 0.714595764233233, 0.5048648675524399, 4517.431)
((646, 331), (646, 331), 62988.297, 59640.0)
('Error: ', tensor(35721.6641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7434979991915833, 0.5656944898049061)
('Val: AUC, AUPR, Erros: ', 0.7376026657192214, 0.5141144932052792, 4147.2866)
('Test: AUC, AUPR, Erros: ', 0.7208218288742492, 0.513223175176036, 4495.0547)
((646, 331), (646, 331), 56529.19, 59640.0)
('Error: ', tensor(35081.0742, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7545662265983015, 0.584458254066113)
('Val: AUC, AUPR, Erros: ', 0.7302440215061645, 0.5035866941408795, 4121.3794)
('Test: AUC, AUPR, Erros: ', 0.7315569068164787, 0.5255779506712567, 4396.2256)
((646, 331), (646, 331), 62744.312, 59640.0)
('Error: ', tensor(33866.8359, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7735948112174533, 0.6130789786140005)
('Val: AUC, AUPR, Erros: ', 0.7219972249128755, 0.4851250046721771, 4357.0195)
('Test: AUC, AUPR, Erros: ', 0.7442825134915274, 0.5412169649462906, 4377.082)
((646, 331), (646, 331), 66631.9, 59640.0)
('Error: ', tensor(32625.9297, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7963822424731241, 0.6463882651310312)
('Val: AUC, AUPR, Erros: ', 0.7309725005047933, 0.4935903935135899, 4432.454)
('Test: AUC, AUPR, Erros: ', 0.7578359398243685, 0.5568992128652589, 4398.0522)
((646, 331), (646, 331), 64865.785, 59640.0)
('Error: ', tensor(31743.3730, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8068826247276506, 0.6643922448835093)
('Val: AUC, AUPR, Erros: ', 0.7300837194128044, 0.4835579828147597, 4456.9688)
('Test: AUC, AUPR, Erros: ', 0.7564183519112071, 0.5467798049025031, 4446.2266)
((646, 331), (646, 331), 59545.246, 59640.0)
('Error: ', tensor(31006.3906, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8138064258674986, 0.6772102235161325)
('Val: AUC, AUPR, Erros: ', 0.7280547346210002, 0.4744694332970452, 4391.352)
('Test: AUC, AUPR, Erros: ', 0.7441879371706476, 0.51991826292587, 4527.045)
((646, 331), (646, 331), 61622.777, 59640.0)
('Error: ', tensor(30560.3789, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8191397386063187, 0.6852469754176707)
('Val: AUC, AUPR, Erros: ', 0.7232582654600181, 0.45825871942792973, 4592.02)
('Test: AUC, AUPR, Erros: ', 0.7351615022611168, 0.4966602265674863, 4820.362)
((646, 331), (646, 331), 64486.06, 59640.0)
('Error: ', tensor(30349.4199, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8225864468892576, 0.690811067923674)
('Val: AUC, AUPR, Erros: ', 0.721906294564312, 0.45181813858477593, 4786.5933)
('Test: AUC, AUPR, Erros: ', 0.7314941817833431, 0.48785491707303036, 5156.1045)
((646, 331), (646, 331), 58519.234, 59640.0)
('Error: ', tensor(29960.8945, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8260490938444541, 0.6952987716542491)
('Val: AUC, AUPR, Erros: ', 0.7212202186808518, 0.4441556339793493, 4659.6196)
('Test: AUC, AUPR, Erros: ', 0.7260906198354381, 0.47957400743665285, 5175.475)
((646, 331), (646, 331), 60763.55, 59640.0)
('Error: ', tensor(29752.3750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8284780258520934, 0.6994630071450738)
('Val: AUC, AUPR, Erros: ', 0.7159528250091663, 0.4287279279061375, 4852.589)
('Test: AUC, AUPR, Erros: ', 0.7174384718249929, 0.4658061545691942, 5510.0366)
((646, 331), (646, 331), 60550.1, 59640.0)
('Error: ', tensor(29553.2207, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8307216588393594, 0.703070424300642)
('Val: AUC, AUPR, Erros: ', 0.7148712273355426, 0.42491286578949145, 4946.1777)
('Test: AUC, AUPR, Erros: ', 0.7124952782179323, 0.45918825284417725, 5734.2324)
Train: 0.7361 0.5527
Test: 0.7146 0.5049
[0.5278162694603281, 0.5420195431673205, 0.5541591124891877, 0.5576646502602571, 0.5625028533042894, 0.5606553819444444, 0.5649571345737052, 0.5736864537448751, 0.5794541964499569, 0.5806737543671445, 0.5871441295381006, 0.591345650740282, 0.5946534061622843, 0.5965697878425582, 0.6020789221200291, 0.6047041973150779, 0.6086780199295809, 0.6139492937836594, 0.6171893753081734, 0.6207062362755884, 0.6208689373610495, 0.6247537942148111, 0.6275486891980897, 0.6329812799615483, 0.6346639027802274, 0.6378105394243622, 0.6405207478730707, 0.641573755181043, 0.6440677843069369, 0.6449327846763303, 0.6507676292495631, 0.652993544740824, 0.6574809045691178, 0.6594189456870475, 0.6635544403775995, 0.6652086992258092, 0.6662071075666638, 0.6706851773186352, 0.6706851773186352, 0.6725868146892163, 0.6732811815615865, 0.6752745723088464, 0.6764014073812198, 0.6810952627768556, 0.6847153878842009, 0.6847153878842009, 0.6858891275795935, 0.6858891275795935, 0.6885828894995234, 0.6900874250348248, 0.6900874250348248, 0.6928740346771722, 0.6928740346771722, 0.6928740346771722, 0.6928740346771722, 0.6928740346771722, 0.6928740346771722, 0.6928740346771722, 0.6961313985882283, 0.6961313985882283, 0.6976666090925951, 0.6995383807111292, 0.6995383807111292, 0.6995383807111292, 0.6995383807111292, 0.6995383807111292, 0.6995383807111292, 0.7018160942139255, 0.7018160942139255, 0.7018160942139255, 0.7092626185131373, 0.7092626185131373, 0.7092626185131373, 0.7116206631144555, 0.7116206631144555, 0.7116206631144555, 0.7116206631144555, 0.7116206631144555, 0.714595764233233, 0.714595764233233, 0.714595764233233, 0.714595764233233, 0.714595764233233, 0.714595764233233, 0.714595764233233, 0.714595764233233, 0.714595764233233, 0.714595764233233, 0.714595764233233, 0.714595764233233]
[0.13438800097718023, 0.14614288048132174, 0.1575877558904505, 0.16210631148251647, 0.16547557744544478, 0.16511875654370095, 0.17331435595776695, 0.18798156262247778, 0.1997907099038254, 0.19921381831370535, 0.21144854515398895, 0.21888181650866145, 0.22502825230904494, 0.22919792291762664, 0.23484258350265474, 0.2388050774968248, 0.2459568955838129, 0.2561110673725385, 0.26002019096937323, 0.26656496680106945, 0.26660303544062214, 0.2768849917452097, 0.2829234246915866, 0.2947353166442303, 0.2981845135348071, 0.29964165120292563, 0.3058350166241856, 0.30835311987308145, 0.3151147218431222, 0.31759707561372286, 0.33058753366455107, 0.33432162881492, 0.3442343395056089, 0.3477670995284977, 0.35910043524991064, 0.36350515531773464, 0.36560158646896734, 0.3772793722889275, 0.3772793722889275, 0.3817811835743817, 0.38324363250924687, 0.38657689935459666, 0.38931677127207964, 0.4024682671195443, 0.4127207715149904, 0.4127207715149904, 0.4156261098551991, 0.4156261098551991, 0.4223503761234392, 0.42630780160710685, 0.42630780160710685, 0.4329625105335002, 0.4329625105335002, 0.4329625105335002, 0.4329625105335002, 0.4329625105335002, 0.4329625105335002, 0.4329625105335002, 0.44190347061374924, 0.44190347061374924, 0.44619460902703656, 0.4514930068252489, 0.4514930068252489, 0.4514930068252489, 0.4514930068252489, 0.4514930068252489, 0.4514930068252489, 0.45999467917958037, 0.45999467917958037, 0.45999467917958037, 0.48702940186646737, 0.48702940186646737, 0.48702940186646737, 0.4944353593602706, 0.4944353593602706, 0.4944353593602706, 0.4944353593602706, 0.4944353593602706, 0.5048648675524399, 0.5048648675524399, 0.5048648675524399, 0.5048648675524399, 0.5048648675524399, 0.5048648675524399, 0.5048648675524399, 0.5048648675524399, 0.5048648675524399, 0.5048648675524399, 0.5048648675524399, 0.5048648675524399]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19245.0)
('VALIDATE SUM PROTEIN TEST: ', 2846.0)
((646, 331), (646, 331), 56051.09, 59364.0)
('Error: ', tensor(43065.0938, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.48304186603441357, 0.26526768555599617)
('Val: AUC, AUPR, Erros: ', 0.4804420739024802, 0.2567754520520963, 5318.9824)
('Test: AUC, AUPR, Erros: ', 0.4583852156365675, 0.21423741244733396, 4857.34)
((646, 331), (646, 331), 84896.96, 59364.0)
('Error: ', tensor(46937.0820, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.45523415963089964, 0.2543200965818788)
('Val: AUC, AUPR, Erros: ', 0.43106191405207966, 0.23743595479865104, 5879.913)
('Test: AUC, AUPR, Erros: ', 0.4373594683687896, 0.20299379738363707, 5747.126)
((646, 331), (646, 331), 68910.78, 59364.0)
('Error: ', tensor(41810.9805, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6300064766645391, 0.41156780121141184)
('Val: AUC, AUPR, Erros: ', 0.5928242578902152, 0.350446838526941, 5255.1445)
('Test: AUC, AUPR, Erros: ', 0.5636091397116592, 0.2820395913707022, 5038.3364)
((646, 331), (646, 331), 65951.99, 59364.0)
('Error: ', tensor(38836.5977, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7231197924829205, 0.5499492312420159)
('Val: AUC, AUPR, Erros: ', 0.6860494509462374, 0.4717994339423358, 4932.831)
('Test: AUC, AUPR, Erros: ', 0.6742245931020199, 0.4109420867815701, 4662.224)
((646, 331), (646, 331), 65916.0, 59364.0)
('Error: ', tensor(35785.2070, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.755221159289352, 0.590258338140505)
('Val: AUC, AUPR, Erros: ', 0.7160465602264264, 0.5122202571880992, 4664.4663)
('Test: AUC, AUPR, Erros: ', 0.7176997006260899, 0.4734557527444746, 4407.236)
((646, 331), (646, 331), 60928.766, 59364.0)
('Error: ', tensor(33670.5039, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7748660165669674, 0.6164288332327406)
('Val: AUC, AUPR, Erros: ', 0.7295098044460072, 0.5276277454305466, 4585.2656)
('Test: AUC, AUPR, Erros: ', 0.7388642495975118, 0.5016296901848643, 4285.1357)
((646, 331), (646, 331), 61547.445, 59364.0)
('Error: ', tensor(32636.7305, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7947856077340048, 0.6450511026120952)
('Val: AUC, AUPR, Erros: ', 0.7316514568960384, 0.5269755967344458, 4596.2017)
('Test: AUC, AUPR, Erros: ', 0.7431808642122784, 0.49894420528823236, 4333.8394)
