class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug, drugFeatures = None):


        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]
            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xProtein = self.nodesEmbedding(proteinNodes)

            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)




            iLevel = 0
            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv1(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            iLevel += 1

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv2(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv2g(xAtom, edge_index))

            iLevel += 1
            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv3(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv3g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xDrug = x1 + x2 + x3

            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)
            xDrug = self.lin2(xDrug)
            xDrug = self.act2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x = self.convD1(x, drugEdges)
            x = F.relu(x)
            x = self.convD2(x, drugEdges)
            x = F.relu(x)

        if config.SE_GRAPH:
            # Conv SE:
            x = self.convS1(x, seEdges)
            x = F.relu(x)
            # x = self.convS2(x, seEdges)
            # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', False, True, False)
('Drug Features: ', False)
('Inner mode: ', False)
('Cross Prob: ', 0.5)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7f12d44868d0>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19906.0)
('VALIDATE SUM PROTEIN TEST: ', 2291.0)
((646, 331), (646, 331), 186630.92, 58595.0)
('Error: ', tensor(121449.3281, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.48346067561809014, 0.26742614985632335)
('Val: AUC, AUPR, Erros: ', 0.5024002472277025, 0.28911581396460073, 15076.373)
('Test: AUC, AUPR, Erros: ', 0.4841146073170197, 0.2494165673934306, 15509.707)
((646, 331), (646, 331), 59507.9, 58595.0)
('Error: ', tensor(39897.6211, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6921985660320454, 0.5065498265633772)
('Val: AUC, AUPR, Erros: ', 0.6627966204017285, 0.47745801046526104, 5120.1504)
('Test: AUC, AUPR, Erros: ', 0.6634254410574942, 0.4472775319664456, 4837.922)
((646, 331), (646, 331), 46964.277, 58595.0)
('Error: ', tensor(37667.6719, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7524241824400861, 0.5845528963001171)
('Val: AUC, AUPR, Erros: ', 0.7005615257275817, 0.5250553721171017, 4959.2666)
('Test: AUC, AUPR, Erros: ', 0.7073749426262231, 0.5019505063215886, 4602.892)
((646, 331), (646, 331), 76184.19, 58595.0)
('Error: ', tensor(35175.9414, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7706330037916912, 0.6084638695436879)
('Val: AUC, AUPR, Erros: ', 0.706273606715929, 0.5311115966373887, 4837.7095)
('Test: AUC, AUPR, Erros: ', 0.7190655589826049, 0.5155824498233561, 4635.7607)
((646, 331), (646, 331), 71754.29, 58595.0)
('Error: ', tensor(33684.2344, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7832011221135453, 0.628088483399363)
('Val: AUC, AUPR, Erros: ', 0.7073354970822683, 0.5284330059322141, 4765.6567)
('Test: AUC, AUPR, Erros: ', 0.7228388582234349, 0.5198387218620399, 4504.136)
((646, 331), (646, 331), 70957.42, 58595.0)
('Error: ', tensor(32794.4922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7965986141359949, 0.6491416392111452)
('Val: AUC, AUPR, Erros: ', 0.7077159087628102, 0.5207136974174943, 4776.8237)
('Test: AUC, AUPR, Erros: ', 0.7240569656992151, 0.520157802636232, 4469.332)
((646, 331), (646, 331), 69743.37, 58595.0)
('Error: ', tensor(32136.4414, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8055044931979847, 0.6627862908050994)
('Val: AUC, AUPR, Erros: ', 0.7069801176210384, 0.5179137411965518, 4793.596)
('Test: AUC, AUPR, Erros: ', 0.7213153857296812, 0.5127579284081992, 4479.788)
((646, 331), (646, 331), 68424.664, 58595.0)
('Error: ', tensor(31717.6523, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8098209231696625, 0.6686475266571007)
('Val: AUC, AUPR, Erros: ', 0.7015926024266057, 0.5069667265007805, 4836.3423)
('Test: AUC, AUPR, Erros: ', 0.7160460693363534, 0.4975498909823106, 4563.93)
((646, 331), (646, 331), 68082.086, 58595.0)
('Error: ', tensor(31460.3164, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8131178071060117, 0.6727190584159619)
('Val: AUC, AUPR, Erros: ', 0.6967083564096227, 0.4978257898997685, 4885.1826)
('Test: AUC, AUPR, Erros: ', 0.712232586626792, 0.4883014337003567, 4624.99)
((646, 331), (646, 331), 67869.96, 58595.0)
('Error: ', tensor(31234., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8161295856335627, 0.6763464539273057)
('Val: AUC, AUPR, Erros: ', 0.6927635611564609, 0.49116960145269084, 4925.676)
('Test: AUC, AUPR, Erros: ', 0.7101843227998675, 0.4828509353172853, 4666.3325)
((646, 331), (646, 331), 67943.15, 58595.0)
('Error: ', tensor(31025.7246, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8192226642903853, 0.6800748271322948)
('Val: AUC, AUPR, Erros: ', 0.689834052411002, 0.4865873253561592, 4961.7095)
('Test: AUC, AUPR, Erros: ', 0.7098364781149495, 0.4798575137380396, 4702.9346)
((646, 331), (646, 331), 68271.016, 58595.0)
('Error: ', tensor(30843.0215, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8222333659426097, 0.6837414450139735)
('Val: AUC, AUPR, Erros: ', 0.6874999084776751, 0.48371815891678605, 4994.0234)
('Test: AUC, AUPR, Erros: ', 0.7099878364585128, 0.478938421813219, 4731.4966)
((646, 331), (646, 331), 68091.92, 58595.0)
('Error: ', tensor(30638.9453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8247905017797553, 0.6870311078260635)
('Val: AUC, AUPR, Erros: ', 0.6846888192597785, 0.48094973670954816, 5021.1836)
('Test: AUC, AUPR, Erros: ', 0.7093842627847291, 0.47817309652225687, 4743.0825)
((646, 331), (646, 331), 67627.46, 58595.0)
('Error: ', tensor(30428.1465, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8269875323217135, 0.6900643179860104)
('Val: AUC, AUPR, Erros: ', 0.681593896863112, 0.4778854038396996, 5046.199)
('Test: AUC, AUPR, Erros: ', 0.7080390244241689, 0.47669217973245004, 4748.0835)
((646, 331), (646, 331), 67418.29, 58595.0)
('Error: ', tensor(30258.9531, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8288056994337432, 0.6926873589933746)
('Val: AUC, AUPR, Erros: ', 0.6791874675613798, 0.4755964458127669, 5070.1963)
('Test: AUC, AUPR, Erros: ', 0.7067974377714512, 0.47546072257363337, 4757.8306)
((646, 331), (646, 331), 67250.13, 58595.0)
('Error: ', tensor(30097.2344, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8305309557875015, 0.6952302764310534)
('Val: AUC, AUPR, Erros: ', 0.6767668851091588, 0.4733434559885578, 5092.7065)
('Test: AUC, AUPR, Erros: ', 0.7052418038305193, 0.473722480474192, 4769.082)
((646, 331), (646, 331), 66978.49, 58595.0)
('Error: ', tensor(29944.1289, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8320215924508112, 0.6974732404133502)
('Val: AUC, AUPR, Erros: ', 0.6754540508886231, 0.47228543186984223, 5107.1216)
('Test: AUC, AUPR, Erros: ', 0.704262919126417, 0.4730644288154514, 4774.4785)
Train: 0.7832 0.6281
Test: 0.7228 0.5198
[0.5284635440079115, 0.5437394543326566, 0.5448213119215046, 0.5473851846293132, 0.5555314534440179, 0.5605311339333551, 0.5660549769677549, 0.5736656419111704, 0.5812183416874638, 0.5833705604563519, 0.585470849831322, 0.5894629168287039, 0.5958528201776533, 0.5972537182904769, 0.6035252618061506, 0.6114502159617894, 0.6145436941170397, 0.6189759986606251, 0.6236374361487894, 0.6260466080302294, 0.6267595225307513, 0.6299596636482867, 0.6336414398228674, 0.635393711211134, 0.6369816620868971, 0.6423702547557242, 0.645462035309562, 0.645398176603538, 0.6479473079422812, 0.649253630908368, 0.6553030988262842, 0.6573145068451115, 0.6602362683847062, 0.6630831072432326, 0.6681916573116098, 0.6697806161569188, 0.6707077812789636, 0.6742801030622017, 0.6742801030622017, 0.6765908223113987, 0.6774325298490651, 0.6800233857139724, 0.6810971707755711, 0.6865028501523178, 0.6901788775522371, 0.6901788775522371, 0.6916605219614561, 0.6916605219614561, 0.6948648042587896, 0.6961575644541561, 0.6961575644541561, 0.6995147475640443, 0.6995147475640443, 0.6995147475640443, 0.6995147475640443, 0.6995147475640443, 0.6995147475640443, 0.6995147475640443, 0.7033404684453928, 0.7033404684453928, 0.7053636828023867, 0.7070735333428322, 0.7070735333428322, 0.7070735333428322, 0.7070735333428322, 0.7070735333428322, 0.7070735333428322, 0.7099216571769128, 0.7099216571769128, 0.7099216571769128, 0.7176819640813956, 0.7176819640813956, 0.7176819640813956, 0.719959946154581, 0.719959946154581, 0.719959946154581, 0.719959946154581, 0.719959946154581, 0.7228388582234349, 0.7228388582234349, 0.7228388582234349, 0.7228388582234349, 0.7228388582234349, 0.7228388582234349, 0.7228388582234349, 0.7228388582234349, 0.7228388582234349, 0.7228388582234349, 0.7228388582234349, 0.7228388582234349]
[0.1297083423998228, 0.1410352503634513, 0.14427662743293607, 0.15064562156697114, 0.15872730769696816, 0.1671903086575161, 0.1778325672972772, 0.18507108806363806, 0.19523924271759835, 0.1992033354962136, 0.20455164758889843, 0.21185177774417085, 0.22099872528074854, 0.22241070963320614, 0.23571253323613467, 0.24790057195177637, 0.25102747981678264, 0.26114905916243836, 0.26983634268079115, 0.2759709577134248, 0.2776078710614373, 0.2813171689294835, 0.28799338584510314, 0.28857417123315193, 0.29170302497473843, 0.3019458605198034, 0.3089829637546847, 0.3069769259039077, 0.3118230374085796, 0.31560659658925116, 0.3311389821518045, 0.33531065252949643, 0.3413868746920738, 0.348966656779054, 0.36128659778226574, 0.36543079055181443, 0.3678322722425259, 0.37550280270004727, 0.37550280270004727, 0.38236079555795727, 0.3839868591049574, 0.39133340785094395, 0.39447907736809096, 0.4088305042183888, 0.4183750991307561, 0.4183750991307561, 0.4217213334687598, 0.4217213334687598, 0.4312377873931905, 0.4341845410431522, 0.4341845410431522, 0.4439756412436682, 0.4439756412436682, 0.4439756412436682, 0.4439756412436682, 0.4439756412436682, 0.4439756412436682, 0.4439756412436682, 0.4551563056864879, 0.4551563056864879, 0.4614445289228601, 0.46692177151442177, 0.46692177151442177, 0.46692177151442177, 0.46692177151442177, 0.46692177151442177, 0.46692177151442177, 0.4766596020358656, 0.4766596020358656, 0.4766596020358656, 0.5033295179871422, 0.5033295179871422, 0.5033295179871422, 0.5101871979838595, 0.5101871979838595, 0.5101871979838595, 0.5101871979838595, 0.5101871979838595, 0.5198387218620399, 0.5198387218620399, 0.5198387218620399, 0.5198387218620399, 0.5198387218620399, 0.5198387218620399, 0.5198387218620399, 0.5198387218620399, 0.5198387218620399, 0.5198387218620399, 0.5198387218620399, 0.5198387218620399]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19911.0)
('VALIDATE SUM PROTEIN TEST: ', 2446.0)
((646, 331), (646, 331), 178071.58, 58221.0)
('Error: ', tensor(110986.6875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5085211713624752, 0.2754897711639574)
('Val: AUC, AUPR, Erros: ', 0.5044182967511064, 0.2679173010981913, 14096.901)
('Test: AUC, AUPR, Erros: ', 0.5009093450993973, 0.2779766901195287, 13754.361)
((646, 331), (646, 331), 60431.992, 58221.0)
('Error: ', tensor(40049.0352, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6873541144330115, 0.4903953681077433)
('Val: AUC, AUPR, Erros: ', 0.6664597647192363, 0.457599501958965, 5017.6245)
('Test: AUC, AUPR, Erros: ', 0.6587240254461074, 0.46079946306148584, 5154.3794)
((646, 331), (646, 331), 51634.3, 58221.0)
('Error: ', tensor(37631.1250, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7420031871469586, 0.5674996415460165)
('Val: AUC, AUPR, Erros: ', 0.714341031749375, 0.5219727581065452, 4751.8647)
('Test: AUC, AUPR, Erros: ', 0.6982689571055238, 0.5169671620870011, 4941.2285)
((646, 331), (646, 331), 51188.46, 58221.0)
('Error: ', tensor(35718.3633, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7585368412210424, 0.5899702333802447)
('Val: AUC, AUPR, Erros: ', 0.7282223755478461, 0.5360929931231742, 4565.813)
('Test: AUC, AUPR, Erros: ', 0.7074609759167118, 0.5286485937165505, 4788.0566)
((646, 331), (646, 331), 53393.93, 58221.0)
('Error: ', tensor(34100.8164, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7708667401189062, 0.6080788706266386)
('Val: AUC, AUPR, Erros: ', 0.7328191593799591, 0.5373721500746544, 4464.5835)
('Test: AUC, AUPR, Erros: ', 0.7100445095515462, 0.5314008185516489, 4700.26)
((646, 331), (646, 331), 52085.95, 58221.0)
('Error: ', tensor(33121.1406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7871772066271444, 0.632837548226954)
('Val: AUC, AUPR, Erros: ', 0.735912957893477, 0.5352783674595376, 4468.152)
('Test: AUC, AUPR, Erros: ', 0.7107925370554898, 0.5288117776233021, 4720.4585)
((646, 331), (646, 331), 53037.29, 58221.0)
('Error: ', tensor(32071.0547, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8020485924857639, 0.6555062726916794)
('Val: AUC, AUPR, Erros: ', 0.739696239786169, 0.5378150817381346, 4459.34)
('Test: AUC, AUPR, Erros: ', 0.7129212910767736, 0.5263328795399551, 4728.729)
((646, 331), (646, 331), 53525.027, 58221.0)
('Error: ', tensor(31612.5664, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8083892244769065, 0.6643442633567473)
('Val: AUC, AUPR, Erros: ', 0.7369206272993292, 0.5314034696931969, 4488.976)
('Test: AUC, AUPR, Erros: ', 0.710159796598022, 0.5184170586609234, 4762.7573)
((646, 331), (646, 331), 53874.4, 58221.0)
('Error: ', tensor(31253.8281, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8128139755917667, 0.6702949207198129)
('Val: AUC, AUPR, Erros: ', 0.7334157014825418, 0.5243002910159809, 4522.022)
('Test: AUC, AUPR, Erros: ', 0.7072008625616497, 0.5121754547360661, 4789.5415)
((646, 331), (646, 331), 54358.91, 58221.0)
('Error: ', tensor(30902.0039, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.816562310965772, 0.6754817642884348)
('Val: AUC, AUPR, Erros: ', 0.7299033270397286, 0.5185457348508311, 4548.5205)
('Test: AUC, AUPR, Erros: ', 0.704707808242701, 0.5076633046958278, 4808.761)
((646, 331), (646, 331), 54517.066, 58221.0)
('Error: ', tensor(30562.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8198736620353919, 0.6803198508770084)
('Val: AUC, AUPR, Erros: ', 0.7259687905546149, 0.5137642031714823, 4573.756)
('Test: AUC, AUPR, Erros: ', 0.7033026884354877, 0.504827521330012, 4823.8384)
((646, 331), (646, 331), 54279.22, 58221.0)
('Error: ', tensor(30256.0273, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8229495205265235, 0.6851917716148923)
('Val: AUC, AUPR, Erros: ', 0.7214112484373477, 0.50929016471943, 4601.7607)
('Test: AUC, AUPR, Erros: ', 0.7025051007291256, 0.5048309506970345, 4831.895)
((646, 331), (646, 331), 54988.887, 58221.0)
('Error: ', tensor(29899.6504, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8258713848922281, 0.6896880558136386)
('Val: AUC, AUPR, Erros: ', 0.7166765020186273, 0.505227117978466, 4632.1963)
('Test: AUC, AUPR, Erros: ', 0.7019787610184245, 0.5048782518091952, 4836.1543)
((646, 331), (646, 331), 54726.234, 58221.0)
('Error: ', tensor(29645.7422, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8285199459498039, 0.6938683224343144)
('Val: AUC, AUPR, Erros: ', 0.7124519262416215, 0.5026759819923292, 4657.581)
('Test: AUC, AUPR, Erros: ', 0.7015760489736307, 0.505267162738851, 4843.141)
((646, 331), (646, 331), 54666.42, 58221.0)
('Error: ', tensor(29408.8633, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8310657348689028, 0.6977648684828142)
('Val: AUC, AUPR, Erros: ', 0.7102574943950328, 0.5017147182536368, 4672.4644)
('Test: AUC, AUPR, Erros: ', 0.7013997286242184, 0.5059521654809643, 4847.015)
