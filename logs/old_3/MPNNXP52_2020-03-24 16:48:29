class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug, drugFeatures = None):


        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]


            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)
            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xProtein = self.nodesEmbedding(proteinNodes)
            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)




            iLevel = 0
            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv1(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            iLevel += 1

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv2(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv2g(xAtom, edge_index))

            iLevel += 1
            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv3(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv3g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xDrug = x1 + x2 + x3

            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)

            # xDrug = self.lin2(xDrug)
            # xDrug = self.act2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x = self.convD1(x, drugEdges)
            x = F.relu(x)
            x = self.convD2(x, drugEdges)
            x = F.relu(x)

        if config.SE_GRAPH:
            # Conv SE:
            x = self.convS1(x, seEdges)
            x = F.relu(x)
            # x = self.convS2(x, seEdges)
            # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Inner mode: ', True)
('Cross Prob: ', 0.5)
('Inner Level: ', 1)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7f1eec651090>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((727, 2666), (41, 2666), (727, 331), (41, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 22309.0)
('VALIDATE SUM PROTEIN TEST: ', 1206.0)
((727, 331), (727, 331), 86704.484, 65913.0)
('Error: ', tensor(55278.1719, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4441922571712193, 0.2435268529262257)
('Val: AUC, AUPR, Erros: ', 0.4123379711743681, 0.22005388378014792, 3054.2505)
('Test: AUC, AUPR, Erros: ', 0.5009784979212466, 0.2951144735605127, 2796.8032)
((727, 331), (727, 331), 65312.664, 65913.0)
('Error: ', tensor(47426.0078, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5615649236202458, 0.3187344002413502)
('Val: AUC, AUPR, Erros: ', 0.547197456427266, 0.2949628693143869, 2543.982)
('Test: AUC, AUPR, Erros: ', 0.5931485876145183, 0.33802894237064485, 2569.1045)
((727, 331), (727, 331), 67601.56, 65913.0)
('Error: ', tensor(46550.6484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6155785612462531, 0.39208905637486857)
('Val: AUC, AUPR, Erros: ', 0.6052968744876341, 0.3652458200501727, 2498.9543)
('Test: AUC, AUPR, Erros: ', 0.6100564857282443, 0.365567529790439, 2555.6353)
((727, 331), (727, 331), 68234.05, 65913.0)
('Error: ', tensor(45827.9922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.645829872476067, 0.4314083420640555)
('Val: AUC, AUPR, Erros: ', 0.6431712654034256, 0.4109323881612992, 2456.644)
('Test: AUC, AUPR, Erros: ', 0.6183544698199728, 0.3859630273358687, 2540.225)
((727, 331), (727, 331), 69110.5, 65913.0)
('Error: ', tensor(45109.3438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6655759149231234, 0.4549877077839278)
('Val: AUC, AUPR, Erros: ', 0.6672848099093103, 0.4389614550235202, 2417.4487)
('Test: AUC, AUPR, Erros: ', 0.6278520424712638, 0.40210408874358416, 2520.3618)
((727, 331), (727, 331), 71881.49, 65913.0)
('Error: ', tensor(44333.5391, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6811210881149858, 0.473570844108152)
('Val: AUC, AUPR, Erros: ', 0.6845800767011521, 0.45724178829973017, 2380.0486)
('Test: AUC, AUPR, Erros: ', 0.636692273327302, 0.41462985284958304, 2504.44)
((727, 331), (727, 331), 73793.59, 65913.0)
('Error: ', tensor(43371.5547, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6962128473042262, 0.49334200205175965)
('Val: AUC, AUPR, Erros: ', 0.7001816774306175, 0.47699972670643453, 2332.1235)
('Test: AUC, AUPR, Erros: ', 0.651269747087297, 0.4301400385823744, 2476.7412)
((727, 331), (727, 331), 74717.3, 65913.0)
('Error: ', tensor(42346.4766, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7107009184904576, 0.5144747809512366)
('Val: AUC, AUPR, Erros: ', 0.7139388425684328, 0.4985064333517327, 2280.2568)
('Test: AUC, AUPR, Erros: ', 0.6640802705509354, 0.44700811482662717, 2446.662)
((727, 331), (727, 331), 74645.73, 65913.0)
('Error: ', tensor(41463.5508, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7225404536944261, 0.5321361797662245)
('Val: AUC, AUPR, Erros: ', 0.7229159572086566, 0.5125968054332655, 2240.8262)
('Test: AUC, AUPR, Erros: ', 0.6748346905184627, 0.46156235119972927, 2418.6724)
((727, 331), (727, 331), 75012.18, 65913.0)
('Error: ', tensor(40761.7617, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7331523720362343, 0.5482838603842283)
('Val: AUC, AUPR, Erros: ', 0.7304321834133353, 0.5245498022023154, 2213.1646)
('Test: AUC, AUPR, Erros: ', 0.6871406044620305, 0.4772312571789826, 2391.2175)
((727, 331), (727, 331), 74183.12, 65913.0)
('Error: ', tensor(40132.1875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7418118079901181, 0.5612411546594713)
('Val: AUC, AUPR, Erros: ', 0.7355886255020021, 0.5328496277961055, 2188.6206)
('Test: AUC, AUPR, Erros: ', 0.6958511896608913, 0.4888144786415614, 2365.49)
((727, 331), (727, 331), 73989.68, 65913.0)
('Error: ', tensor(39656.4531, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7487001133075322, 0.5716814168638606)
('Val: AUC, AUPR, Erros: ', 0.7395022021251378, 0.5397402010026806, 2172.9258)
('Test: AUC, AUPR, Erros: ', 0.7030824283256999, 0.4982448891173881, 2347.0684)
((727, 331), (727, 331), 75767.13, 65913.0)
('Error: ', tensor(39344.3516, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7552195449324999, 0.5811848880022714)
('Val: AUC, AUPR, Erros: ', 0.7424442777375203, 0.5448571034931646, 2172.194)
('Test: AUC, AUPR, Erros: ', 0.7092384560007937, 0.5054272840729753, 2347.0674)
((727, 331), (727, 331), 74382.51, 65913.0)
('Error: ', tensor(38869.2344, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7610119845763154, 0.5901614366322853)
('Val: AUC, AUPR, Erros: ', 0.7446724970328799, 0.5489748754602269, 2156.6626)
('Test: AUC, AUPR, Erros: ', 0.7157291903366714, 0.51304693009921, 2319.9043)
((727, 331), (727, 331), 74089.086, 65913.0)
('Error: ', tensor(38519.9336, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7656867855519087, 0.5975737206095021)
('Val: AUC, AUPR, Erros: ', 0.7477205459719772, 0.5543680083556457, 2144.0112)
('Test: AUC, AUPR, Erros: ', 0.7204264226526177, 0.5182950665740169, 2308.2122)
((727, 331), (727, 331), 74994.71, 65913.0)
('Error: ', tensor(38276.3359, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7698705130906932, 0.6041394024862451)
('Val: AUC, AUPR, Erros: ', 0.7484049077595922, 0.555799602533763, 2149.1099)
('Test: AUC, AUPR, Erros: ', 0.7243277371221042, 0.5228150540145345, 2307.4617)
((727, 331), (727, 331), 74730.92, 65913.0)
('Error: ', tensor(37994.8750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7736101138867908, 0.6098797089779012)
('Val: AUC, AUPR, Erros: ', 0.749196617806872, 0.5566989844315221, 2147.1416)
('Test: AUC, AUPR, Erros: ', 0.7281334935583124, 0.5272130350675492, 2298.9207)
Train: 0.7657 0.5976
Test: 0.7204 0.5183
[0.5296587544293967, 0.5405326386185311, 0.56088237824815, 0.5589546989370378, 0.5675688107503342, 0.5657342615820802, 0.5729211639754771, 0.5868813892398939, 0.5945724013501131, 0.5967155931212166, 0.6025691507921213, 0.6068205899604548, 0.6094830840666998, 0.6120662011638398, 0.6171370770121105, 0.6209156783271768, 0.6263625266261054, 0.6320282600663714, 0.6357988770795892, 0.6406962082461725, 0.641306377109119, 0.6443380401526837, 0.6457181845062093, 0.6485992183752264, 0.6498538040283802, 0.6511067936972396, 0.6523668085386177, 0.6532561966177786, 0.6549367386715305, 0.6562277362254734, 0.662311026001442, 0.663922263951773, 0.667826563726984, 0.6690721493294373, 0.671867897515984, 0.6738935231609243, 0.6747915242269785, 0.6780385108931833, 0.6780385108931833, 0.679286594307242, 0.6804532993926338, 0.6826234133054307, 0.6837371010804674, 0.6879416083655239, 0.690721499030065, 0.690721499030065, 0.6919554603932532, 0.6919554603932532, 0.6942382768220398, 0.6959277245970165, 0.6959277245970165, 0.6990297203037663, 0.6990297203037663, 0.6990297203037663, 0.6990297203037663, 0.6990297203037663, 0.6990297203037663, 0.6990297203037663, 0.7018952241388139, 0.7018952241388139, 0.7032104636000093, 0.7049807368421053, 0.7049807368421053, 0.7049807368421053, 0.7049807368421053, 0.7049807368421053, 0.7049807368421053, 0.7073104024225527, 0.7073104024225527, 0.7073104024225527, 0.7149141225018245, 0.7149141225018245, 0.7149141225018245, 0.7176328015952143, 0.7176328015952143, 0.7176328015952143, 0.7176328015952143, 0.7176328015952143, 0.7204264226526177, 0.7204264226526177, 0.7204264226526177, 0.7204264226526177, 0.7204264226526177, 0.7204264226526177, 0.7204264226526177, 0.7204264226526177, 0.7204264226526177, 0.7204264226526177, 0.7204264226526177, 0.7204264226526177]
[0.1361889197599715, 0.14178825047262433, 0.1577509410932439, 0.15789365699425678, 0.1699036633144375, 0.17083262848754333, 0.18214433498722588, 0.19947072033493068, 0.21057503941762298, 0.21441427400247054, 0.22479292433077863, 0.2345179254833533, 0.2368711863502015, 0.23950817955989634, 0.24985728550491174, 0.2566409622026061, 0.2663289922433393, 0.28078821349102356, 0.2888731939898111, 0.3022304707069088, 0.30348460786373765, 0.3072705505450519, 0.30766064682295235, 0.3124901191025105, 0.31509772421896076, 0.3097160412734313, 0.3138398834146504, 0.3153386632622974, 0.3215847691662954, 0.3259391220475007, 0.34202545347820057, 0.34615060074396553, 0.3587568467435912, 0.3625113736463863, 0.36739324546589774, 0.3733798065123362, 0.37576056348167275, 0.38110482687661185, 0.38110482687661185, 0.38499069616728476, 0.3883690111515178, 0.395892060110145, 0.3998731045276924, 0.40939631168258583, 0.41663213259461074, 0.41663213259461074, 0.4195694146350639, 0.4195694146350639, 0.42594314093208147, 0.4321218697426936, 0.4321218697426936, 0.44115043879080085, 0.44115043879080085, 0.44115043879080085, 0.44115043879080085, 0.44115043879080085, 0.44115043879080085, 0.44115043879080085, 0.4498677463066878, 0.4498677463066878, 0.4536070777275045, 0.4606436138704493, 0.4606436138704493, 0.4606436138704493, 0.4606436138704493, 0.4606436138704493, 0.4606436138704493, 0.46975437747608323, 0.46975437747608323, 0.46975437747608323, 0.49858836321206385, 0.49858836321206385, 0.49858836321206385, 0.508468642139395, 0.508468642139395, 0.508468642139395, 0.508468642139395, 0.508468642139395, 0.5182950665740169, 0.5182950665740169, 0.5182950665740169, 0.5182950665740169, 0.5182950665740169, 0.5182950665740169, 0.5182950665740169, 0.5182950665740169, 0.5182950665740169, 0.5182950665740169, 0.5182950665740169, 0.5182950665740169]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((727, 2666), (40, 2666), (727, 331), (40, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 22068.0)
('VALIDATE SUM PROTEIN TEST: ', 1128.0)
((727, 331), (727, 331), 88677.805, 66109.0)
('Error: ', tensor(54903.3789, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.45631324454183003, 0.24980956038137192)
('Val: AUC, AUPR, Erros: ', 0.4427019663821761, 0.2210033902969361, 2935.9846)
('Test: AUC, AUPR, Erros: ', 0.4271086984438214, 0.22334419566742647, 3022.9375)
((727, 331), (727, 331), 75954.9, 66109.0)
('Error: ', tensor(46428.7109, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6393489007702899, 0.4124414838983754)
('Val: AUC, AUPR, Erros: ', 0.6467590560368636, 0.39086955591729117, 2486.8423)
('Test: AUC, AUPR, Erros: ', 0.635500011812596, 0.39611919351834035, 2498.018)
((727, 331), (727, 331), 76680.984, 66109.0)
('Error: ', tensor(45398.3672, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6687395385470832, 0.45506173028038344)
('Val: AUC, AUPR, Erros: ', 0.6752994224011606, 0.43287383092263343, 2437.535)
('Test: AUC, AUPR, Erros: ', 0.6678286919884372, 0.43861044269027305, 2444.5525)
((727, 331), (727, 331), 76924.72, 66109.0)
('Error: ', tensor(44195.8398, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6887448697695469, 0.4860660022588428)
('Val: AUC, AUPR, Erros: ', 0.6938445621596967, 0.4618436779532169, 2377.9536)
('Test: AUC, AUPR, Erros: ', 0.6916705911392638, 0.4711968450221902, 2376.1858)
((727, 331), (727, 331), 77688.4, 66109.0)
('Error: ', tensor(43060.7031, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7035970339427817, 0.507801629856107)
('Val: AUC, AUPR, Erros: ', 0.7104186803235237, 0.48564080455274833, 2320.7175)
('Test: AUC, AUPR, Erros: ', 0.7038065033500611, 0.48893117875783787, 2323.7144)
((727, 331), (727, 331), 77019.484, 66109.0)
('Error: ', tensor(42123.4922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7138605625725032, 0.5225833378588342)
('Val: AUC, AUPR, Erros: ', 0.7201904337996797, 0.4989519931585236, 2269.2385)
('Test: AUC, AUPR, Erros: ', 0.7142850595557382, 0.5035738465894246, 2271.9065)
((727, 331), (727, 331), 76100.234, 66109.0)
('Error: ', tensor(41451.8398, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7213993490469394, 0.53416104579598)
('Val: AUC, AUPR, Erros: ', 0.725899595258994, 0.5086359826108864, 2234.6409)
('Test: AUC, AUPR, Erros: ', 0.7195925225055086, 0.5097888811558258, 2243.9695)
((727, 331), (727, 331), 75001.5, 66109.0)
('Error: ', tensor(40950.7188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7281392888312854, 0.5428615294707662)
('Val: AUC, AUPR, Erros: ', 0.7315041942859797, 0.517629637196683, 2203.8381)
('Test: AUC, AUPR, Erros: ', 0.7250722956007674, 0.5193228642009846, 2217.3203)
((727, 331), (727, 331), 72505.625, 66109.0)
('Error: ', tensor(40459.2617, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7339939811976856, 0.5508843167615506)
('Val: AUC, AUPR, Erros: ', 0.730055121909353, 0.5183785233087713, 2187.1016)
('Test: AUC, AUPR, Erros: ', 0.7306750586660236, 0.5261149140461078, 2189.8342)
((727, 331), (727, 331), 74632.234, 66109.0)
('Error: ', tensor(40366.5938, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7371476421945178, 0.5558284096904897)
('Val: AUC, AUPR, Erros: ', 0.7315469465575837, 0.5208556048618262, 2198.7402)
('Test: AUC, AUPR, Erros: ', 0.7328172189861032, 0.5310913587168142, 2191.7866)
((727, 331), (727, 331), 73719.695, 66109.0)
('Error: ', tensor(40079.0547, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7409691353357164, 0.5613096272489783)
('Val: AUC, AUPR, Erros: ', 0.7332154698692579, 0.5234751000006677, 2183.072)
('Test: AUC, AUPR, Erros: ', 0.7297682682092645, 0.5267758946681975, 2198.5693)
((727, 331), (727, 331), 73567.09, 66109.0)
('Error: ', tensor(39762.0547, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7457483703749938, 0.5689882599782399)
('Val: AUC, AUPR, Erros: ', 0.731199034041456, 0.5218351073261684, 2187.427)
('Test: AUC, AUPR, Erros: ', 0.7323101644121166, 0.5335910728351279, 2186.3472)
((727, 331), (727, 331), 74719.1, 66109.0)
('Error: ', tensor(39532.9258, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7502519149209541, 0.5761963170728354)
('Val: AUC, AUPR, Erros: ', 0.7321421582212574, 0.5228667836781429, 2193.73)
('Test: AUC, AUPR, Erros: ', 0.7343704644768922, 0.5377397916718784, 2185.7263)
((727, 331), (727, 331), 74177.71, 66109.0)
('Error: ', tensor(39249.5508, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7538861629979083, 0.5824044611944655)
('Val: AUC, AUPR, Erros: ', 0.7331893182915543, 0.5223816367727852, 2187.9397)
('Test: AUC, AUPR, Erros: ', 0.7348513214037055, 0.5380981240186467, 2181.286)
((727, 331), (727, 331), 75177.56, 66109.0)
('Error: ', tensor(39038.9648, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7577070038957563, 0.5891988107152172)
('Val: AUC, AUPR, Erros: ', 0.7310349723820032, 0.5204570709385944, 2204.7402)
('Test: AUC, AUPR, Erros: ', 0.7345952881905294, 0.5403284726173856, 2190.8552)
((727, 331), (727, 331), 74850.42, 66109.0)
('Error: ', tensor(38769.0898, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7613121934068832, 0.5948957348994074)
('Val: AUC, AUPR, Erros: ', 0.7319528079276607, 0.5208902535473151, 2198.7437)
('Test: AUC, AUPR, Erros: ', 0.7358625771962019, 0.5429010219553947, 2183.937)
((727, 331), (727, 331), 74260.88, 66109.0)
('Error: ', tensor(38476.0430, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7650374661147901, 0.6007656411449743)
('Val: AUC, AUPR, Erros: ', 0.7331236468240547, 0.5210548766646873, 2193.0933)
('Test: AUC, AUPR, Erros: ', 0.7375585348134944, 0.5452483229956756, 2177.015)
Train: 0.7410 0.5613
Test: 0.7298 0.5268
[0.5286153793121279, 0.5307127186934529, 0.5442323048886222, 0.5537394706449399, 0.5555311600971915, 0.5553007936248734, 0.5594963738556098, 0.5767412604766133, 0.5863795282264915, 0.5860840137802394, 0.5964838708081472, 0.6009461119907993, 0.6064355228276878, 0.6069157774918965, 0.6142004805091887, 0.6156189136122697, 0.619017704174011, 0.6250546415191915, 0.6265997834172984, 0.6300683868602908, 0.6296855933007183, 0.634658810687685, 0.6383943483926474, 0.646509172016597, 0.6485849702189074, 0.6532078006191618, 0.6576718114111592, 0.6587351066022245, 0.6617596608342791, 0.6620267488312828, 0.6666317537710659, 0.6689219142518326, 0.6737745871591474, 0.6762043364715694, 0.6810553291052116, 0.6822351051063237, 0.683066518277194, 0.6876994766212337, 0.6876994766212337, 0.6901327178637656, 0.6901696605467956, 0.6917788874087878, 0.6928633720005009, 0.6975518284635365, 0.7017311955298999, 0.7017311955298999, 0.7029393612920102, 0.7029393612920102, 0.7056820475603789, 0.7069887599694784, 0.7069887599694784, 0.7092337042420335, 0.7092337042420335, 0.7092337042420335, 0.7092337042420335, 0.7092337042420335, 0.7092337042420335, 0.7092337042420335, 0.7126456295701655, 0.7126456295701655, 0.714293976409043, 0.716184495416137, 0.716184495416137, 0.716184495416137, 0.716184495416137, 0.716184495416137, 0.716184495416137, 0.7182208958571603, 0.7182208958571603, 0.7182208958571603, 0.7249666786511442, 0.7249666786511442, 0.7249666786511442, 0.7268051629681535, 0.7268051629681535, 0.7268051629681535, 0.7268051629681535, 0.7268051629681535, 0.7297682682092645, 0.7297682682092645, 0.7297682682092645, 0.7297682682092645, 0.7297682682092645, 0.7297682682092645, 0.7297682682092645, 0.7297682682092645, 0.7297682682092645, 0.7297682682092645, 0.7297682682092645, 0.7297682682092645]
[0.14197312255883004, 0.12709384286311956, 0.1393368433780151, 0.14749734058251626, 0.1507007942191348, 0.1546304216471379, 0.16135601986904696, 0.18973783990467671, 0.20141578583796454, 0.1996563683176639, 0.21371759809715613, 0.2202472948384832, 0.22629419432834746, 0.22618481821457376, 0.23685549180450421, 0.23696220712186264, 0.2417662020470582, 0.2517891234162471, 0.2552088060142161, 0.26663966832830743, 0.2653277194211855, 0.27986848435009665, 0.29166232100463985, 0.31248665872105535, 0.31654705982141756, 0.3212636661064175, 0.33104846166253954, 0.33383965361354323, 0.3391860592084896, 0.33820757077704944, 0.34795915476047656, 0.3525526741173332, 0.36437356484282846, 0.36835036121844106, 0.38308846538067265, 0.38584844115177164, 0.38848933883506376, 0.3996088375880741, 0.3996088375880741, 0.40678430104136176, 0.4064945654929172, 0.4072794969927647, 0.40896424235592277, 0.4226863190034609, 0.434828824855562, 0.434828824855562, 0.4382749291785895, 0.4382749291785895, 0.44739567530672575, 0.44943898124558007, 0.44943898124558007, 0.45539092832380496, 0.45539092832380496, 0.45539092832380496, 0.45539092832380496, 0.45539092832380496, 0.45539092832380496, 0.45539092832380496, 0.4672185104923816, 0.4672185104923816, 0.47246527626144497, 0.4793038023589552, 0.4793038023589552, 0.4793038023589552, 0.4793038023589552, 0.4793038023589552, 0.4793038023589552, 0.4872857855192605, 0.4872857855192605, 0.4872857855192605, 0.5114338680382088, 0.5114338680382088, 0.5114338680382088, 0.516305209334373, 0.516305209334373, 0.516305209334373, 0.516305209334373, 0.516305209334373, 0.5267758946681975, 0.5267758946681975, 0.5267758946681975, 0.5267758946681975, 0.5267758946681975, 0.5267758946681975, 0.5267758946681975, 0.5267758946681975, 0.5267758946681975, 0.5267758946681975, 0.5267758946681975, 0.5267758946681975]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_2
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((727, 2666), (41, 2666), (727, 331), (41, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 21797.0)
('VALIDATE SUM PROTEIN TEST: ', 1447.0)
((727, 331), (727, 331), 53044.715, 66635.0)
('Error: ', tensor(51223.1562, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4511723700014618, 0.2499611551513261)
('Val: AUC, AUPR, Erros: ', 0.40535115891322515, 0.18222355317192335, 2525.0496)
('Test: AUC, AUPR, Erros: ', 0.43049962267427205, 0.22334815925502977, 2647.7036)
((727, 331), (727, 331), 70494.27, 66635.0)
('Error: ', tensor(46779.2188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6204507546712209, 0.3809485244256785)
('Val: AUC, AUPR, Erros: ', 0.5673566197205101, 0.2530349340509338, 2364.921)
('Test: AUC, AUPR, Erros: ', 0.5984581158496171, 0.32922212351082314, 2491.4814)
((727, 331), (727, 331), 69802.46, 66635.0)
('Error: ', tensor(45557.6914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6748323085015595, 0.4457701714104512)
('Val: AUC, AUPR, Erros: ', 0.6565712456767892, 0.332238165394178, 2258.0544)
('Test: AUC, AUPR, Erros: ', 0.6567379744719648, 0.3773770363312796, 2431.955)
((727, 331), (727, 331), 70371.69, 66635.0)
('Error: ', tensor(44529.8438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6955389160306888, 0.47380290209003123)
('Val: AUC, AUPR, Erros: ', 0.7059302390656189, 0.4179320211540582, 2172.4243)
('Test: AUC, AUPR, Erros: ', 0.6873462900067216, 0.42174362714550706, 2376.4329)
((727, 331), (727, 331), 71737.164, 66635.0)
('Error: ', tensor(43318.8125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7070559141159574, 0.5000831932588723)
('Val: AUC, AUPR, Erros: ', 0.7243830760844394, 0.46476450135298, 2101.6265)
('Test: AUC, AUPR, Erros: ', 0.7030471239144244, 0.45874226143554064, 2317.2795)
((727, 331), (727, 331), 73834.41, 66635.0)
('Error: ', tensor(42358.0156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7158780444360224, 0.5215750896143783)
('Val: AUC, AUPR, Erros: ', 0.7334881999507606, 0.49073975966528605, 2059.87)
('Test: AUC, AUPR, Erros: ', 0.7140528574284435, 0.48574917738704315, 2274.813)
((727, 331), (727, 331), 77239.836, 66635.0)
('Error: ', tensor(41744.9922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7227053913585241, 0.5361642502739697)
('Val: AUC, AUPR, Erros: ', 0.7423988386956322, 0.511541132639288, 2033.6711)
('Test: AUC, AUPR, Erros: ', 0.7191936608575646, 0.5012682730745603, 2263.0525)
((727, 331), (727, 331), 74946.375, 66635.0)
('Error: ', tensor(41101.9062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7282894391962423, 0.5454607704111588)
('Val: AUC, AUPR, Erros: ', 0.7459641731036393, 0.5191859256199187, 1992.3556)
('Test: AUC, AUPR, Erros: ', 0.7251331843687983, 0.5126787774956915, 2217.303)
((727, 331), (727, 331), 74021.07, 66635.0)
('Error: ', tensor(40755.4766, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7330381036606116, 0.5518200505273168)
('Val: AUC, AUPR, Erros: ', 0.7521133647203494, 0.528345866332393, 1964.5753)
('Test: AUC, AUPR, Erros: ', 0.7267038001518664, 0.5156858044907632, 2204.917)
((727, 331), (727, 331), 72538.08, 66635.0)
('Error: ', tensor(40453.3594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7372613835257452, 0.5568755109570791)
('Val: AUC, AUPR, Erros: ', 0.7530709801358427, 0.5295545527230313, 1948.4612)
('Test: AUC, AUPR, Erros: ', 0.7287962773960447, 0.5180903827571672, 2186.5696)
((727, 331), (727, 331), 72612.74, 66635.0)
('Error: ', tensor(40245.8477, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7411527154775768, 0.5615003372416127)
('Val: AUC, AUPR, Erros: ', 0.7551110633654798, 0.5327614967223857, 1942.9707)
('Test: AUC, AUPR, Erros: ', 0.7297083209815395, 0.518312448370192, 2186.233)
((727, 331), (727, 331), 72998.164, 66635.0)
('Error: ', tensor(40027.9492, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7452740950073146, 0.5668322614005364)
('Val: AUC, AUPR, Erros: ', 0.7563188965569829, 0.534079394892889, 1945.7787)
('Test: AUC, AUPR, Erros: ', 0.7308953217869731, 0.5190312443040526, 2185.0078)
((727, 331), (727, 331), 73586.234, 66635.0)
('Error: ', tensor(39852.4219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7487928909655726, 0.5713763386609881)
('Val: AUC, AUPR, Erros: ', 0.756578083186547, 0.5350410095617715, 1951.1589)
('Test: AUC, AUPR, Erros: ', 0.7317023056506304, 0.5195218035386967, 2187.9385)
((727, 331), (727, 331), 74056.24, 66635.0)
('Error: ', tensor(39613.3047, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7532631304285576, 0.5773700712858427)
('Val: AUC, AUPR, Erros: ', 0.757574867008615, 0.5369408690176468, 1954.6595)
('Test: AUC, AUPR, Erros: ', 0.7308874236594787, 0.5173197805429433, 2194.2935)
((727, 331), (727, 331), 73909.914, 66635.0)
('Error: ', tensor(39380.2578, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7567188451652038, 0.5825834810030714)
('Val: AUC, AUPR, Erros: ', 0.7571150395130952, 0.5346838957861976, 1961.8314)
('Test: AUC, AUPR, Erros: ', 0.731171054193499, 0.5164046200531445, 2194.6436)
((727, 331), (727, 331), 74356.67, 66635.0)
('Error: ', tensor(39144.9219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7605023561494293, 0.5884500886498759)
('Val: AUC, AUPR, Erros: ', 0.7578411029585004, 0.5356275727802511, 1967.1738)
('Test: AUC, AUPR, Erros: ', 0.7294486773532427, 0.5140241771790331, 2203.0437)
((727, 331), (727, 331), 74284.27, 66635.0)
('Error: ', tensor(38897.3594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7639816486680899, 0.5940785253690151)
('Val: AUC, AUPR, Erros: ', 0.7573625931093588, 0.5350423454584546, 1969.3729)
('Test: AUC, AUPR, Erros: ', 0.7273386633407946, 0.5114005952344113, 2207.3513)
Train: 0.7412 0.5615
Test: 0.7297 0.5183
[0.5488215488215488, 0.5326945819243645, 0.5282463120271601, 0.5381029060640172, 0.5428393502335281, 0.5441200101703534, 0.5537045176471641, 0.5727548846003783, 0.575712169743875, 0.5787670697155457, 0.5852199446220727, 0.5904256363204039, 0.5937840093634836, 0.5938489763116357, 0.6033005064353594, 0.6096194568142257, 0.6141245338950547, 0.6213144373058395, 0.627464911004428, 0.6315418357315221, 0.6313485040012815, 0.6339186149906051, 0.6403044077226655, 0.6431175919971643, 0.6443152185185694, 0.6473583533408617, 0.6484392136276657, 0.6492197662977526, 0.6505699301733829, 0.6515300957878446, 0.6571698261243007, 0.6618008367255668, 0.6662944758015374, 0.668532035024438, 0.6711681787652322, 0.6730015177896195, 0.6749046330611916, 0.6786377670830611, 0.6786377670830611, 0.6823239965291392, 0.6845012126022114, 0.6855685419108637, 0.6874009467308968, 0.6920174190454474, 0.6963781923436996, 0.6963781923436996, 0.6971089670711563, 0.6971089670711563, 0.7009636461961597, 0.7024136445075857, 0.7024136445075857, 0.7055152836735394, 0.7055152836735394, 0.7055152836735394, 0.7055152836735394, 0.7055152836735394, 0.7055152836735394, 0.7055152836735394, 0.7092770743232906, 0.7092770743232906, 0.7108509714691869, 0.7131129725490197, 0.7131129725490197, 0.7131129725490197, 0.7131129725490197, 0.7131129725490197, 0.7131129725490197, 0.7163021891765358, 0.7163021891765358, 0.7163021891765358, 0.7235600640011506, 0.7235600640011506, 0.7235600640011506, 0.7266608389201813, 0.7266608389201813, 0.7266608389201813, 0.7266608389201813, 0.7266608389201813, 0.7297083209815395, 0.7297083209815395, 0.7297083209815395, 0.7297083209815395, 0.7297083209815395, 0.7297083209815395, 0.7297083209815395, 0.7297083209815395, 0.7297083209815395, 0.7297083209815395, 0.7297083209815395, 0.7297083209815395]
[0.12780728621114376, 0.12574617227674015, 0.12633162078273646, 0.13298198363934374, 0.13523634832568612, 0.13669447278633803, 0.14610271019290563, 0.16461799189268844, 0.17106315563889998, 0.1754808229872163, 0.18618426238530586, 0.19525028017882246, 0.19866282767190807, 0.19651819841389997, 0.21203830364015408, 0.22115412517751548, 0.22525818986358395, 0.24065224427259213, 0.2524966957066395, 0.2582306833664739, 0.25853002906341893, 0.2640210818684852, 0.2761608955896145, 0.2765534564238746, 0.2789861895260308, 0.28489015823109476, 0.2869662007733552, 0.2888157546569886, 0.2930427615165814, 0.2950445320533236, 0.31127593779543744, 0.32310749804336214, 0.3321522140436274, 0.33787882568576033, 0.34324592312826924, 0.34664702178127915, 0.35202754820740306, 0.36254538311622286, 0.36254538311622286, 0.3710133190502526, 0.3768939658360096, 0.3781584127380897, 0.385234880174379, 0.3965007546840102, 0.4101932072177714, 0.4101932072177714, 0.4104439991760492, 0.4104439991760492, 0.42268806512745505, 0.4267320158617013, 0.4267320158617013, 0.43421531765167476, 0.43421531765167476, 0.43421531765167476, 0.43421531765167476, 0.43421531765167476, 0.43421531765167476, 0.43421531765167476, 0.44573399112528134, 0.44573399112528134, 0.4496959034308455, 0.45593364663445707, 0.45593364663445707, 0.45593364663445707, 0.45593364663445707, 0.45593364663445707, 0.45593364663445707, 0.4682468534781548, 0.4682468534781548, 0.4682468534781548, 0.4944489158118561, 0.4944489158118561, 0.4944489158118561, 0.5058677977516022, 0.5058677977516022, 0.5058677977516022, 0.5058677977516022, 0.5058677977516022, 0.518312448370192, 0.518312448370192, 0.518312448370192, 0.518312448370192, 0.518312448370192, 0.518312448370192, 0.518312448370192, 0.518312448370192, 0.518312448370192, 0.518312448370192, 0.518312448370192, 0.518312448370192]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_3
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((728, 2666), (40, 2666), (728, 331), (40, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 21953.0)
('VALIDATE SUM PROTEIN TEST: ', 1399.0)
((728, 331), (728, 331), 39727.312, 66099.0)
('Error: ', tensor(52359.1875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4520346085341447, 0.24873057286256553)
('Val: AUC, AUPR, Erros: ', 0.4231463365834628, 0.2737875987982997, 3075.4866)
('Test: AUC, AUPR, Erros: ', 0.4102769790478646, 0.1829075771568674, 2472.5767)
((728, 331), (728, 331), 60122.46, 66099.0)
('Error: ', tensor(47652.0977, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.560625522713487, 0.3239496428515915)
('Val: AUC, AUPR, Erros: ', 0.5197237160438889, 0.33387682753875936, 2775.2476)
('Test: AUC, AUPR, Erros: ', 0.501286451315557, 0.21561709944478907, 2381.4746)
((728, 331), (728, 331), 69081.73, 66099.0)
('Error: ', tensor(46481.4453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6265750725106316, 0.381210672817288)
('Val: AUC, AUPR, Erros: ', 0.5874868299410596, 0.37244038023564596, 2689.397)
('Test: AUC, AUPR, Erros: ', 0.5710392938712381, 0.2496686502193241, 2351.438)
((728, 331), (728, 331), 69572.6, 66099.0)
('Error: ', tensor(45616.1406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6689672777777309, 0.4382052997113532)
('Val: AUC, AUPR, Erros: ', 0.6308939009144425, 0.4157884724162955, 2643.5308)
('Test: AUC, AUPR, Erros: ', 0.6386042656860367, 0.30792560349082765, 2279.0244)
((728, 331), (728, 331), 70958.664, 66099.0)
('Error: ', tensor(44806.3672, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6913808659725259, 0.4735387526472389)
('Val: AUC, AUPR, Erros: ', 0.6553958707905803, 0.44885127625699833, 2600.1843)
('Test: AUC, AUPR, Erros: ', 0.684095879493557, 0.387367199980117, 2220.5503)
((728, 331), (728, 331), 73425.71, 66099.0)
('Error: ', tensor(43979.6172, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7060641182652057, 0.4954630419493022)
('Val: AUC, AUPR, Erros: ', 0.6710184142296021, 0.47158933820910487, 2558.4233)
('Test: AUC, AUPR, Erros: ', 0.7073159269397852, 0.4298910855636482, 2187.543)
((728, 331), (728, 331), 75654.59, 66099.0)
('Error: ', tensor(43198.0781, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7147569571906078, 0.5114892651675266)
('Val: AUC, AUPR, Erros: ', 0.6852954439611306, 0.4945591710855725, 2510.864)
('Test: AUC, AUPR, Erros: ', 0.720334085492502, 0.4615036829124719, 2147.9316)
((728, 331), (728, 331), 74939.93, 66099.0)
('Error: ', tensor(42412.3125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7207255035449168, 0.5213009507798908)
('Val: AUC, AUPR, Erros: ', 0.6920140332259529, 0.5085946805605213, 2472.5889)
('Test: AUC, AUPR, Erros: ', 0.7273077993713132, 0.47785358281657203, 2099.0317)
((728, 331), (728, 331), 75341.305, 66099.0)
('Error: ', tensor(41690.8516, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7282191857974964, 0.5346899313852269)
('Val: AUC, AUPR, Erros: ', 0.6929429059284022, 0.5109085085677685, 2455.5234)
('Test: AUC, AUPR, Erros: ', 0.7371569409378489, 0.4939910416256868, 2058.9739)
((728, 331), (728, 331), 75444.4, 66099.0)
('Error: ', tensor(41191.0938, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.732460908706395, 0.5414791461350272)
('Val: AUC, AUPR, Erros: ', 0.6969483501220024, 0.5196178542623613, 2435.3247)
('Test: AUC, AUPR, Erros: ', 0.7438860632587472, 0.5061481037015323, 2025.9589)
