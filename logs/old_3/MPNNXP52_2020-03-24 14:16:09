class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug, drugFeatures = None):


        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]
            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xProtein = self.nodesEmbedding(proteinNodes)

            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)




            iLevel = 0
            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv1(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            iLevel += 1

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv2(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv2g(xAtom, edge_index))

            iLevel += 1
            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv3(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv3g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xDrug = x1 + x2 + x3

            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)
            xDrug = self.lin2(xDrug)
            xDrug = self.act2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x = self.convD1(x, drugEdges)
            x = F.relu(x)
            x = self.convD2(x, drugEdges)
            x = F.relu(x)

        if config.SE_GRAPH:
            # Conv SE:
            x = self.convS1(x, seEdges)
            x = F.relu(x)
            # x = self.convS2(x, seEdges)
            # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', False)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Cross Prob: ', 0.5)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7f36985c92d0>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
('EXT MODE: ', True)
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 331)
((775, 2666), (97, 2666), (775, 331), (97, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19982.0)
('VALIDATE SUM PROTEIN TEST: ', 2685.0)
((775, 331), (775, 331), 66156.055, 64287.0)
('Error: ', tensor(47995.1484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5412940088674907, 0.274820033554231)
('Val: AUC, AUPR, Erros: ', 0.5498355326613183, 0.2854282857836612, 6151.9707)
('Test: AUC, AUPR, Erros: ', 0.534945533220636, 0.2875384119322518, 6243.423)
((775, 331), (775, 331), 105464.43, 64287.0)
('Error: ', tensor(52963.8047, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6774709736948138, 0.41492808483743876)
('Val: AUC, AUPR, Erros: ', 0.6592858505785149, 0.3915221680642853, 6732.965)
('Test: AUC, AUPR, Erros: ', 0.6454624232340098, 0.39518066715939026, 6816.222)
((775, 331), (775, 331), 84325.44, 64287.0)
('Error: ', tensor(45014.9453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7502773032355267, 0.5562392821411497)
('Val: AUC, AUPR, Erros: ', 0.7293781815580963, 0.5194496192804592, 5816.8745)
('Test: AUC, AUPR, Erros: ', 0.7036444487324816, 0.5130365821297533, 5962.6426)
((775, 331), (775, 331), 62086.3, 64287.0)
('Error: ', tensor(39084.2656, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7700433501256905, 0.5804303070695446)
('Val: AUC, AUPR, Erros: ', 0.741731925834302, 0.5437580690917779, 5193.6514)
('Test: AUC, AUPR, Erros: ', 0.7220341378508938, 0.5239614685492985, 5379.3105)
((775, 331), (775, 331), 63649.336, 64287.0)
('Error: ', tensor(37558.0312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7834432641355923, 0.5990352911001033)
('Val: AUC, AUPR, Erros: ', 0.7430260569713801, 0.5472633610220153, 5203.7783)
('Test: AUC, AUPR, Erros: ', 0.7290122461977042, 0.5255964875987342, 5413.425)
((775, 331), (775, 331), 69188.52, 64287.0)
('Error: ', tensor(36766.3828, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7991103241949559, 0.6219657075816446)
('Val: AUC, AUPR, Erros: ', 0.7421610795161886, 0.5389961026906744, 5244.6543)
('Test: AUC, AUPR, Erros: ', 0.7318848203997806, 0.5236414609302629, 5394.216)
((775, 331), (775, 331), 64032.6, 64287.0)
('Error: ', tensor(36174.4492, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8055315001036834, 0.6325847960741909)
('Val: AUC, AUPR, Erros: ', 0.732247951894314, 0.5152361352231166, 5425.9766)
('Test: AUC, AUPR, Erros: ', 0.7319326079244814, 0.5118855242676122, 5485.4253)
((775, 331), (775, 331), 65738.39, 64287.0)
('Error: ', tensor(35656.7266, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8125873604591878, 0.6428006227674095)
('Val: AUC, AUPR, Erros: ', 0.7154629588126837, 0.4845344710214354, 5765.9746)
('Test: AUC, AUPR, Erros: ', 0.7238304550780794, 0.5014425816789463, 5609.51)
((775, 331), (775, 331), 66447.1, 64287.0)
('Error: ', tensor(35261.5742, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8175903425165059, 0.6511353967263217)
('Val: AUC, AUPR, Erros: ', 0.7000049212689593, 0.45836282846181564, 6163.5273)
('Test: AUC, AUPR, Erros: ', 0.7263220131047705, 0.49742895353335204, 5657.344)
((775, 331), (775, 331), 67907.18, 64287.0)
('Error: ', tensor(34963.7891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8215965100017338, 0.6579476832202982)
('Val: AUC, AUPR, Erros: ', 0.6954186620559772, 0.44518069596522586, 6566.879)
('Test: AUC, AUPR, Erros: ', 0.7250729630696994, 0.49159018323249504, 5745.6216)
((775, 331), (775, 331), 68568.664, 64287.0)
('Error: ', tensor(34679.2539, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8254629326253085, 0.6645979071514747)
('Val: AUC, AUPR, Erros: ', 0.6896268253498028, 0.4324846428680923, 7185.6235)
('Test: AUC, AUPR, Erros: ', 0.714011522218198, 0.4808511003806025, 5921.2827)
Train: 0.7700 0.5804
Test: 0.7220 0.5240
[0.5623480825652613, 0.5600570858841141, 0.5574722331953971, 0.5515991388529163, 0.5583357277399994, 0.5607958000923549, 0.563389080684979, 0.5751332020873063, 0.5800761227428166, 0.580356803812342, 0.5846769969491342, 0.58581114004815, 0.5886643625701673, 0.5908259603058824, 0.5991539565932678, 0.6069157076853371, 0.6112030393413881, 0.6161702200401915, 0.6199175678571139, 0.6231746774698362, 0.6236158167515318, 0.6262725444166808, 0.6301263029733337, 0.6340831014470228, 0.6358187270772026, 0.6419906131012383, 0.6442457425265902, 0.645400752313983, 0.6472351980896329, 0.6486223320116788, 0.6558152357577826, 0.6584681694907129, 0.662822359683265, 0.6655565782721692, 0.6701879269090012, 0.6720073134952096, 0.6733337973054849, 0.6767840795845361, 0.6767840795845361, 0.6798077647454659, 0.6808205115806001, 0.6833620274449362, 0.6847679844942678, 0.6894368350504442, 0.6933322894454752, 0.6933322894454752, 0.6946089509468878, 0.6946089509468878, 0.6976638062873702, 0.6988217922407973, 0.6988217922407973, 0.7011527707798961, 0.7011527707798961, 0.7011527707798961, 0.7011527707798961, 0.7011527707798961, 0.7011527707798961, 0.7011527707798961, 0.7047593224192815, 0.7047593224192815, 0.706581777507804, 0.7083929030858294, 0.7083929030858294, 0.7083929030858294, 0.7083929030858294, 0.7083929030858294, 0.7083929030858294, 0.7105803812768924, 0.7105803812768924, 0.7105803812768924, 0.7169917387186548, 0.7169917387186548, 0.7169917387186548, 0.7194218676516861, 0.7194218676516861, 0.7194218676516861, 0.7194218676516861, 0.7194218676516861, 0.7220341378508938, 0.7220341378508938, 0.7220341378508938, 0.7220341378508938, 0.7220341378508938, 0.7220341378508938, 0.7220341378508938, 0.7220341378508938, 0.7220341378508938, 0.7220341378508938, 0.7220341378508938, 0.7220341378508938]
[0.159460741107807, 0.1519792010267674, 0.15318318571845282, 0.15137018409483619, 0.15663621805255107, 0.1600301892441316, 0.16484903412126573, 0.17835652506430652, 0.1858134143495419, 0.18964417263728245, 0.19636972172154674, 0.1978733100043376, 0.20254660757437085, 0.20712875658780325, 0.2231582712871239, 0.23649416384570987, 0.24292848923370625, 0.25300911497909784, 0.26052138902249056, 0.2672826354181748, 0.26806127586318707, 0.2717317875742123, 0.28100991768134354, 0.2907952857059108, 0.29426506003963326, 0.30589286650375314, 0.31032735863332206, 0.31270820067799926, 0.3163834306845923, 0.3210745175636138, 0.3388373184869429, 0.3441826977841326, 0.35501914228669396, 0.36157576380719847, 0.37108766285527817, 0.3762306524180176, 0.3793849400189093, 0.3866947568361565, 0.3866947568361565, 0.3955064707764776, 0.3972201788364279, 0.4041991338819343, 0.40796680212487657, 0.42083540681399867, 0.4304620482895952, 0.4304620482895952, 0.43370509525265627, 0.43370509525265627, 0.44294690237106443, 0.44627848662064157, 0.44627848662064157, 0.4537687496662037, 0.4537687496662037, 0.4537687496662037, 0.4537687496662037, 0.4537687496662037, 0.4537687496662037, 0.4537687496662037, 0.46548402702470704, 0.46548402702470704, 0.47136123970703925, 0.47729113939218626, 0.47729113939218626, 0.47729113939218626, 0.47729113939218626, 0.47729113939218626, 0.47729113939218626, 0.48451347232306796, 0.48451347232306796, 0.48451347232306796, 0.5058311862767128, 0.5058311862767128, 0.5058311862767128, 0.5143345517119589, 0.5143345517119589, 0.5143345517119589, 0.5143345517119589, 0.5143345517119589, 0.5239614685492985, 0.5239614685492985, 0.5239614685492985, 0.5239614685492985, 0.5239614685492985, 0.5239614685492985, 0.5239614685492985, 0.5239614685492985, 0.5239614685492985, 0.5239614685492985, 0.5239614685492985, 0.5239614685492985]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 331)
((775, 2666), (97, 2666), (775, 331), (97, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19861.0)
('VALIDATE SUM PROTEIN TEST: ', 2513.0)
((775, 331), (775, 331), 70142.26, 63516.0)
('Error: ', tensor(47920.7891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5181610423932252, 0.24885282668909917)
('Val: AUC, AUPR, Erros: ', 0.5431100448666797, 0.30231918008332975, 6565.8027)
('Test: AUC, AUPR, Erros: ', 0.5322870708478283, 0.2696652368470708, 6171.7876)
((775, 331), (775, 331), 66550.164, 63516.0)
('Error: ', tensor(39153.4609, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7602277786276621, 0.5506829915920699)
('Val: AUC, AUPR, Erros: ', 0.7292460786346053, 0.5317671720236647, 5680.916)
('Test: AUC, AUPR, Erros: ', 0.7341774381847138, 0.5209003222326678, 5243.838)
((775, 331), (775, 331), 71391.75, 63516.0)
('Error: ', tensor(37081.6484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7888973868395119, 0.6070501350513983)
('Val: AUC, AUPR, Erros: ', 0.7273006809202206, 0.5450701671320538, 5675.657)
('Test: AUC, AUPR, Erros: ', 0.7318189039270839, 0.5227817766964584, 5361.5723)
((775, 331), (775, 331), 62995.242, 63516.0)
('Error: ', tensor(35959.7188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8051880942207263, 0.6290523714462638)
('Val: AUC, AUPR, Erros: ', 0.714569609933273, 0.538561549869675, 5805.5913)
('Test: AUC, AUPR, Erros: ', 0.7223363344818172, 0.5002983328413535, 5536.8325)
((775, 331), (775, 331), 65868.44, 63516.0)
('Error: ', tensor(35081.2695, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8181067648799761, 0.6466178979678949)
('Val: AUC, AUPR, Erros: ', 0.6954329032250699, 0.512300956047922, 5971.045)
('Test: AUC, AUPR, Erros: ', 0.6865825452859439, 0.45312692743164834, 6043.6904)
