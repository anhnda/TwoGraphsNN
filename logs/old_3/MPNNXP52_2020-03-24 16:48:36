class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug, drugFeatures = None):


        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]


            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)
            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xProtein = self.nodesEmbedding(proteinNodes)
            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)




            iLevel = 0
            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv1(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            iLevel += 1

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv2(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv2g(xAtom, edge_index))

            iLevel += 1
            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv3(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv3g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xDrug = x1 + x2 + x3

            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)

            # xDrug = self.lin2(xDrug)
            # xDrug = self.act2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x = self.convD1(x, drugEdges)
            x = F.relu(x)
            x = self.convD2(x, drugEdges)
            x = F.relu(x)

        if config.SE_GRAPH:
            # Conv SE:
            x = self.convS1(x, seEdges)
            x = F.relu(x)
            # x = self.convS2(x, seEdges)
            # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Inner mode: ', True)
('Cross Prob: ', 0.5)
('Inner Level: ', 2)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7fb8a424d290>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((727, 2666), (41, 2666), (727, 331), (41, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 22309.0)
('VALIDATE SUM PROTEIN TEST: ', 1206.0)
((727, 331), (727, 331), 83024.65, 65913.0)
('Error: ', tensor(54954.4805, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4435442528549891, 0.24323880932917447)
('Val: AUC, AUPR, Erros: ', 0.41142928833677495, 0.21926706559535192, 3028.3093)
('Test: AUC, AUPR, Erros: ', 0.5004684653701011, 0.2967682279663345, 2766.0242)
((727, 331), (727, 331), 77844.67, 65913.0)
('Error: ', tensor(47453.6484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.589473736908449, 0.3521655523021499)
('Val: AUC, AUPR, Erros: ', 0.5541268375941913, 0.31457921778161174, 2605.7192)
('Test: AUC, AUPR, Erros: ', 0.6232656371903752, 0.3953361827187567, 2567.4575)
((727, 331), (727, 331), 82193.55, 65913.0)
('Error: ', tensor(44060.0508, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7101375736169616, 0.5287122864557388)
('Val: AUC, AUPR, Erros: ', 0.6898274269909865, 0.48148277607201917, 2428.1228)
('Test: AUC, AUPR, Erros: ', 0.6826328683462156, 0.47338144222381834, 2492.286)
((727, 331), (727, 331), 82025.39, 65913.0)
('Error: ', tensor(41515.4609, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7379059910083684, 0.5607206113708669)
('Val: AUC, AUPR, Erros: ', 0.7221989074989761, 0.5206457185407523, 2301.7808)
('Test: AUC, AUPR, Erros: ', 0.7001536957435601, 0.494233244031142, 2413.5835)
((727, 331), (727, 331), 79990.18, 65913.0)
('Error: ', tensor(39961.6016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7520963626081489, 0.5798728732731329)
('Val: AUC, AUPR, Erros: ', 0.7342579269541589, 0.5370668130381402, 2235.7302)
('Test: AUC, AUPR, Erros: ', 0.7120483749021108, 0.5084888824388286, 2366.2039)
((727, 331), (727, 331), 79296.51, 65913.0)
('Error: ', tensor(38978.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7638144449472752, 0.598701953217502)
('Val: AUC, AUPR, Erros: ', 0.7382144221832451, 0.5427742320151046, 2223.3062)
('Test: AUC, AUPR, Erros: ', 0.724446311344412, 0.5229028263416293, 2341.7217)
((727, 331), (727, 331), 79154.04, 65913.0)
('Error: ', tensor(38160.9883, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.775139205370059, 0.6158345807912942)
('Val: AUC, AUPR, Erros: ', 0.7436663713665511, 0.5485000758475279, 2214.4644)
('Test: AUC, AUPR, Erros: ', 0.7327102078122412, 0.5297769296410418, 2337.9219)
((727, 331), (727, 331), 79240.19, 65913.0)
('Error: ', tensor(37442.9492, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7864815726645846, 0.6322615865627426)
('Val: AUC, AUPR, Erros: ', 0.7470116128019682, 0.5498529334729961, 2221.593)
('Test: AUC, AUPR, Erros: ', 0.7390530131290316, 0.5318403911434659, 2350.296)
((727, 331), (727, 331), 78560.766, 65913.0)
('Error: ', tensor(36746.5156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7969993214511638, 0.6471089560370419)
('Val: AUC, AUPR, Erros: ', 0.7469446993984092, 0.5398012293083583, 2263.2856)
('Test: AUC, AUPR, Erros: ', 0.743272934195617, 0.5309545956398791, 2380.9587)
((727, 331), (727, 331), 77843.84, 65913.0)
('Error: ', tensor(36178.4062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.804672227200024, 0.6579441659130216)
('Val: AUC, AUPR, Erros: ', 0.7434444157926159, 0.5235202476938492, 2357.474)
('Test: AUC, AUPR, Erros: ', 0.7441480846389504, 0.5250249204273573, 2472.7378)
((727, 331), (727, 331), 77728.32, 65913.0)
('Error: ', tensor(35719.5508, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8113558109869681, 0.6676570050772077)
('Val: AUC, AUPR, Erros: ', 0.7360293580414403, 0.502461926696173, 2494.15)
('Test: AUC, AUPR, Erros: ', 0.7449219018730558, 0.5186523489396148, 2582.6045)
((727, 331), (727, 331), 76858.98, 65913.0)
('Error: ', tensor(35380.7969, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8145563950023478, 0.6725940847256869)
('Val: AUC, AUPR, Erros: ', 0.7278064606532185, 0.4913978456540893, 2539.625)
('Test: AUC, AUPR, Erros: ', 0.7449624830484499, 0.5150239842973364, 2601.5894)
((727, 331), (727, 331), 76307.26, 65913.0)
('Error: ', tensor(35145.0078, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8165616318400397, 0.6757027851871148)
('Val: AUC, AUPR, Erros: ', 0.7244050243775612, 0.48788146762251455, 2553.775)
('Test: AUC, AUPR, Erros: ', 0.7435580729437965, 0.5106253389303377, 2608.1106)
((727, 331), (727, 331), 75878.414, 65913.0)
('Error: ', tensor(34960.0977, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8181704409356452, 0.6782361954717266)
('Val: AUC, AUPR, Erros: ', 0.7228313766559036, 0.4852016933752948, 2552.153)
('Test: AUC, AUPR, Erros: ', 0.7425532205001054, 0.5084043077081275, 2608.878)
((727, 331), (727, 331), 75474.97, 65913.0)
('Error: ', tensor(34800.2812, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8195210167517352, 0.680368705485931)
('Val: AUC, AUPR, Erros: ', 0.7225987912240012, 0.4838261047334284, 2554.246)
('Test: AUC, AUPR, Erros: ', 0.7419278393737073, 0.5077245535171537, 2602.392)
((727, 331), (727, 331), 75114.305, 65913.0)
('Error: ', tensor(34654.0898, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.820716352554521, 0.6823604606302577)
('Val: AUC, AUPR, Erros: ', 0.7221538747488123, 0.4828319971092572, 2551.6816)
('Test: AUC, AUPR, Erros: ', 0.7414847566061956, 0.5069454800195288, 2595.2397)
((727, 331), (727, 331), 74939.2, 65913.0)
('Error: ', tensor(34535.7734, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8217557394531807, 0.6840559384907465)
('Val: AUC, AUPR, Erros: ', 0.7218379949917549, 0.48167477754326576, 2555.0)
('Test: AUC, AUPR, Erros: ', 0.7415521712210642, 0.5070685677656763, 2591.5112)
Train: 0.7751 0.6158
Test: 0.7327 0.5298
[0.5582657799783182, 0.5885830618641891, 0.5995776687890783, 0.5993869269781477, 0.6072434371049769, 0.6084061929431324, 0.618436791060593, 0.6250515835069385, 0.6291714069017823, 0.630014800292826, 0.6339928780257998, 0.6364277639022915, 0.6379961987155707, 0.6399571162356748, 0.6437338500991323, 0.6465638288614133, 0.6508270822649711, 0.6547551983913414, 0.657298854450405, 0.66168377253487, 0.6621643941201301, 0.6647040972512953, 0.665803489059728, 0.6680194463413417, 0.6690189631457699, 0.6696974898166466, 0.6707710399138147, 0.6714796392911172, 0.6729503022928628, 0.6741026075876351, 0.6793487284712199, 0.6806700840648724, 0.6841500225535342, 0.6852216323464098, 0.6876048228675474, 0.689422630838173, 0.6901879832956043, 0.6933779684693301, 0.6933779684693301, 0.6944741207551162, 0.6955284113062166, 0.6974858804429599, 0.6984925539804995, 0.7022771503500247, 0.7047605602855922, 0.7047605602855922, 0.7058946881215463, 0.7058946881215463, 0.708060807134407, 0.7096421511993825, 0.7096421511993825, 0.712517358632026, 0.712517358632026, 0.712517358632026, 0.712517358632026, 0.712517358632026, 0.712517358632026, 0.712517358632026, 0.7152098433354154, 0.7152098433354154, 0.7164304386137151, 0.7181109774436091, 0.7181109774436091, 0.7181109774436091, 0.7181109774436091, 0.7181109774436091, 0.7181109774436091, 0.7203091904082453, 0.7203091904082453, 0.7203091904082453, 0.7275048777308366, 0.7275048777308366, 0.7275048777308366, 0.7300585956416464, 0.7300585956416464, 0.7300585956416464, 0.7300585956416464, 0.7300585956416464, 0.7327102078122412, 0.7327102078122412, 0.7327102078122412, 0.7327102078122412, 0.7327102078122412, 0.7327102078122412, 0.7327102078122412, 0.7327102078122412, 0.7327102078122412, 0.7327102078122412, 0.7327102078122412, 0.7327102078122412]
[0.13428429997548127, 0.1509545807725548, 0.16001769705701702, 0.17025035462902469, 0.1825090389115075, 0.18246004366390012, 0.2024556640994219, 0.21911811341974988, 0.2341578660968175, 0.2333606194302662, 0.2401175582398215, 0.24863494840173322, 0.2528621105278069, 0.2555806015279374, 0.266918090440332, 0.2733736551547302, 0.2819075682370854, 0.2929934440063593, 0.298427273448438, 0.3118691013776844, 0.3136045970020004, 0.31850810707297583, 0.3203426742194727, 0.32519675683369065, 0.327953827913946, 0.3263997248419297, 0.32949131544379184, 0.3304363454805854, 0.33599349193557515, 0.33926133905612466, 0.3542370152179722, 0.3590434024077447, 0.3705737834744877, 0.37458171890066905, 0.3792806834210283, 0.3845057636818381, 0.38618701275073325, 0.39361752261869754, 0.39361752261869754, 0.39751378681194527, 0.40091687262809983, 0.40810994987503973, 0.4117844246568767, 0.42253215850712855, 0.42959797229853536, 0.42959797229853536, 0.4322899558103961, 0.4322899558103961, 0.43886439480226325, 0.445038864254403, 0.445038864254403, 0.4539660560802566, 0.4539660560802566, 0.4539660560802566, 0.4539660560802566, 0.4539660560802566, 0.4539660560802566, 0.4539660560802566, 0.4635561668266458, 0.4635561668266458, 0.46738612724657347, 0.4744156599890206, 0.4744156599890206, 0.4744156599890206, 0.4744156599890206, 0.4744156599890206, 0.4744156599890206, 0.4831965447891069, 0.4831965447891069, 0.4831965447891069, 0.5112933103902443, 0.5112933103902443, 0.5112933103902443, 0.5202839580494286, 0.5202839580494286, 0.5202839580494286, 0.5202839580494286, 0.5202839580494286, 0.5297769296410418, 0.5297769296410418, 0.5297769296410418, 0.5297769296410418, 0.5297769296410418, 0.5297769296410418, 0.5297769296410418, 0.5297769296410418, 0.5297769296410418, 0.5297769296410418, 0.5297769296410418, 0.5297769296410418]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((727, 2666), (40, 2666), (727, 331), (40, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 22068.0)
('VALIDATE SUM PROTEIN TEST: ', 1128.0)
((727, 331), (727, 331), 88617.2, 66109.0)
('Error: ', tensor(54898.8984, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4563017425070395, 0.24980277293663644)
('Val: AUC, AUPR, Erros: ', 0.4427149397878937, 0.2209700596562345, 2935.3892)
('Test: AUC, AUPR, Erros: ', 0.42731629853502223, 0.22338976661258678, 3022.3574)
((727, 331), (727, 331), 64278.473, 66109.0)
('Error: ', tensor(46629.1836, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6137390014341528, 0.3933543368666897)
('Val: AUC, AUPR, Erros: ', 0.604493894133148, 0.356030166397979, 2462.8823)
('Test: AUC, AUPR, Erros: ', 0.6041860025852879, 0.37032031400833815, 2491.9626)
((727, 331), (727, 331), 68608.195, 66109.0)
('Error: ', tensor(45287.6016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.663636810480242, 0.456957238917002)
('Val: AUC, AUPR, Erros: ', 0.656456918142461, 0.42154266504941207, 2408.9995)
('Test: AUC, AUPR, Erros: ', 0.6629448857979213, 0.43871856590887887, 2424.1416)
((727, 331), (727, 331), 64495.49, 66109.0)
('Error: ', tensor(44225.0859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6884105209702372, 0.49216201090175143)
('Val: AUC, AUPR, Erros: ', 0.6821054143770141, 0.4559949894519949, 2340.2441)
('Test: AUC, AUPR, Erros: ', 0.6890973671630707, 0.47300453182570307, 2361.6318)
((727, 331), (727, 331), 61637.047, 66109.0)
('Error: ', tensor(43214.8867, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7053937771641436, 0.5148951698870365)
('Val: AUC, AUPR, Erros: ', 0.700028240193641, 0.4780121630773318, 2279.1724)
('Test: AUC, AUPR, Erros: ', 0.7060665235139703, 0.4939578588146136, 2305.481)
((727, 331), (727, 331), 61144.695, 66109.0)
('Error: ', tensor(42150.6914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7180028658374165, 0.5310795398924663)
('Val: AUC, AUPR, Erros: ', 0.7126301560219507, 0.4929160832168026, 2225.4678)
('Test: AUC, AUPR, Erros: ', 0.7177279803674951, 0.5088430265651753, 2251.3176)
((727, 331), (727, 331), 61390.297, 66109.0)
('Error: ', tensor(41274.9180, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7269453161008809, 0.5432129407854329)
('Val: AUC, AUPR, Erros: ', 0.7207098673178935, 0.5032856514992431, 2186.0215)
('Test: AUC, AUPR, Erros: ', 0.7247496151000873, 0.5187269379684207, 2210.4143)
((727, 331), (727, 331), 61857.58, 66109.0)
('Error: ', tensor(40647.4297, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7340356284805345, 0.5529911589870748)
('Val: AUC, AUPR, Erros: ', 0.7257543282177454, 0.5098550130134307, 2163.0684)
('Test: AUC, AUPR, Erros: ', 0.7296251716929042, 0.5255590597979142, 2184.3574)
((727, 331), (727, 331), 61846.93, 66109.0)
('Error: ', tensor(40214.0977, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7401194202946176, 0.5614923777757419)
('Val: AUC, AUPR, Erros: ', 0.7291100085715159, 0.5143944505532885, 2149.7463)
('Test: AUC, AUPR, Erros: ', 0.7328865274341555, 0.5306171078861405, 2169.2158)
((727, 331), (727, 331), 61906.15, 66109.0)
('Error: ', tensor(39828.6406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7462524009471656, 0.5702564893585863)
('Val: AUC, AUPR, Erros: ', 0.730925056774373, 0.5166823891980885, 2143.1592)
('Test: AUC, AUPR, Erros: ', 0.7357870298050869, 0.535515500731246, 2157.8735)
((727, 331), (727, 331), 61972.977, 66109.0)
('Error: ', tensor(39471.2969, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.751986135172048, 0.5789307388186654)
('Val: AUC, AUPR, Erros: ', 0.7322080344550254, 0.5177941890609827, 2139.3506)
('Test: AUC, AUPR, Erros: ', 0.7378217088074746, 0.5392774324786564, 2150.004)
((727, 331), (727, 331), 62036.14, 66109.0)
('Error: ', tensor(39117.6641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7575572107565096, 0.5875968564580107)
('Val: AUC, AUPR, Erros: ', 0.7333955325499678, 0.5191109492487358, 2136.0156)
('Test: AUC, AUPR, Erros: ', 0.7392771270796711, 0.5425020753793417, 2143.4414)
((727, 331), (727, 331), 61547.0, 66109.0)
('Error: ', tensor(38805.7852, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7628416198197592, 0.5958717941377852)
('Val: AUC, AUPR, Erros: ', 0.7341722841367162, 0.5200363154300252, 2133.3774)
('Test: AUC, AUPR, Erros: ', 0.7403128507649847, 0.5450924224335437, 2138.8635)
((727, 331), (727, 331), 61078.926, 66109.0)
('Error: ', tensor(38492.0664, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7680125996864624, 0.6037364419121418)
('Val: AUC, AUPR, Erros: ', 0.7349449550242592, 0.5205890930142395, 2131.211)
('Test: AUC, AUPR, Erros: ', 0.7416126502820194, 0.5479351138308681, 2133.4277)
((727, 331), (727, 331), 60125.926, 66109.0)
('Error: ', tensor(38224.8203, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7729905919652935, 0.6111403020201683)
('Val: AUC, AUPR, Erros: ', 0.7358747547704544, 0.5210547900435201, 2128.9622)
('Test: AUC, AUPR, Erros: ', 0.7429877902110156, 0.5504605079683222, 2128.8352)
((727, 331), (727, 331), 59464.3, 66109.0)
('Error: ', tensor(37938.0430, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7777453571533746, 0.6181134170994056)
('Val: AUC, AUPR, Erros: ', 0.7364073225821681, 0.5201721091847799, 2128.667)
('Test: AUC, AUPR, Erros: ', 0.7436148779099458, 0.5521105856255399, 2125.334)
((727, 331), (727, 331), 58419.06, 66109.0)
('Error: ', tensor(37695.4375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7825705110172474, 0.6247954157208552)
('Val: AUC, AUPR, Erros: ', 0.7373240757918356, 0.5196608682876892, 2128.077)
('Test: AUC, AUPR, Erros: ', 0.7447112760557556, 0.553664051946095, 2121.9556)
Train: 0.7826 0.6248
Test: 0.7447 0.5537
[0.5921543618955696, 0.5991466662870909, 0.6178494457576557, 0.6106560750841106, 0.6126114001180868, 0.6074551748914073, 0.6096438652691749, 0.6189458369506216, 0.6278421443334137, 0.6261597670302061, 0.6356294293297213, 0.6384752037987084, 0.6423851546391753, 0.6417936465895147, 0.646685870262519, 0.6478208001759356, 0.6500319561140669, 0.6558933657085086, 0.6569153726634963, 0.6592898848652518, 0.6586603317996692, 0.6626596009150902, 0.6659346671175224, 0.6726368795693672, 0.6742494098734045, 0.677315056074415, 0.6805786020825938, 0.6815558406850198, 0.6843908656362914, 0.6845495400545292, 0.6886551673924134, 0.6905844738300545, 0.6949341947334818, 0.6969886321241249, 0.7012205608935143, 0.7022753860428775, 0.7030783235496914, 0.7068846361355824, 0.7068846361355824, 0.7090644910439743, 0.7090006988088083, 0.7103960605380258, 0.7113397658126074, 0.7154815572464462, 0.7193023121485318, 0.7193023121485318, 0.7203531033580702, 0.7203531033580702, 0.7228384837386711, 0.7239935078773818, 0.7239935078773818, 0.7259289103816364, 0.7259289103816364, 0.7259289103816364, 0.7259289103816364, 0.7259289103816364, 0.7259289103816364, 0.7259289103816364, 0.7289158230479068, 0.7289158230479068, 0.7304192850884975, 0.7321964005175565, 0.7321964005175565, 0.7321964005175565, 0.7321964005175565, 0.7321964005175565, 0.7321964005175565, 0.7340613360987527, 0.7340613360987527, 0.7340613360987527, 0.7402037016779266, 0.7402037016779266, 0.7402037016779266, 0.7418982352439412, 0.7418982352439412, 0.7418982352439412, 0.7418982352439412, 0.7418982352439412, 0.7447112760557556, 0.7447112760557556, 0.7447112760557556, 0.7447112760557556, 0.7447112760557556, 0.7447112760557556, 0.7447112760557556, 0.7447112760557556, 0.7447112760557556, 0.7447112760557556, 0.7447112760557556, 0.7447112760557556]
[0.1593093588251805, 0.1583539360426492, 0.17900128010446414, 0.17937645228546115, 0.18380012899079928, 0.18560310497876448, 0.1904910575069534, 0.21698818072323137, 0.23791657221575974, 0.23306871281502353, 0.25313758341763754, 0.25576003898079863, 0.2605299651588311, 0.25691910538015456, 0.26807200392215275, 0.2716502167429902, 0.27680310166043826, 0.29496880897477945, 0.29577783722161416, 0.3044955328588693, 0.3006449946881606, 0.3120506785566102, 0.3202975140958372, 0.33991243388267417, 0.3454847034837394, 0.34914998934368335, 0.3588008458602438, 0.36222011378809493, 0.37127725499676834, 0.37086475517692463, 0.3811047161122646, 0.3840536774727792, 0.39985973441811756, 0.40722052168853595, 0.4188305190451396, 0.42207782441638175, 0.4234117458046553, 0.43037977304140596, 0.43037977304140596, 0.4355729728160743, 0.4336490926277885, 0.4386049003569492, 0.44149592144019156, 0.45348871950141884, 0.46673753976670823, 0.46673753976670823, 0.4698477095767404, 0.4698477095767404, 0.47835395804157166, 0.4822074636641569, 0.4822074636641569, 0.4878603394372198, 0.4878603394372198, 0.4878603394372198, 0.4878603394372198, 0.4878603394372198, 0.4878603394372198, 0.4878603394372198, 0.4984680823309724, 0.4984680823309724, 0.5038221597947388, 0.5108723769182981, 0.5108723769182981, 0.5108723769182981, 0.5108723769182981, 0.5108723769182981, 0.5108723769182981, 0.5178238071243217, 0.5178238071243217, 0.5178238071243217, 0.5376685948268969, 0.5376685948268969, 0.5376685948268969, 0.5429385439388481, 0.5429385439388481, 0.5429385439388481, 0.5429385439388481, 0.5429385439388481, 0.553664051946095, 0.553664051946095, 0.553664051946095, 0.553664051946095, 0.553664051946095, 0.553664051946095, 0.553664051946095, 0.553664051946095, 0.553664051946095, 0.553664051946095, 0.553664051946095, 0.553664051946095]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_2
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((727, 2666), (41, 2666), (727, 331), (41, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 21797.0)
('VALIDATE SUM PROTEIN TEST: ', 1447.0)
((727, 331), (727, 331), 52969.71, 66635.0)
('Error: ', tensor(51237.3359, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.45117172155434765, 0.24994094798788974)
('Val: AUC, AUPR, Erros: ', 0.40539484484197763, 0.18224737781959108, 2525.376)
('Test: AUC, AUPR, Erros: ', 0.43018891911434026, 0.22327849041387954, 2648.5623)
((727, 331), (727, 331), 68216.0, 66635.0)
('Error: ', tensor(47381.0781, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5803655828914224, 0.34407524683533813)
('Val: AUC, AUPR, Erros: ', 0.5143957876968444, 0.22429260531451042, 2434.1008)
('Test: AUC, AUPR, Erros: ', 0.5552442864506921, 0.3009460930215212, 2513.1362)
((727, 331), (727, 331), 71080.58, 66635.0)
('Error: ', tensor(45637.3203, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6769777472468064, 0.4555973372956883)
('Val: AUC, AUPR, Erros: ', 0.6405111730237802, 0.3222553177675133, 2295.307)
('Test: AUC, AUPR, Erros: ', 0.6609645696436113, 0.39584790425740163, 2434.265)
((727, 331), (727, 331), 58756.367, 66635.0)
('Error: ', tensor(44770.2266, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7058905162685807, 0.49863980931715285)
('Val: AUC, AUPR, Erros: ', 0.6989602815147724, 0.42082902747867756, 2132.1665)
('Test: AUC, AUPR, Erros: ', 0.6944893272603169, 0.4469855659095254, 2343.0156)
((727, 331), (727, 331), 60293.098, 66635.0)
('Error: ', tensor(43180.6094, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7192869573933125, 0.5231277575582272)
('Val: AUC, AUPR, Erros: ', 0.7266337122525031, 0.4813757006888906, 2042.3542)
('Test: AUC, AUPR, Erros: ', 0.7109281534253974, 0.48095276402707315, 2262.725)
((727, 331), (727, 331), 60309.93, 66635.0)
('Error: ', tensor(42011.3438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7268630874196571, 0.5397883340968312)
('Val: AUC, AUPR, Erros: ', 0.7363382434662481, 0.5056943499026343, 1975.6022)
('Test: AUC, AUPR, Erros: ', 0.7179704603011153, 0.49997099322700356, 2202.8872)
((727, 331), (727, 331), 61159.223, 66635.0)
('Error: ', tensor(41183.6211, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7326850983145398, 0.5507441886541419)
('Val: AUC, AUPR, Erros: ', 0.7438394318393441, 0.52007798008577, 1932.5505)
('Test: AUC, AUPR, Erros: ', 0.7232064654188678, 0.5116184457470225, 2165.584)
((727, 331), (727, 331), 61597.06, 66635.0)
('Error: ', tensor(40684.0469, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7379158096181938, 0.5588569501562687)
('Val: AUC, AUPR, Erros: ', 0.7470011347419994, 0.5242863123562407, 1916.5764)
('Test: AUC, AUPR, Erros: ', 0.7263823902413311, 0.517430297287103, 2148.3384)
((727, 331), (727, 331), 61921.68, 66635.0)
('Error: ', tensor(40336.9375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7424241606256172, 0.5650765165358823)
('Val: AUC, AUPR, Erros: ', 0.751323493342645, 0.5299751139446538, 1903.0391)
('Test: AUC, AUPR, Erros: ', 0.7288432420023122, 0.5206593118753351, 2139.3926)
((727, 331), (727, 331), 62490.668, 66635.0)
('Error: ', tensor(40035.5391, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.746331293780794, 0.570496674904325)
('Val: AUC, AUPR, Erros: ', 0.7537250279896077, 0.5319002200632447, 1898.4823)
('Test: AUC, AUPR, Erros: ', 0.7299301852333215, 0.5216176251089879, 2136.2163)
((727, 331), (727, 331), 61710.32, 66635.0)
('Error: ', tensor(39840.3633, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7502113441241631, 0.5761527355591958)
('Val: AUC, AUPR, Erros: ', 0.7546442196450392, 0.5328382517137336, 1894.4117)
('Test: AUC, AUPR, Erros: ', 0.7309105183693188, 0.5225768591986548, 2132.735)
((727, 331), (727, 331), 61589.656, 66635.0)
('Error: ', tensor(39603.3906, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7538100563486441, 0.5815423845900907)
('Val: AUC, AUPR, Erros: ', 0.7559294464307752, 0.5337453043240862, 1890.1128)
('Test: AUC, AUPR, Erros: ', 0.7314614712667, 0.5221890162979224, 2131.7356)
((727, 331), (727, 331), 61327.45, 66635.0)
('Error: ', tensor(39371.8750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7576496872675019, 0.5873390380609987)
('Val: AUC, AUPR, Erros: ', 0.7571450570414122, 0.534827730556228, 1886.5876)
('Test: AUC, AUPR, Erros: ', 0.7328693124925736, 0.5232695095916753, 2128.5127)
((727, 331), (727, 331), 59709.844, 66635.0)
('Error: ', tensor(39236.3320, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7616769822397171, 0.5935484135988035)
('Val: AUC, AUPR, Erros: ', 0.7567732964068092, 0.5332842130508297, 1882.7787)
('Test: AUC, AUPR, Erros: ', 0.7322888147478985, 0.5214408106144695, 2130.9333)
((727, 331), (727, 331), 59939.145, 66635.0)
('Error: ', tensor(38946.7617, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7658210908822396, 0.5994981388942364)
('Val: AUC, AUPR, Erros: ', 0.7579101730594902, 0.5344632787089203, 1881.0728)
('Test: AUC, AUPR, Erros: ', 0.7330887926799452, 0.521370492384198, 2129.874)
((727, 331), (727, 331), 60259.99, 66635.0)
('Error: ', tensor(38664.0859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7695957493580557, 0.6050026883072851)
('Val: AUC, AUPR, Erros: ', 0.7586772582539019, 0.5341393231773387, 1881.2153)
('Test: AUC, AUPR, Erros: ', 0.732656955246109, 0.5200248732816783, 2132.0024)
((727, 331), (727, 331), 60829.418, 66635.0)
('Error: ', tensor(38356.3281, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7733360233186775, 0.6104397257727592)
('Val: AUC, AUPR, Erros: ', 0.7591832869286174, 0.534232772657804, 1882.6511)
('Test: AUC, AUPR, Erros: ', 0.7330335204136466, 0.519654453712439, 2131.9841)
Train: 0.7658 0.5995
Test: 0.7331 0.5214
[0.5758957092290425, 0.5514431291240441, 0.548254050308342, 0.5494823399948512, 0.5542504087967178, 0.5528526146283583, 0.562150501376745, 0.5789856638354492, 0.5840950054157584, 0.5878990548648602, 0.594103722001001, 0.5991529559925729, 0.6024745831909042, 0.6020229138210345, 0.6111750484679493, 0.6168382026890401, 0.6208698627056968, 0.6279611724217613, 0.6337553853641509, 0.6378931450531773, 0.6376916680723466, 0.640126350799977, 0.64669977531104, 0.6494728442770965, 0.6506344686337464, 0.6534730657354562, 0.6545651721700605, 0.6552774617927628, 0.656454312596688, 0.6573542267954993, 0.6626621383423209, 0.6671833452746035, 0.6714706948022292, 0.6736154376363022, 0.6759468224607937, 0.6779081068957905, 0.6797928201057171, 0.6833070602619199, 0.6833070602619199, 0.686860930749035, 0.6889905262354747, 0.689965993364106, 0.6917407396624407, 0.6962405310896376, 0.7005226180974986, 0.7005226180974986, 0.7011793829097712, 0.7011793829097712, 0.7049487742345868, 0.7063568295005198, 0.7063568295005198, 0.7094174365529626, 0.7094174365529626, 0.7094174365529626, 0.7094174365529626, 0.7094174365529626, 0.7094174365529626, 0.7094174365529626, 0.7130398758670808, 0.7130398758670808, 0.7145815759599474, 0.7168381333333333, 0.7168381333333333, 0.7168381333333333, 0.7168381333333333, 0.7168381333333333, 0.7168381333333333, 0.7199813591242886, 0.7199813591242886, 0.7199813591242886, 0.7270610857423654, 0.7270610857423654, 0.7270610857423654, 0.7300983242016873, 0.7300983242016873, 0.7300983242016873, 0.7300983242016873, 0.7300983242016873, 0.7330887926799452, 0.7330887926799452, 0.7330887926799452, 0.7330887926799452, 0.7330887926799452, 0.7330887926799452, 0.7330887926799452, 0.7330887926799452, 0.7330887926799452, 0.7330887926799452, 0.7330887926799452, 0.7330887926799452]
[0.1410726951116465, 0.12212459244026372, 0.12880782022482085, 0.1298336921014127, 0.13468733289248816, 0.13616580896734237, 0.14958873767962055, 0.16637829530755427, 0.17634687846061498, 0.1812541436618275, 0.19345889816522993, 0.20141888365262606, 0.20412688854441277, 0.2010163075519214, 0.21462490134065496, 0.22403155953006104, 0.2290607811473659, 0.25007944075027644, 0.25793196500292337, 0.26396132255097843, 0.2643097266713126, 0.2669259955488873, 0.2822398588612989, 0.2835192273904224, 0.2863026809774002, 0.2916123663531124, 0.29420117835473614, 0.2942137808640458, 0.2974569394999801, 0.2999495688241739, 0.31607445225517783, 0.32859539891073974, 0.33578496199221086, 0.3411396107122878, 0.3452853425777535, 0.3498484403022873, 0.35470881668746856, 0.3641003619499086, 0.3641003619499086, 0.3731592152709854, 0.37894741434024404, 0.38077538998178545, 0.38823634491981057, 0.4004783985867497, 0.4145496409610607, 0.4145496409610607, 0.41504930993689754, 0.41504930993689754, 0.42690828946292536, 0.4312214131992962, 0.4312214131992962, 0.43922753773130513, 0.43922753773130513, 0.43922753773130513, 0.43922753773130513, 0.43922753773130513, 0.43922753773130513, 0.43922753773130513, 0.4502525599190066, 0.4502525599190066, 0.45421015282562865, 0.4615801852015544, 0.4615801852015544, 0.4615801852015544, 0.4615801852015544, 0.4615801852015544, 0.4615801852015544, 0.47415602798556333, 0.47415602798556333, 0.47415602798556333, 0.4990442161640327, 0.4990442161640327, 0.4990442161640327, 0.5095918600259547, 0.5095918600259547, 0.5095918600259547, 0.5095918600259547, 0.5095918600259547, 0.521370492384198, 0.521370492384198, 0.521370492384198, 0.521370492384198, 0.521370492384198, 0.521370492384198, 0.521370492384198, 0.521370492384198, 0.521370492384198, 0.521370492384198, 0.521370492384198, 0.521370492384198]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_3
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((728, 2666), (40, 2666), (728, 331), (40, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 21953.0)
('VALIDATE SUM PROTEIN TEST: ', 1399.0)
((728, 331), (728, 331), 39664.83, 66099.0)
('Error: ', tensor(52386.4922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4518224776106086, 0.24867522674112613)
('Val: AUC, AUPR, Erros: ', 0.42218800580711047, 0.27373431164734796, 3078.0815)
('Test: AUC, AUPR, Erros: ', 0.4101497934234739, 0.18283565613852953, 2473.7615)
((728, 331), (728, 331), 66317.88, 66099.0)
('Error: ', tensor(47092.8906, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5865836886640643, 0.34248998672928765)
('Val: AUC, AUPR, Erros: ', 0.5496366892639519, 0.3501230003734753, 2726.4111)
('Test: AUC, AUPR, Erros: ', 0.5231758319910667, 0.2260562485925463, 2405.792)
((728, 331), (728, 331), 69853.78, 66099.0)
('Error: ', tensor(46256.8945, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.636666565783918, 0.39622935175501117)
('Val: AUC, AUPR, Erros: ', 0.6039909947260269, 0.39626005356904326, 2668.5283)
('Test: AUC, AUPR, Erros: ', 0.5767659730565711, 0.25626856517036956, 2363.1345)
((728, 331), (728, 331), 70927.42, 66099.0)
('Error: ', tensor(45436.4102, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6739557924856875, 0.4542969377304418)
('Val: AUC, AUPR, Erros: ', 0.6411181249207427, 0.4422833941235465, 2623.563)
('Test: AUC, AUPR, Erros: ', 0.6295598222366607, 0.3026677025743485, 2308.9497)
((728, 331), (728, 331), 70415.914, 66099.0)
('Error: ', tensor(44384.6445, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7014549319320151, 0.4960890319023011)
('Val: AUC, AUPR, Erros: ', 0.673065798567481, 0.48229127814413997, 2566.6094)
('Test: AUC, AUPR, Erros: ', 0.6775388036125218, 0.38409426288468135, 2231.5427)
((728, 331), (728, 331), 66067.164, 66099.0)
('Error: ', tensor(43341.8281, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7156368744728203, 0.5162740961547709)
('Val: AUC, AUPR, Erros: ', 0.6895242544476871, 0.5045186775644118, 2518.105)
('Test: AUC, AUPR, Erros: ', 0.7140608192190551, 0.4575882063094417, 2116.0776)
((728, 331), (728, 331), 62934.344, 66099.0)
('Error: ', tensor(42467.3125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7241398792517807, 0.5294299036701016)
('Val: AUC, AUPR, Erros: ', 0.6999708256270425, 0.5203447425982974, 2474.9226)
('Test: AUC, AUPR, Erros: ', 0.730967406027844, 0.4884941120627256, 2036.8346)
((728, 331), (728, 331), 62352.344, 66099.0)
('Error: ', tensor(41686.4844, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7303934293419158, 0.5396826985205125)
('Val: AUC, AUPR, Erros: ', 0.7041376488341985, 0.5275679831418127, 2440.0059)
('Test: AUC, AUPR, Erros: ', 0.737351972133408, 0.5005432929934392, 1991.5603)
((728, 331), (728, 331), 62111.523, 66099.0)
('Error: ', tensor(41114.5195, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7348240950746784, 0.5478290191430849)
('Val: AUC, AUPR, Erros: ', 0.7081451312676013, 0.5351780806708966, 2413.5012)
('Test: AUC, AUPR, Erros: ', 0.7435172646624952, 0.5136437672833155, 1954.6559)
((728, 331), (728, 331), 62049.59, 66099.0)
('Error: ', tensor(40642.1562, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7391283915104927, 0.5553475118397909)
('Val: AUC, AUPR, Erros: ', 0.711092343390743, 0.540815403565019, 2394.3633)
('Test: AUC, AUPR, Erros: ', 0.7466729111068462, 0.5210741701922881, 1931.5259)
((728, 331), (728, 331), 61965.457, 66099.0)
('Error: ', tensor(40308.4805, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7426766921872319, 0.5611214131439667)
('Val: AUC, AUPR, Erros: ', 0.7130012513690637, 0.544133266266293, 2382.6694)
('Test: AUC, AUPR, Erros: ', 0.7485313005873541, 0.5253681235537858, 1918.0679)
((728, 331), (728, 331), 61719.35, 66099.0)
('Error: ', tensor(39998.7617, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7465855830470269, 0.5677307413818476)
('Val: AUC, AUPR, Erros: ', 0.714698623108417, 0.5469869717005519, 2374.0845)
('Test: AUC, AUPR, Erros: ', 0.7519169766133669, 0.532113059749428, 1902.6575)
((728, 331), (728, 331), 61728.652, 66099.0)
('Error: ', tensor(39712.3477, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.750378756228293, 0.5735985729649201)
('Val: AUC, AUPR, Erros: ', 0.7163588107432646, 0.549851783239327, 2365.5454)
('Test: AUC, AUPR, Erros: ', 0.7522706506115583, 0.5324117368783318, 1899.3344)
((728, 331), (728, 331), 61257.14, 66099.0)
('Error: ', tensor(39488.5195, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7538570955446269, 0.5794547813680231)
('Val: AUC, AUPR, Erros: ', 0.7190071039818502, 0.5529265376197566, 2359.7974)
('Test: AUC, AUPR, Erros: ', 0.7539135559389547, 0.534659552510454, 1892.5693)
