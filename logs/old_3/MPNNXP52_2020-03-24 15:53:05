class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug, drugFeatures = None):


        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]
            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xProtein = self.nodesEmbedding(proteinNodes)

            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)




            iLevel = 0
            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv1(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            iLevel += 1

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv2(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv2g(xAtom, edge_index))

            iLevel += 1
            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv3(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv3g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xDrug = x1 + x2 + x3

            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)
            xDrug = self.lin2(xDrug)
            xDrug = self.act2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x = self.convD1(x, drugEdges)
            x = F.relu(x)
            x = self.convD2(x, drugEdges)
            x = F.relu(x)

        if config.SE_GRAPH:
            # Conv SE:
            x = self.convS1(x, seEdges)
            x = F.relu(x)
            # x = self.convS2(x, seEdges)
            # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Inner mode: ', True)
('Cross Prob: ', 0.5)
('Inner Level: ', 1)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7f63bce199d0>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19906.0)
('VALIDATE SUM PROTEIN TEST: ', 2291.0)
((646, 331), (646, 331), 86064.375, 58595.0)
('Error: ', tensor(50360.4375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4457974454713116, 0.24286425067641107)
('Val: AUC, AUPR, Erros: ', 0.45643506245828824, 0.28177636182415566, 6258.5967)
('Test: AUC, AUPR, Erros: ', 0.43478307756790857, 0.21917986914980891, 6015.509)
((646, 331), (646, 331), 56977.117, 58595.0)
('Error: ', tensor(41448.6875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6097395809328617, 0.37555597351364733)
('Val: AUC, AUPR, Erros: ', 0.5926461880917091, 0.3744457602040776, 5285.4546)
('Test: AUC, AUPR, Erros: ', 0.5918385970143818, 0.32545240848567936, 4993.7515)
((646, 331), (646, 331), 52616.367, 58595.0)
('Error: ', tensor(39097.6016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7131551365851742, 0.535264116269195)
('Val: AUC, AUPR, Erros: ', 0.6760116670587737, 0.4950548207472919, 5056.3887)
('Test: AUC, AUPR, Erros: ', 0.6801910002616491, 0.4644325186893996, 4733.5244)
((646, 331), (646, 331), 50594.562, 58595.0)
('Error: ', tensor(37197.8203, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7385648296391562, 0.5676626329754264)
('Val: AUC, AUPR, Erros: ', 0.6967635599131388, 0.5199771291394654, 4877.897)
('Test: AUC, AUPR, Erros: ', 0.7059677986151123, 0.5031138145718133, 4530.349)
((646, 331), (646, 331), 51566.754, 58595.0)
('Error: ', tensor(35510.3047, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7531579114163884, 0.5873363704072182)
('Val: AUC, AUPR, Erros: ', 0.7054827605785647, 0.5283321788982001, 4747.8677)
('Test: AUC, AUPR, Erros: ', 0.7162993627411718, 0.5181798656157173, 4395.0293)
((646, 331), (646, 331), 50749.695, 58595.0)
('Error: ', tensor(34511.9141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.769277028711369, 0.6083114468202901)
('Val: AUC, AUPR, Erros: ', 0.7105490704025642, 0.5305158870266247, 4714.6406)
('Test: AUC, AUPR, Erros: ', 0.7186163221075749, 0.5174842367057633, 4368.403)
((646, 331), (646, 331), 49673.117, 58595.0)
('Error: ', tensor(33587.5273, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7870483225440751, 0.6321041197220916)
('Val: AUC, AUPR, Erros: ', 0.7095384981580182, 0.5234918284380995, 4743.7295)
('Test: AUC, AUPR, Erros: ', 0.718091959936051, 0.5148836114179124, 4370.246)
((646, 331), (646, 331), 50272.004, 58595.0)
('Error: ', tensor(32549.0840, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8031709324552248, 0.6537742978341525)
('Val: AUC, AUPR, Erros: ', 0.7009278533310881, 0.5086548317912463, 4803.954)
('Test: AUC, AUPR, Erros: ', 0.7127960648650026, 0.506196659298949, 4402.907)
((646, 331), (646, 331), 51633.09, 58595.0)
('Error: ', tensor(31758.7930, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8128018388571359, 0.6680033172830032)
('Val: AUC, AUPR, Erros: ', 0.6963607580728561, 0.5015149801876588, 4831.505)
('Test: AUC, AUPR, Erros: ', 0.7062352800306155, 0.497729862920967, 4448.5874)
((646, 331), (646, 331), 52819.87, 58595.0)
('Error: ', tensor(31240.3574, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.81841719469339, 0.6768437131151259)
('Val: AUC, AUPR, Erros: ', 0.6929904467270305, 0.5011690582619447, 4835.6123)
('Test: AUC, AUPR, Erros: ', 0.6975033297441725, 0.49056962746867555, 4497.124)
((646, 331), (646, 331), 53977.355, 58595.0)
('Error: ', tensor(30902.3848, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8211766794722353, 0.680970482083337)
('Val: AUC, AUPR, Erros: ', 0.6907170805248642, 0.49931740814474157, 4846.3906)
('Test: AUC, AUPR, Erros: ', 0.6924759064616587, 0.4865920121716188, 4537.101)
((646, 331), (646, 331), 54350.57, 58595.0)
('Error: ', tensor(30706.4492, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8230542444766419, 0.6841633928129547)
('Val: AUC, AUPR, Erros: ', 0.688814044732797, 0.49653052897338257, 4862.7427)
('Test: AUC, AUPR, Erros: ', 0.6924724144797115, 0.48631815031919773, 4548.4297)
((646, 331), (646, 331), 54674.56, 58595.0)
('Error: ', tensor(30488.9531, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.825033642088185, 0.6875091961099292)
('Val: AUC, AUPR, Erros: ', 0.6873067100300594, 0.4940606795437473, 4879.731)
('Test: AUC, AUPR, Erros: ', 0.6894753916290766, 0.4828250263563128, 4579.2007)
((646, 331), (646, 331), 54059.625, 58595.0)
('Error: ', tensor(30443.0664, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8258108277938492, 0.6887856680472789)
('Val: AUC, AUPR, Erros: ', 0.6844614294530031, 0.49171281115257875, 4894.5786)
('Test: AUC, AUPR, Erros: ', 0.6919444759611303, 0.48609255931250467, 4563.9814)
((646, 331), (646, 331), 54847.094, 58595.0)
('Error: ', tensor(30148.7168, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8279476439091729, 0.6923596749757887)
('Val: AUC, AUPR, Erros: ', 0.682403520618633, 0.4868187792983045, 4924.9395)
('Test: AUC, AUPR, Erros: ', 0.6874641787576664, 0.4797571638661222, 4618.4673)
((646, 331), (646, 331), 53708.016, 58595.0)
('Error: ', tensor(30199.1289, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8281879791195403, 0.6928306762821371)
('Val: AUC, AUPR, Erros: ', 0.6820913466021594, 0.4867903763778506, 4922.8057)
('Test: AUC, AUPR, Erros: ', 0.6906565251783562, 0.4818111591200377, 4599.35)
((646, 331), (646, 331), 55038.23, 58595.0)
('Error: ', tensor(29826.8789, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8303095547279445, 0.6963399255341819)
('Val: AUC, AUPR, Erros: ', 0.6792872372566732, 0.48120817751963807, 4963.9067)
('Test: AUC, AUPR, Erros: ', 0.6874000612740125, 0.47545473446772696, 4665.1978)
Train: 0.7693 0.6083
Test: 0.7186 0.5175
[0.5159399442596422, 0.521989049090418, 0.5218398065218874, 0.5269069324954369, 0.5365833617281754, 0.541945063875622, 0.5484548420559232, 0.556580189761702, 0.562776705531269, 0.5663158761993892, 0.5680262798635278, 0.5726176428591387, 0.5788132533751029, 0.5815680914919845, 0.5897550785972312, 0.5978113827629802, 0.6014191820296703, 0.6063058797220464, 0.6119143047996336, 0.6145479917236396, 0.6154962253757478, 0.6193952787243391, 0.6232354589673873, 0.6255252520763772, 0.6272222370441203, 0.6332990484781328, 0.6367584415788097, 0.6368688284854239, 0.6395646504225593, 0.6410437138543795, 0.6476579445315653, 0.6497847253860259, 0.6530847579641029, 0.656002328896212, 0.6614828442995638, 0.6632913655618154, 0.6642282607041028, 0.6680982604467105, 0.6680982604467105, 0.6705440349142044, 0.671355691573241, 0.6741434536153647, 0.6752439074198184, 0.6807935234995057, 0.6846255856847483, 0.6846255856847483, 0.686234383884444, 0.686234383884444, 0.6895882823130698, 0.6909835054258994, 0.6909835054258994, 0.694482739575164, 0.694482739575164, 0.694482739575164, 0.694482739575164, 0.694482739575164, 0.694482739575164, 0.694482739575164, 0.6984937282332955, 0.6984937282332955, 0.7005679454559813, 0.7023338823602047, 0.7023338823602047, 0.7023338823602047, 0.7023338823602047, 0.7023338823602047, 0.7023338823602047, 0.7052787732203726, 0.7052787732203726, 0.7052787732203726, 0.7133120472344384, 0.7133120472344384, 0.7133120472344384, 0.7156564110522083, 0.7156564110522083, 0.7156564110522083, 0.7156564110522083, 0.7156564110522083, 0.7186163221075749, 0.7186163221075749, 0.7186163221075749, 0.7186163221075749, 0.7186163221075749, 0.7186163221075749, 0.7186163221075749, 0.7186163221075749, 0.7186163221075749, 0.7186163221075749, 0.7186163221075749, 0.7186163221075749]
[0.11299729477703496, 0.1214238706931744, 0.12385767699195808, 0.12982975945545208, 0.13642422648767527, 0.14246277693230108, 0.15125273533098346, 0.16449376793983567, 0.1732190069931822, 0.17782520163239296, 0.1823166143160449, 0.18918851295598582, 0.19852279417720267, 0.20167522811402885, 0.216238373572685, 0.2313754820797615, 0.23565016260838623, 0.24267981318892143, 0.252596467750254, 0.2564277373613369, 0.25822793624496143, 0.26420010913703457, 0.2706187855400993, 0.27198386190200485, 0.2758405653085002, 0.28877089611154605, 0.2956315661358211, 0.29259642831262933, 0.2984508094823834, 0.30352646275237594, 0.3196581680480297, 0.3227615284084753, 0.3283487564483992, 0.33557515899254453, 0.35063184235109446, 0.35406364641134463, 0.3561642036895055, 0.3645744492100023, 0.3645744492100023, 0.371288411706557, 0.3724900166725006, 0.3802776756840297, 0.3841944511647597, 0.39803462410808527, 0.40850007553482764, 0.40850007553482764, 0.41212803967508504, 0.41212803967508504, 0.4226144395847745, 0.42563732014382166, 0.42563732014382166, 0.43621157953500966, 0.43621157953500966, 0.43621157953500966, 0.43621157953500966, 0.43621157953500966, 0.43621157953500966, 0.43621157953500966, 0.4484616598316886, 0.4484616598316886, 0.45490941466500656, 0.4607815432985221, 0.4607815432985221, 0.4607815432985221, 0.4607815432985221, 0.4607815432985221, 0.4607815432985221, 0.47163633506777375, 0.47163633506777375, 0.47163633506777375, 0.5002888028049943, 0.5002888028049943, 0.5002888028049943, 0.5072245324917408, 0.5072245324917408, 0.5072245324917408, 0.5072245324917408, 0.5072245324917408, 0.5174842367057633, 0.5174842367057633, 0.5174842367057633, 0.5174842367057633, 0.5174842367057633, 0.5174842367057633, 0.5174842367057633, 0.5174842367057633, 0.5174842367057633, 0.5174842367057633, 0.5174842367057633, 0.5174842367057633]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19911.0)
('VALIDATE SUM PROTEIN TEST: ', 2446.0)
((646, 331), (646, 331), 80791.69, 58221.0)
('Error: ', tensor(49090.3750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4474549718586705, 0.24312302308400677)
('Val: AUC, AUPR, Erros: ', 0.48381400807745734, 0.25088354556489284, 6105.5684)
('Test: AUC, AUPR, Erros: ', 0.4567701446853988, 0.2691701157685646, 6162.2734)
((646, 331), (646, 331), 36424.11, 58221.0)
('Error: ', tensor(43591.8047, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6222456075633548, 0.38271356157701814)
('Val: AUC, AUPR, Erros: ', 0.6251136429289421, 0.36418453489943814, 5397.6006)
('Test: AUC, AUPR, Erros: ', 0.6021844203169339, 0.3653373519418892, 5612.2856)
((646, 331), (646, 331), 67014.3, 58221.0)
('Error: ', tensor(37895.4219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7244586565866871, 0.5418120754350121)
('Val: AUC, AUPR, Erros: ', 0.7116173080498287, 0.5173145914245002, 4766.6064)
('Test: AUC, AUPR, Erros: ', 0.6949776312530297, 0.5097220618011644, 4920.2974)
((646, 331), (646, 331), 73218.55, 58221.0)
('Error: ', tensor(36574.5703, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7367708354804284, 0.5567456550932491)
('Val: AUC, AUPR, Erros: ', 0.7219542008294721, 0.5315324596460851, 4651.559)
('Test: AUC, AUPR, Erros: ', 0.7032126926337721, 0.5208078426871243, 4820.4844)
((646, 331), (646, 331), 67522.31, 58221.0)
('Error: ', tensor(35517.1172, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7421023650940852, 0.5644389543965181)
('Val: AUC, AUPR, Erros: ', 0.7255322096449034, 0.5364054251725924, 4526.251)
('Test: AUC, AUPR, Erros: ', 0.7039244393066075, 0.522640301669575, 4748.0605)
((646, 331), (646, 331), 67192.14, 58221.0)
('Error: ', tensor(35171.6133, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7474503101114139, 0.5717126936806849)
('Val: AUC, AUPR, Erros: ', 0.7297268775229298, 0.5416447341810269, 4500.9585)
('Test: AUC, AUPR, Erros: ', 0.7076259509514937, 0.5262687758429275, 4727.64)
((646, 331), (646, 331), 66668.44, 58221.0)
('Error: ', tensor(34777.8867, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7535116686385543, 0.5809077666868023)
('Val: AUC, AUPR, Erros: ', 0.7308943344857466, 0.5409601984378298, 4492.3706)
('Test: AUC, AUPR, Erros: ', 0.7072495593459076, 0.5278607323164479, 4730.239)
((646, 331), (646, 331), 66183.266, 58221.0)
('Error: ', tensor(34385.9219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.759423871122174, 0.5904764033601144)
('Val: AUC, AUPR, Erros: ', 0.731796443891279, 0.5432813591800298, 4480.4604)
('Test: AUC, AUPR, Erros: ', 0.7116877635411252, 0.5320469226121703, 4701.25)
((646, 331), (646, 331), 65778.195, 58221.0)
('Error: ', tensor(33944.2734, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7662312225171237, 0.6011607113592484)
('Val: AUC, AUPR, Erros: ', 0.7368075407140056, 0.5485773791731446, 4452.396)
('Test: AUC, AUPR, Erros: ', 0.7115441701936723, 0.5310680828913308, 4708.093)
((646, 331), (646, 331), 66988.555, 58221.0)
('Error: ', tensor(33382.0625, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7771789862052554, 0.6169970476291659)
('Val: AUC, AUPR, Erros: ', 0.7369049823498037, 0.5415826903980359, 4493.8354)
('Test: AUC, AUPR, Erros: ', 0.7089826778976417, 0.5280312917484917, 4740.9263)
((646, 331), (646, 331), 67710.88, 58221.0)
('Error: ', tensor(32825.9570, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7877510555393485, 0.631935006109108)
('Val: AUC, AUPR, Erros: ', 0.7395219731207647, 0.5406963470435969, 4507.39)
('Test: AUC, AUPR, Erros: ', 0.7080786825371674, 0.5237695423696149, 4771.5864)
((646, 331), (646, 331), 67807.64, 58221.0)
('Error: ', tensor(32289.3867, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7978531971172618, 0.6452957114082957)
('Val: AUC, AUPR, Erros: ', 0.7377241008792582, 0.5322674740403082, 4557.8164)
('Test: AUC, AUPR, Erros: ', 0.7033171075187696, 0.5171085939099749, 4820.756)
((646, 331), (646, 331), 67549.734, 58221.0)
('Error: ', tensor(31860.4141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8052473870791002, 0.6556573726393692)
('Val: AUC, AUPR, Erros: ', 0.7350693106345514, 0.5265345860082906, 4581.984)
('Test: AUC, AUPR, Erros: ', 0.6986632594574336, 0.5108897901849783, 4853.699)
((646, 331), (646, 331), 67187.05, 58221.0)
('Error: ', tensor(31482.6680, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8112408500329931, 0.6641972378015052)
('Val: AUC, AUPR, Erros: ', 0.7334873883067543, 0.5218964818501209, 4603.731)
('Test: AUC, AUPR, Erros: ', 0.6954663846443636, 0.5031019682391029, 4906.734)
((646, 331), (646, 331), 67170.99, 58221.0)
('Error: ', tensor(31197.5625, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.815627916970748, 0.670389797716051)
('Val: AUC, AUPR, Erros: ', 0.7305589301556159, 0.5179858968886828, 4627.191)
('Test: AUC, AUPR, Erros: ', 0.6906179704810453, 0.4989845780742993, 4943.044)
((646, 331), (646, 331), 67141.7, 58221.0)
('Error: ', tensor(30971.1211, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8189975576525184, 0.6751789218065318)
('Val: AUC, AUPR, Erros: ', 0.72485859800501, 0.5129511525287986, 4665.4395)
('Test: AUC, AUPR, Erros: ', 0.6896758949260161, 0.49861440332751417, 4953.2856)
((646, 331), (646, 331), 66615.75, 58221.0)
('Error: ', tensor(30724.3379, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8218507918000564, 0.6794972382019004)
('Val: AUC, AUPR, Erros: ', 0.7199092057136731, 0.5078505295615894, 4697.2017)
('Test: AUC, AUPR, Erros: ', 0.6879221752169702, 0.497203268171599, 4961.889)
Train: 0.7662 0.6012
Test: 0.7115 0.5311
[0.569693755998103, 0.5554483652946517, 0.5612830768305462, 0.5639461978700315, 0.5693060398182558, 0.5688332960623967, 0.5685458944682799, 0.577585941781249, 0.5841880687149478, 0.5845095930006525, 0.5856125472301758, 0.5879594733075797, 0.5899334023985123, 0.5918715210767787, 0.5980588539246724, 0.6005771947080548, 0.6055137266063112, 0.6102848669733075, 0.6137680753714451, 0.6158104092919913, 0.6163845380736716, 0.6192274662656869, 0.6202876145670181, 0.6220105277790132, 0.6235212219340635, 0.6297449372923791, 0.6319127962656882, 0.6323930730418239, 0.6345039719176857, 0.6357143462573523, 0.6428040993154251, 0.6456714150970798, 0.6500394062472901, 0.6534721542407443, 0.6578599916634718, 0.6592409989401242, 0.6599943265340142, 0.6640059247343201, 0.6640059247343201, 0.6664108412742782, 0.667343291609514, 0.6701757221807224, 0.6720113233951336, 0.6779997461720468, 0.6813806925689692, 0.6813806925689692, 0.6820623117877187, 0.6820623117877187, 0.6847670726665167, 0.686752296223192, 0.686752296223192, 0.6899421820846248, 0.6899421820846248, 0.6899421820846248, 0.6899421820846248, 0.6899421820846248, 0.6899421820846248, 0.6899421820846248, 0.6932024975769838, 0.6932024975769838, 0.6949152727129058, 0.6970366868918272, 0.6970366868918272, 0.6970366868918272, 0.6970366868918272, 0.6970366868918272, 0.6970366868918272, 0.6989770326362927, 0.6989770326362927, 0.6989770326362927, 0.7062018293702141, 0.7062018293702141, 0.7062018293702141, 0.7087121040358848, 0.7087121040358848, 0.7087121040358848, 0.7087121040358848, 0.7087121040358848, 0.7115441701936723, 0.7115441701936723, 0.7115441701936723, 0.7115441701936723, 0.7115441701936723, 0.7115441701936723, 0.7115441701936723, 0.7115441701936723, 0.7115441701936723, 0.7115441701936723, 0.7115441701936723, 0.7115441701936723]
[0.15606108220773002, 0.16141972100148225, 0.1753808856813527, 0.17995351028122203, 0.19235768007492737, 0.1949903030548587, 0.19615384187900586, 0.21012518267740402, 0.22091285603775562, 0.2222740590218164, 0.22388246716990445, 0.22816186587521742, 0.23414060993943728, 0.23743451434207336, 0.247858305655217, 0.2539226422443404, 0.2638901398959479, 0.27283279664040044, 0.2794592779329859, 0.2818606510042866, 0.28313892418537423, 0.28829915147974683, 0.2893985091939056, 0.2922626318614703, 0.2952143882833106, 0.3114857909712122, 0.31667146507613725, 0.3179682178135752, 0.32310288234984386, 0.3272555430090599, 0.3453984376593021, 0.3513190797719805, 0.3611074117000713, 0.36982873672797234, 0.37990331600438243, 0.38256761396948474, 0.3833234021158898, 0.39216621667795915, 0.39216621667795915, 0.3969658304582148, 0.39873643954068205, 0.40666152898431984, 0.4132701384308291, 0.4301246575359247, 0.4385868891838715, 0.4385868891838715, 0.43954675150363964, 0.43954675150363964, 0.44597111645302634, 0.4513321580421637, 0.4513321580421637, 0.45991410932423327, 0.45991410932423327, 0.45991410932423327, 0.45991410932423327, 0.45991410932423327, 0.45991410932423327, 0.45991410932423327, 0.4690567241198984, 0.4690567241198984, 0.4739250860340596, 0.48085537587191407, 0.48085537587191407, 0.48085537587191407, 0.48085537587191407, 0.48085537587191407, 0.48085537587191407, 0.4867734274089773, 0.4867734274089773, 0.4867734274089773, 0.5119760437645909, 0.5119760437645909, 0.5119760437645909, 0.5208115576151088, 0.5208115576151088, 0.5208115576151088, 0.5208115576151088, 0.5208115576151088, 0.5310680828913308, 0.5310680828913308, 0.5310680828913308, 0.5310680828913308, 0.5310680828913308, 0.5310680828913308, 0.5310680828913308, 0.5310680828913308, 0.5310680828913308, 0.5310680828913308, 0.5310680828913308, 0.5310680828913308]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_2
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19946.0)
('VALIDATE SUM PROTEIN TEST: ', 2286.0)
((646, 331), (646, 331), 48414.14, 58507.0)
('Error: ', tensor(45186.2695, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.437742428580666, 0.24049859533858503)
('Val: AUC, AUPR, Erros: ', 0.4688376582746836, 0.26030115947770227, 5492.779)
('Test: AUC, AUPR, Erros: ', 0.4786516070520501, 0.24907035255527588, 5527.1504)
((646, 331), (646, 331), 61678.133, 58507.0)
('Error: ', tensor(40780.5820, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6594042221755922, 0.4198814990689569)
('Val: AUC, AUPR, Erros: ', 0.6505164770895318, 0.3985482285638909, 5081.32)
('Test: AUC, AUPR, Erros: ', 0.6428147002681392, 0.38873982861049233, 5088.0957)
((646, 331), (646, 331), 66651.91, 58507.0)
('Error: ', tensor(39404.2891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6969746069016288, 0.47879567505713827)
('Val: AUC, AUPR, Erros: ', 0.6847439556963006, 0.45583971841663085, 4943.007)
('Test: AUC, AUPR, Erros: ', 0.6829597399708042, 0.4568178423899567, 4940.0283)
((646, 331), (646, 331), 67241.73, 58507.0)
('Error: ', tensor(37843.1875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7133962301436654, 0.5131785150576142)
('Val: AUC, AUPR, Erros: ', 0.6998629361836968, 0.4893764745778902, 4773.0483)
('Test: AUC, AUPR, Erros: ', 0.7018904301016682, 0.493351170491084, 4755.376)
((646, 331), (646, 331), 67923.516, 58507.0)
('Error: ', tensor(36812.6758, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7235272800031983, 0.5343081529004833)
('Val: AUC, AUPR, Erros: ', 0.7090549854435065, 0.5102504268490674, 4665.4844)
('Test: AUC, AUPR, Erros: ', 0.7125248958453875, 0.5141843176558762, 4640.641)
((646, 331), (646, 331), 66733.75, 58507.0)
('Error: ', tensor(36165.8789, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7306856788664069, 0.5467847505276933)
('Val: AUC, AUPR, Erros: ', 0.7146239115253016, 0.5214353449215247, 4599.221)
('Test: AUC, AUPR, Erros: ', 0.7193858351994822, 0.5248898398369444, 4568.507)
((646, 331), (646, 331), 64558.332, 58507.0)
('Error: ', tensor(35730.9688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7357748383423721, 0.5547114011572123)
('Val: AUC, AUPR, Erros: ', 0.7183775342663432, 0.5276616337064768, 4551.5195)
('Test: AUC, AUPR, Erros: ', 0.7231866543187204, 0.5304077309047144, 4521.896)
((646, 331), (646, 331), 64061.1, 58507.0)
('Error: ', tensor(35492.2969, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7397956183466998, 0.5602959164853986)
('Val: AUC, AUPR, Erros: ', 0.7204079520649296, 0.5305478056871293, 4536.893)
('Test: AUC, AUPR, Erros: ', 0.725768815144294, 0.5333498200147708, 4504.163)
((646, 331), (646, 331), 64857.004, 58507.0)
('Error: ', tensor(35342.9141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7433747789326632, 0.5652723124382038)
('Val: AUC, AUPR, Erros: ', 0.7223977855679811, 0.5329545659594342, 4535.5776)
('Test: AUC, AUPR, Erros: ', 0.7277934594231454, 0.5357315410214205, 4502.021)
((646, 331), (646, 331), 64230.793, 58507.0)
('Error: ', tensor(35124.2578, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7466386959741647, 0.5702164770595691)
('Val: AUC, AUPR, Erros: ', 0.7238537038261288, 0.5348134488643771, 4521.8745)
('Test: AUC, AUPR, Erros: ', 0.7293272562561514, 0.5375799697713629, 4487.535)
((646, 331), (646, 331), 64541.633, 58507.0)
('Error: ', tensor(34948.7266, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7499978891025696, 0.5752024983747869)
('Val: AUC, AUPR, Erros: ', 0.7256629071385037, 0.5368508402944685, 4515.2227)
('Test: AUC, AUPR, Erros: ', 0.7309961276499745, 0.5394927214508252, 4482.317)
((646, 331), (646, 331), 64516.758, 58507.0)
('Error: ', tensor(34739.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7536088717513484, 0.5806479762161272)
('Val: AUC, AUPR, Erros: ', 0.7274618281524632, 0.5387004375189149, 4506.1255)
('Test: AUC, AUPR, Erros: ', 0.7320717383054871, 0.5404016525849431, 4478.093)
((646, 331), (646, 331), 65174.492, 58507.0)
('Error: ', tensor(34560.9648, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7572495314792878, 0.5861870469282696)
('Val: AUC, AUPR, Erros: ', 0.7291132586890836, 0.5406744455890052, 4505.9185)
('Test: AUC, AUPR, Erros: ', 0.7335923069172974, 0.5419448382961092, 4478.1284)
((646, 331), (646, 331), 65105.24, 58507.0)
('Error: ', tensor(34326.2969, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7611938509375893, 0.5920995576496221)
('Val: AUC, AUPR, Erros: ', 0.730909104920757, 0.5425154138923289, 4497.1714)
('Test: AUC, AUPR, Erros: ', 0.7345278465501961, 0.5426208415868414, 4474.247)
((646, 331), (646, 331), 65351.848, 58507.0)
('Error: ', tensor(34097.3438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7653110749290635, 0.598160684568104)
('Val: AUC, AUPR, Erros: ', 0.7324309169309317, 0.5437564973656288, 4494.449)
('Test: AUC, AUPR, Erros: ', 0.7350910505587505, 0.5428778612501187, 4477.037)
((646, 331), (646, 331), 65616.09, 58507.0)
('Error: ', tensor(33869.3555, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7694168561832411, 0.6040881816964166)
('Val: AUC, AUPR, Erros: ', 0.7344326001990873, 0.5460029018416641, 4488.908)
('Test: AUC, AUPR, Erros: ', 0.7355122629189509, 0.5425165396167758, 4482.3296)
((646, 331), (646, 331), 65700.74, 58507.0)
('Error: ', tensor(33615.0352, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7738796814774058, 0.6102930454296076)
('Val: AUC, AUPR, Erros: ', 0.7359667679511982, 0.5472189467632329, 4487.124)
('Test: AUC, AUPR, Erros: ', 0.7355173904935745, 0.5419465774500456, 4489.1006)
Train: 0.7739 0.6103
Test: 0.7355 0.5419
[0.5699743702370647, 0.5776589885163597, 0.5715384094932736, 0.569552312880502, 0.575312757953255, 0.5791934502197585, 0.5817232560462405, 0.5890505619607787, 0.5960375543713559, 0.5973999901600052, 0.6054893155419607, 0.6069693508995984, 0.6118927472924149, 0.6118003906344557, 0.6182780918714643, 0.6239471651339243, 0.6285434180670348, 0.634201282846178, 0.6383829281991231, 0.6426015601307838, 0.6438151642511318, 0.64914661423479, 0.6509695606665348, 0.6542329434260363, 0.6558982800650467, 0.6609677176445574, 0.6625409747029193, 0.6635750951072282, 0.6654738479746715, 0.6663614914796656, 0.6716791836054813, 0.6745481579509566, 0.6782047129102888, 0.6816372558499324, 0.6856383333674869, 0.6879011471728124, 0.6886073862217432, 0.6917101179927237, 0.6917101179927237, 0.6942279274202282, 0.6949807665657406, 0.6971879981570557, 0.698587227516182, 0.7039410000836201, 0.7085941425688554, 0.7085941425688554, 0.7094615593527849, 0.7094615593527849, 0.7116973031484898, 0.7132328163900139, 0.7132328163900139, 0.714964557511101, 0.714964557511101, 0.714964557511101, 0.714964557511101, 0.714964557511101, 0.714964557511101, 0.714964557511101, 0.718795644949403, 0.718795644949403, 0.7199811418266169, 0.7221139907391007, 0.7221139907391007, 0.7221139907391007, 0.7221139907391007, 0.7221139907391007, 0.7221139907391007, 0.7241357874687779, 0.7241357874687779, 0.7241357874687779, 0.7307783397393204, 0.7307783397393204, 0.7307783397393204, 0.7331181879464561, 0.7331181879464561, 0.7331181879464561, 0.7331181879464561, 0.7331181879464561, 0.7355173904935745, 0.7355173904935745, 0.7355173904935745, 0.7355173904935745, 0.7355173904935745, 0.7355173904935745, 0.7355173904935745, 0.7355173904935745, 0.7355173904935745, 0.7355173904935745, 0.7355173904935745, 0.7355173904935745]
[0.14004358506299597, 0.1464966791588969, 0.14666150096831299, 0.14817537749069526, 0.15759183196120802, 0.16384764617270448, 0.16753074746471458, 0.17963199409325123, 0.19064355626646903, 0.195042437611538, 0.207930263080749, 0.2093563765576004, 0.2171029649959284, 0.2171218506897104, 0.2302466827060599, 0.24045871445833547, 0.24833408506247218, 0.2599361696535456, 0.2685120776220341, 0.2784814627770719, 0.28128462308332713, 0.2919723067456222, 0.2972089441686378, 0.3042117489252679, 0.3082214364569071, 0.3198761416672047, 0.3227249518497868, 0.32516895744603586, 0.3302412185973841, 0.33233380232721355, 0.34482697846526844, 0.35252277283390715, 0.3617502410099267, 0.37007654202540186, 0.38056079258232056, 0.3860503538246991, 0.3880233163103595, 0.3958338640302028, 0.3958338640302028, 0.40410858186535237, 0.4064222750495871, 0.41234665860649694, 0.41650043916609725, 0.4329836556012071, 0.4474276922075008, 0.4474276922075008, 0.4491888166329397, 0.4491888166329397, 0.455684934232343, 0.46041030306786324, 0.46041030306786324, 0.46413293366653846, 0.46413293366653846, 0.46413293366653846, 0.46413293366653846, 0.46413293366653846, 0.46413293366653846, 0.46413293366653846, 0.4783042744247591, 0.4783042744247591, 0.48135416938181175, 0.48941008277593384, 0.48941008277593384, 0.48941008277593384, 0.48941008277593384, 0.48941008277593384, 0.48941008277593384, 0.49760183018133997, 0.49760183018133997, 0.49760183018133997, 0.5248680657027094, 0.5248680657027094, 0.5248680657027094, 0.5328653293017973, 0.5328653293017973, 0.5328653293017973, 0.5328653293017973, 0.5328653293017973, 0.5419465774500456, 0.5419465774500456, 0.5419465774500456, 0.5419465774500456, 0.5419465774500456, 0.5419465774500456, 0.5419465774500456, 0.5419465774500456, 0.5419465774500456, 0.5419465774500456, 0.5419465774500456, 0.5419465774500456]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_3
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((647, 2666), (81, 2666), (647, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19714.0)
('VALIDATE SUM PROTEIN TEST: ', 2411.0)
((647, 331), (647, 331), 43186.055, 58338.0)
('Error: ', tensor(44714.7383, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.45393905760180614, 0.24609940273080114)
('Val: AUC, AUPR, Erros: ', 0.4636043415481437, 0.2529080436340929, 5592.5083)
('Test: AUC, AUPR, Erros: ', 0.4810650165509622, 0.2634018265248574, 5477.314)
((647, 331), (647, 331), 62164.4, 58338.0)
('Error: ', tensor(40569.3281, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6572309963089925, 0.42214416604565286)
('Val: AUC, AUPR, Erros: ', 0.6357160838765015, 0.3889539175071971, 5126.1104)
('Test: AUC, AUPR, Erros: ', 0.6461358818261176, 0.3944947697656321, 5071.246)
((647, 331), (647, 331), 59028.94, 58338.0)
('Error: ', tensor(39786.7422, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6895212645369724, 0.470572135784359)
('Val: AUC, AUPR, Erros: ', 0.6686753182626074, 0.44693409622659974, 5029.522)
('Test: AUC, AUPR, Erros: ', 0.6735011964901372, 0.44171520744439796, 4982.2065)
((647, 331), (647, 331), 55676.004, 58338.0)
('Error: ', tensor(39074.5234, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.707248338110128, 0.49765295033827667)
('Val: AUC, AUPR, Erros: ', 0.6887897590533991, 0.4814450435704428, 4951.278)
('Test: AUC, AUPR, Erros: ', 0.6876839641534025, 0.47205082760543227, 4905.1797)
((647, 331), (647, 331), 55358.01, 58338.0)
('Error: ', tensor(38237.8242, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7160381783831297, 0.5125447571781437)
('Val: AUC, AUPR, Erros: ', 0.6992503440456468, 0.4982850914631838, 4857.9355)
('Test: AUC, AUPR, Erros: ', 0.6935276958059926, 0.48513897326600947, 4820.879)
((647, 331), (647, 331), 56515.156, 58338.0)
('Error: ', tensor(37383.2734, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7230207995250366, 0.525903022199473)
('Val: AUC, AUPR, Erros: ', 0.7077516752607289, 0.5127548863603059, 4756.567)
('Test: AUC, AUPR, Erros: ', 0.699440006779948, 0.49679781153623914, 4733.502)
((647, 331), (647, 331), 54585.523, 58338.0)
('Error: ', tensor(36807.0156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7288769437884044, 0.5362772049159285)
('Val: AUC, AUPR, Erros: ', 0.7145714058153809, 0.524147695385319, 4693.717)
('Test: AUC, AUPR, Erros: ', 0.7045115753275166, 0.5052632977801085, 4673.3604)
((647, 331), (647, 331), 54684.516, 58338.0)
('Error: ', tensor(36239.4570, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7340230834713974, 0.5449218935731386)
('Val: AUC, AUPR, Erros: ', 0.7197890646346088, 0.5332776756248445, 4628.8477)
('Test: AUC, AUPR, Erros: ', 0.708485602284179, 0.5112924743947682, 4620.167)
((647, 331), (647, 331), 55305.613, 58338.0)
('Error: ', tensor(35785.6641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.738731315720772, 0.5522271313215598)
('Val: AUC, AUPR, Erros: ', 0.7240175875561949, 0.5403119073931717, 4577.4165)
('Test: AUC, AUPR, Erros: ', 0.7121148431820697, 0.5162023123049186, 4580.6226)
((647, 331), (647, 331), 55258.58, 58338.0)
('Error: ', tensor(35470.9609, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7431979429413506, 0.5587768369007624)
('Val: AUC, AUPR, Erros: ', 0.7269319167528232, 0.5457162293656557, 4546.94)
('Test: AUC, AUPR, Erros: ', 0.7154079633167221, 0.5200996264391655, 4555.6113)
((647, 331), (647, 331), 55965.723, 58338.0)
('Error: ', tensor(35188.6914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7473616824979139, 0.5644392177303161)
('Val: AUC, AUPR, Erros: ', 0.7293925953394422, 0.5494189334449149, 4519.2466)
('Test: AUC, AUPR, Erros: ', 0.71790725887667, 0.5228391458094771, 4537.265)
((647, 331), (647, 331), 55702.242, 58338.0)
('Error: ', tensor(34980.0234, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7514764567372519, 0.5700417768952646)
('Val: AUC, AUPR, Erros: ', 0.7311751446206056, 0.5522385031549487, 4507.067)
('Test: AUC, AUPR, Erros: ', 0.7202075958544094, 0.5249843015010816, 4525.8726)
((647, 331), (647, 331), 55887.6, 58338.0)
('Error: ', tensor(34750.7852, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7557615248435482, 0.575761521588214)
('Val: AUC, AUPR, Erros: ', 0.732568121187288, 0.5545934671345907, 4494.345)
('Test: AUC, AUPR, Erros: ', 0.7223152971911889, 0.5267312538734722, 4515.0386)
((647, 331), (647, 331), 55646.234, 58338.0)
('Error: ', tensor(34535.4141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7600903238208307, 0.5817516439706613)
('Val: AUC, AUPR, Erros: ', 0.734079710784582, 0.55705830414104, 4485.403)
('Test: AUC, AUPR, Erros: ', 0.7245072631311213, 0.5284140224149882, 4505.4766)
((647, 331), (647, 331), 53492.793, 58338.0)
('Error: ', tensor(34419.4219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7649044079546798, 0.5887421912938655)
('Val: AUC, AUPR, Erros: ', 0.7355981821119513, 0.559441914607482, 4496.3394)
('Test: AUC, AUPR, Erros: ', 0.7268524728234181, 0.5305602079062508, 4503.1226)
((647, 331), (647, 331), 53884.734, 58338.0)
('Error: ', tensor(34143.0312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.769304122886619, 0.5953036741722022)
('Val: AUC, AUPR, Erros: ', 0.7369057072734856, 0.5616390104664656, 4481.698)
('Test: AUC, AUPR, Erros: ', 0.7290666415928609, 0.5322629548628397, 4489.928)
((647, 331), (647, 331), 53566.254, 58338.0)
('Error: ', tensor(33899.7227, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7738853170113323, 0.6022962040650848)
('Val: AUC, AUPR, Erros: ', 0.7385761557652495, 0.5643535007264857, 4472.8564)
('Test: AUC, AUPR, Erros: ', 0.7311689576377657, 0.5339325983882066, 4481.33)
Train: 0.7739 0.6023
Test: 0.7312 0.5339
[0.5767863458530378, 0.571389282315007, 0.584389547283219, 0.5923190192291017, 0.5957409595242167, 0.5974026646890679, 0.5964997743915952, 0.6028906879747209, 0.607590069592695, 0.6079733723299798, 0.6115072176876895, 0.6136302808281794, 0.6163543598139598, 0.6177259897477176, 0.6208930111667932, 0.6240411423895734, 0.6271282438703687, 0.6300566720467919, 0.634211699640535, 0.6384317992804378, 0.6390589544847297, 0.6417205608536347, 0.6445447522553349, 0.648945256418263, 0.6504706057960707, 0.6552363048234204, 0.6572371036153819, 0.6576795167622183, 0.6593196283865812, 0.6598117126087311, 0.6653706029853993, 0.6682939485959521, 0.6732144029639922, 0.6757106748744938, 0.6802097758378308, 0.681282663571351, 0.6824707474031967, 0.686403137572947, 0.686403137572947, 0.6884057033770844, 0.6898002570941936, 0.6921184996814729, 0.693140272400944, 0.6975814811032197, 0.7007472554942631, 0.7007472554942631, 0.7018350444765777, 0.7018350444765777, 0.7049683556003734, 0.7059218741150054, 0.7059218741150054, 0.7090594074539494, 0.7090594074539494, 0.7090594074539494, 0.7090594074539494, 0.7090594074539494, 0.7090594074539494, 0.7090594074539494, 0.712719409843488, 0.712719409843488, 0.7146976682768732, 0.7165996072189943, 0.7165996072189943, 0.7165996072189943, 0.7165996072189943, 0.7165996072189943, 0.7165996072189943, 0.7188301671239964, 0.7188301671239964, 0.7188301671239964, 0.7259633528034245, 0.7259633528034245, 0.7259633528034245, 0.7285403752570699, 0.7285403752570699, 0.7285403752570699, 0.7285403752570699, 0.7285403752570699, 0.7311689576377657, 0.7311689576377657, 0.7311689576377657, 0.7311689576377657, 0.7311689576377657, 0.7311689576377657, 0.7311689576377657, 0.7311689576377657, 0.7311689576377657, 0.7311689576377657, 0.7311689576377657, 0.7311689576377657]
[0.16941870798517922, 0.15894988977753535, 0.17684325229728184, 0.1905641112956031, 0.1921684902081182, 0.19467112063657585, 0.19748190111491037, 0.21176542950857097, 0.2223755019456358, 0.2230932843729776, 0.2308368241653515, 0.23682391199680003, 0.2395258388383389, 0.24287990435943357, 0.25097450395015053, 0.25837272402883243, 0.2647355399860617, 0.2710657898392468, 0.28159298360055707, 0.2890327692995803, 0.28968191561576473, 0.2932846414799924, 0.29910539454986307, 0.30996046172513947, 0.31322959212240564, 0.32290465496441084, 0.32695424289152175, 0.32896146161027046, 0.33382929373173836, 0.33352855939026116, 0.3474656787911547, 0.35531837882707873, 0.36660410948618094, 0.372304091029961, 0.3855808698373, 0.3870010066581169, 0.3899039133334761, 0.40010309561095175, 0.40010309561095175, 0.40513275835942036, 0.40891605641645323, 0.4146640267053777, 0.4168245902871262, 0.4268430501482943, 0.4366939104315028, 0.4366939104315028, 0.43941242862325597, 0.43941242862325597, 0.4483682792886865, 0.4512812871368387, 0.4512812871368387, 0.45934610737224235, 0.45934610737224235, 0.45934610737224235, 0.45934610737224235, 0.45934610737224235, 0.45934610737224235, 0.45934610737224235, 0.47042536340773605, 0.47042536340773605, 0.47718387626258973, 0.4837033513824144, 0.4837033513824144, 0.4837033513824144, 0.4837033513824144, 0.4837033513824144, 0.4837033513824144, 0.49162756722274714, 0.49162756722274714, 0.49162756722274714, 0.5154858942427856, 0.5154858942427856, 0.5154858942427856, 0.5241075792503507, 0.5241075792503507, 0.5241075792503507, 0.5241075792503507, 0.5241075792503507, 0.5339325983882066, 0.5339325983882066, 0.5339325983882066, 0.5339325983882066, 0.5339325983882066, 0.5339325983882066, 0.5339325983882066, 0.5339325983882066, 0.5339325983882066, 0.5339325983882066, 0.5339325983882066, 0.5339325983882066]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_4
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((647, 2666), (80, 2666), (647, 331), (80, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19824.0)
('VALIDATE SUM PROTEIN TEST: ', 2518.0)
((647, 331), (647, 331), 93500.29, 58099.0)
('Error: ', tensor(52216.6484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4460481041168828, 0.24353109952086133)
('Val: AUC, AUPR, Erros: ', 0.4268108114277549, 0.23663870269753862, 6603.9453)
('Test: AUC, AUPR, Erros: ', 0.4522870326767921, 0.2468491392976502, 6793.7153)
((647, 331), (647, 331), 45317.414, 58099.0)
('Error: ', tensor(42127.1758, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6196166172440604, 0.3684776411513308)
('Val: AUC, AUPR, Erros: ', 0.6253150074779692, 0.38399899015525846, 5368.284)
('Test: AUC, AUPR, Erros: ', 0.6158494173434192, 0.374832077389338, 5322.7134)
((647, 331), (647, 331), 55989.18, 58099.0)
('Error: ', tensor(40193.9219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6680631474143279, 0.44805964836967616)
('Val: AUC, AUPR, Erros: ', 0.6735227106877131, 0.46355443707877125, 5105.7104)
('Test: AUC, AUPR, Erros: ', 0.6665617318295449, 0.4592735272194439, 5059.5996)
((647, 331), (647, 331), 52382.465, 58099.0)
('Error: ', tensor(39130.2617, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6969112321928186, 0.4963037653722052)
('Val: AUC, AUPR, Erros: ', 0.6969726248246169, 0.5082778551710085, 4986.3467)
('Test: AUC, AUPR, Erros: ', 0.6954318436260034, 0.5074701404896708, 4938.317)
((647, 331), (647, 331), 50202.42, 58099.0)
('Error: ', tensor(37945.4531, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7129445061340933, 0.5208442294786959)
('Val: AUC, AUPR, Erros: ', 0.715343123987731, 0.5342810309753772, 4826.6597)
('Test: AUC, AUPR, Erros: ', 0.7095598080928847, 0.5294388777830905, 4808.513)
((647, 331), (647, 331), 50716.4, 58099.0)
('Error: ', tensor(36849.4492, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7234982724540897, 0.5359228039657504)
('Val: AUC, AUPR, Erros: ', 0.7240222945608168, 0.545981320243762, 4689.8594)
('Test: AUC, AUPR, Erros: ', 0.7197830746516933, 0.5444853201309112, 4665.479)
((647, 331), (647, 331), 51726.64, 58099.0)
('Error: ', tensor(36221.5938, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7296754356884637, 0.5437767764727063)
('Val: AUC, AUPR, Erros: ', 0.7320943568499901, 0.5558264137817057, 4600.5337)
('Test: AUC, AUPR, Erros: ', 0.726107388143695, 0.5534288198595887, 4578.7754)
((647, 331), (647, 331), 52418.94, 58099.0)
('Error: ', tensor(35823.8594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7363520264095881, 0.5511273803469965)
('Val: AUC, AUPR, Erros: ', 0.7343249681463084, 0.5562559945305802, 4574.312)
('Test: AUC, AUPR, Erros: ', 0.7282371716895161, 0.5563966214902663, 4540.7744)
((647, 331), (647, 331), 52309.19, 58099.0)
('Error: ', tensor(35540.8125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7419265941064922, 0.5586036914653071)
('Val: AUC, AUPR, Erros: ', 0.7353338567532739, 0.5591092074330183, 4554.73)
('Test: AUC, AUPR, Erros: ', 0.7314164457176557, 0.5606338807553488, 4517.9165)
((647, 331), (647, 331), 53588.69, 58099.0)
('Error: ', tensor(35221.0195, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.746294928135075, 0.564433478209652)
('Val: AUC, AUPR, Erros: ', 0.7339925388389263, 0.5565488933581811, 4544.459)
('Test: AUC, AUPR, Erros: ', 0.7322443174904396, 0.5612976606977875, 4492.761)
((647, 331), (647, 331), 52231.664, 58099.0)
('Error: ', tensor(35090.6953, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7507308366189663, 0.5715873307461035)
('Val: AUC, AUPR, Erros: ', 0.7352457664365131, 0.5591267715159449, 4546.197)
('Test: AUC, AUPR, Erros: ', 0.7325465060887963, 0.5622379940402025, 4499.0063)
