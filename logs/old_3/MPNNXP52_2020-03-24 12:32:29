class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug, drugFeatures = None):


        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]
            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xProtein = self.nodesEmbedding(proteinNodes)

            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)

            if config.BOTH_GRAPH and config.EXT_MODE:
                xAtom = F.relu(self.conv1(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE:
                xAtom = F.relu(self.conv2(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv2g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE:
                xAtom = F.relu(self.conv3(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv3g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xDrug = x1 + x2 + x3

            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)
            xDrug = self.lin2(xDrug)
            xDrug = self.act2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x = self.convD1(x, drugEdges)
            x = F.relu(x)
            x = self.convD2(x, drugEdges)
            x = F.relu(x)

        if config.SE_GRAPH:
            # Conv SE:
            x = self.convS1(x, seEdges)
            x = F.relu(x)
            # x = self.convS2(x, seEdges)
            # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', False)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', False, True, False)
('Drug Features: ', False)
('Cross Prob: ', 1)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7fa7e17a7590>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
('EXT MODE: ', True)
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 1472)
((775, 2666), (97, 2666), (775, 1472), (97, 1472))
('VALIDATE SUM PROTEIN TRAIN: ', 19983.0)
('VALIDATE SUM PROTEIN TEST: ', 2685.0)
((775, 1472), (775, 1472), 302433.2, 93593.0)
('Error: ', tensor(124425.1406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4889441287450954, 0.08106293226872566)
('Val: AUC, AUPR, Erros: ', 0.48770120363087344, 0.08287400458105047, 15727.182)
('Test: AUC, AUPR, Erros: ', 0.4954861485575562, 0.08952955161148438, 16037.847)
((775, 1472), (775, 1472), 110503.95, 93593.0)
('Error: ', tensor(77715.1719, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8380556907697263, 0.4024715799507311)
('Val: AUC, AUPR, Erros: ', 0.8041493378167269, 0.3272852306826375, 10088.385)
('Test: AUC, AUPR, Erros: ', 0.7952908903958229, 0.3162314746232932, 10661.195)
((775, 1472), (775, 1472), 97622.78, 93593.0)
('Error: ', tensor(66407.5469, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8487096718935537, 0.4580609755087009)
('Val: AUC, AUPR, Erros: ', 0.8251648984694699, 0.37745299244139724, 9437.769)
('Test: AUC, AUPR, Erros: ', 0.8156327649986947, 0.35920154485215894, 10132.073)
((775, 1472), (775, 1472), 91654.25, 93593.0)
('Error: ', tensor(63004.5977, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8530586286084989, 0.5063917722504881)
('Val: AUC, AUPR, Erros: ', 0.822975237713501, 0.3829175542279318, 9423.077)
('Test: AUC, AUPR, Erros: ', 0.8160178681440273, 0.3760552522225052, 9933.789)
((775, 1472), (775, 1472), 89972.086, 93593.0)
('Error: ', tensor(61917.9180, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8616176945057968, 0.523834057438514)
('Val: AUC, AUPR, Erros: ', 0.8026584587319272, 0.3516961976300616, 9976.31)
('Test: AUC, AUPR, Erros: ', 0.8131037168601296, 0.3712801022746971, 9964.195)
((775, 1472), (775, 1472), 101046.78, 93593.0)
('Error: ', tensor(61162.8594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8670402163332689, 0.5328685950883708)
('Val: AUC, AUPR, Erros: ', 0.8088933163028872, 0.3398423189342979, 10853.416)
('Test: AUC, AUPR, Erros: ', 0.8177159752055407, 0.3723951680625576, 10154.937)
((775, 1472), (775, 1472), 96959.48, 93593.0)
('Error: ', tensor(60727.8359, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.870544714218921, 0.5388634256250511)
('Val: AUC, AUPR, Erros: ', 0.7979501539983416, 0.3211233410345935, 11634.581)
('Test: AUC, AUPR, Erros: ', 0.8156421745752206, 0.36102994402772526, 10397.189)
