class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug, drugFeatures = None):


        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]


            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)
            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xProtein = self.nodesEmbedding(proteinNodes)
            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)




            iLevel = 0
            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv1(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            iLevel += 1

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv2(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv2g(xAtom, edge_index))

            iLevel += 1
            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv3(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv3g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xDrug = x1 + x2 + x3

            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)

            # xDrug = self.lin2(xDrug)
            # xDrug = self.act2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x = self.convD1(x, drugEdges)
            x = F.relu(x)
            x = self.convD2(x, drugEdges)
            x = F.relu(x)

        if config.SE_GRAPH:
            # Conv SE:
            x = self.convS1(x, seEdges)
            x = F.relu(x)
            # x = self.convS2(x, seEdges)
            # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Inner mode: ', True)
('Cross Prob: ', 0.5)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7fd329666750>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((727, 2666), (41, 2666), (727, 331), (41, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 22309.0)
('VALIDATE SUM PROTEIN TEST: ', 1206.0)
((727, 331), (727, 331), 90532.49, 65913.0)
('Error: ', tensor(55773.1797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4451302007859829, 0.24388318700159495)
('Val: AUC, AUPR, Erros: ', 0.41326853466535657, 0.21955854667200092, 3090.348)
('Test: AUC, AUPR, Erros: ', 0.5007773105112653, 0.29321204212081764, 2842.1514)
((727, 331), (727, 331), 59583.695, 65913.0)
('Error: ', tensor(47384.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5721326733923082, 0.33421433115130983)
('Val: AUC, AUPR, Erros: ', 0.5457155004707149, 0.30398148516062307, 2541.3616)
('Test: AUC, AUPR, Erros: ', 0.6190927204217039, 0.39232322931909774, 2543.787)
((727, 331), (727, 331), 55942.906, 65913.0)
('Error: ', tensor(45556.9062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6836277495066434, 0.4931293423887244)
('Val: AUC, AUPR, Erros: ', 0.662211972614529, 0.44127793036472035, 2438.755)
('Test: AUC, AUPR, Erros: ', 0.6760662115752893, 0.4657061474621509, 2486.6118)
((727, 331), (727, 331), 56234.27, 65913.0)
('Error: ', tensor(43490.9883, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7227615008138145, 0.5426614976448032)
('Val: AUC, AUPR, Erros: ', 0.7096766834819488, 0.5000453355066281, 2331.2212)
('Test: AUC, AUPR, Erros: ', 0.6933641453525581, 0.4852399753269294, 2405.7568)
((727, 331), (727, 331), 56192.406, 65913.0)
('Error: ', tensor(41680.9375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7376334683775907, 0.5609217526194658)
('Val: AUC, AUPR, Erros: ', 0.7243741992678793, 0.5189124636678133, 2245.5237)
('Test: AUC, AUPR, Erros: ', 0.7029633188431821, 0.49684922011927524, 2334.4219)
((727, 331), (727, 331), 56934.883, 65913.0)
('Error: ', tensor(40372.2148, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7479676071039811, 0.5750511826095681)
('Val: AUC, AUPR, Erros: ', 0.7323178817777062, 0.5316698474739723, 2188.9736)
('Test: AUC, AUPR, Erros: ', 0.7124753294343477, 0.5086995240470098, 2284.4836)
((727, 331), (727, 331), 58419.957, 65913.0)
('Error: ', tensor(39393.0156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7572942632734441, 0.5884402131615034)
('Val: AUC, AUPR, Erros: ', 0.7373838148392876, 0.5400108670641638, 2154.9722)
('Test: AUC, AUPR, Erros: ', 0.7203166238805948, 0.5189446682675811, 2252.4226)
((727, 331), (727, 331), 59096.13, 65913.0)
('Error: ', tensor(38736.0312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7651033565527865, 0.5996321726376577)
('Val: AUC, AUPR, Erros: ', 0.7422421921623441, 0.5475726819466606, 2134.379)
('Test: AUC, AUPR, Erros: ', 0.7264845258808736, 0.5272086144811731, 2231.9182)
((727, 331), (727, 331), 58723.027, 65913.0)
('Error: ', tensor(38298.5312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7719736133309956, 0.6093921158054608)
('Val: AUC, AUPR, Erros: ', 0.7449231340038334, 0.5516179649064201, 2124.992)
('Test: AUC, AUPR, Erros: ', 0.7314122158888106, 0.5328753899776765, 2217.6372)
((727, 331), (727, 331), 59110.68, 65913.0)
('Error: ', tensor(37835.2500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7782388541081269, 0.6180750868559256)
('Val: AUC, AUPR, Erros: ', 0.7474512660929619, 0.5546874540925348, 2115.6895)
('Test: AUC, AUPR, Erros: ', 0.7359994804031941, 0.537841508315241, 2204.767)
((727, 331), (727, 331), 58906.082, 65913.0)
('Error: ', tensor(37466.0039, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7842748406440263, 0.6262259870262187)
('Val: AUC, AUPR, Erros: ', 0.7491815378970995, 0.5563694276314881, 2111.2212)
('Test: AUC, AUPR, Erros: ', 0.7414767417888407, 0.5434003132421553, 2189.788)
((727, 331), (727, 331), 58844.527, 65913.0)
('Error: ', tensor(37105.2734, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7899859820851521, 0.6336477113479745)
('Val: AUC, AUPR, Erros: ', 0.7506466546210713, 0.5570437089303787, 2108.1836)
('Test: AUC, AUPR, Erros: ', 0.7454232575744812, 0.5456038649093463, 2182.0273)
((727, 331), (727, 331), 59046.832, 65913.0)
('Error: ', tensor(36742.9219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7954443840638032, 0.6407116167873977)
('Val: AUC, AUPR, Erros: ', 0.7503930460208391, 0.5549058908219578, 2110.9043)
('Test: AUC, AUPR, Erros: ', 0.7485031870801482, 0.5471857904239168, 2178.236)
((727, 331), (727, 331), 58871.426, 65913.0)
('Error: ', tensor(36439.1719, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8003993454391123, 0.6469735680643826)
('Val: AUC, AUPR, Erros: ', 0.7444444799265851, 0.5488313566015754, 2127.2524)
('Test: AUC, AUPR, Erros: ', 0.7516354734858292, 0.5469706421793722, 2177.4287)
((727, 331), (727, 331), 59402.71, 65913.0)
('Error: ', tensor(36115.4688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8044083742414829, 0.6525419104321035)
('Val: AUC, AUPR, Erros: ', 0.7295634031997381, 0.5404699803225599, 2154.391)
('Test: AUC, AUPR, Erros: ', 0.7535350415421084, 0.5457973094162216, 2181.5544)
((727, 331), (727, 331), 59604.58, 65913.0)
('Error: ', tensor(35874.6719, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8075969518310107, 0.6571600612973603)
('Val: AUC, AUPR, Erros: ', 0.7270535148445892, 0.5381711103193242, 2162.3767)
('Test: AUC, AUPR, Erros: ', 0.7518185043060557, 0.5396597335092234, 2197.8735)
((727, 331), (727, 331), 60141.07, 65913.0)
('Error: ', tensor(35641.4766, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8101590066930522, 0.6612305947756382)
('Val: AUC, AUPR, Erros: ', 0.7254739090801489, 0.5344819054929131, 2170.6675)
('Test: AUC, AUPR, Erros: ', 0.7506708641584523, 0.5360875598702975, 2215.593)
Train: 0.7900 0.6336
Test: 0.7454 0.5456
[0.58923515039723, 0.6312846325125913, 0.6375824585556129, 0.6321597440282294, 0.6372101146658504, 0.6379135184882805, 0.6473953713370646, 0.6522572586887971, 0.6552509439250795, 0.6558192940239583, 0.6594058807302354, 0.6610377523604095, 0.6625399412291401, 0.6639820295028367, 0.6669343209671523, 0.6690969193516886, 0.6726374223643454, 0.6757495059634483, 0.6778516289304519, 0.6817826926380751, 0.6820897515218418, 0.6840922845720729, 0.6851319929036073, 0.6869914743342058, 0.6878262267690848, 0.6878255972044724, 0.688850078522711, 0.6893995460602657, 0.6907026269856943, 0.6917734009228239, 0.6963330548374085, 0.6973681455042119, 0.7006295162764714, 0.7015837404583322, 0.7036507387623008, 0.7053736073817541, 0.706003007735837, 0.7088432054354946, 0.7088432054354946, 0.7098474618856747, 0.710786447515951, 0.7126215873052585, 0.7135474639971799, 0.7170632833225631, 0.719370149165119, 0.719370149165119, 0.7204600401465143, 0.7204600401465143, 0.7223971901677254, 0.7239052109805834, 0.7239052109805834, 0.7264813512086709, 0.7264813512086709, 0.7264813512086709, 0.7264813512086709, 0.7264813512086709, 0.7264813512086709, 0.7264813512086709, 0.7290013004531194, 0.7290013004531194, 0.7301529432406266, 0.7317642706766917, 0.7317642706766917, 0.7317642706766917, 0.7317642706766917, 0.7317642706766917, 0.7317642706766917, 0.7338208944458489, 0.7338208944458489, 0.7338208944458489, 0.7405075420712385, 0.7405075420712385, 0.7405075420712385, 0.742915852442672, 0.742915852442672, 0.742915852442672, 0.742915852442672, 0.742915852442672, 0.7454232575744812, 0.7454232575744812, 0.7454232575744812, 0.7454232575744812, 0.7454232575744812, 0.7454232575744812, 0.7454232575744812, 0.7454232575744812, 0.7454232575744812, 0.7454232575744812, 0.7454232575744812, 0.7454232575744812]
[0.1424572792512647, 0.18310169275465812, 0.18893942871512107, 0.193574058152209, 0.20960570583852622, 0.21031896729687455, 0.2364448103005716, 0.24954160709054635, 0.262707830528543, 0.2603690820379869, 0.26708273541048555, 0.2732278362929683, 0.2777203668976107, 0.28013950295326245, 0.29107287086440226, 0.2973951719505489, 0.3049594147959151, 0.31528526968488824, 0.3205289774988644, 0.3337934688001262, 0.33571978638643796, 0.3390802500290374, 0.34202177468504213, 0.3475812367727876, 0.35008092578660954, 0.34712781100413076, 0.3509648169143975, 0.35181803116628385, 0.3575005015163044, 0.3605658288599983, 0.37488994451622, 0.3796273575504535, 0.391450400091156, 0.39595138710919897, 0.4005815815150976, 0.4061027853695579, 0.4075069256109147, 0.41488119846393234, 0.41488119846393234, 0.41893273690786853, 0.4217330096570008, 0.42902157011639597, 0.432507058185104, 0.4426909374805639, 0.4491884560836294, 0.4491884560836294, 0.4518823853576422, 0.4518823853576422, 0.45768248164632, 0.46374531345817604, 0.46374531345817604, 0.4721319379619503, 0.4721319379619503, 0.4721319379619503, 0.4721319379619503, 0.4721319379619503, 0.4721319379619503, 0.4721319379619503, 0.4817890106147038, 0.4817890106147038, 0.48587818073844424, 0.49287493732779936, 0.49287493732779936, 0.49287493732779936, 0.49287493732779936, 0.49287493732779936, 0.49287493732779936, 0.5015852013566313, 0.5015852013566313, 0.5015852013566313, 0.5271928134771753, 0.5271928134771753, 0.5271928134771753, 0.5362386973934344, 0.5362386973934344, 0.5362386973934344, 0.5362386973934344, 0.5362386973934344, 0.5456038649093463, 0.5456038649093463, 0.5456038649093463, 0.5456038649093463, 0.5456038649093463, 0.5456038649093463, 0.5456038649093463, 0.5456038649093463, 0.5456038649093463, 0.5456038649093463, 0.5456038649093463, 0.5456038649093463]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((727, 2666), (40, 2666), (727, 331), (40, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 22068.0)
('VALIDATE SUM PROTEIN TEST: ', 1128.0)
((727, 331), (727, 331), 92524.64, 66109.0)
('Error: ', tensor(55376.4922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4576007961437912, 0.250350443949112)
('Val: AUC, AUPR, Erros: ', 0.4438791969113758, 0.22097008232467635, 2976.696)
('Test: AUC, AUPR, Erros: ', 0.4287240968176334, 0.22394180921057077, 3054.3381)
((727, 331), (727, 331), 57118.418, 66109.0)
('Error: ', tensor(47862.8438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5564848623563529, 0.326893054609525)
('Val: AUC, AUPR, Erros: ', 0.5467118515615388, 0.2903716312961471, 2503.378)
('Test: AUC, AUPR, Erros: ', 0.5303018663812957, 0.29261594824762943, 2554.9106)
((727, 331), (727, 331), 68001.98, 66109.0)
('Error: ', tensor(46529.1914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6178468891226567, 0.3940402487476246)
('Val: AUC, AUPR, Erros: ', 0.6067984214743886, 0.3515978523793467, 2472.6763)
('Test: AUC, AUPR, Erros: ', 0.597249451069108, 0.36110421959072914, 2502.1924)
((727, 331), (727, 331), 68928.49, 66109.0)
('Error: ', tensor(45576.1719, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6526643113993301, 0.441665858906411)
('Val: AUC, AUPR, Erros: ', 0.6448641197370168, 0.40227468164794966, 2428.031)
('Test: AUC, AUPR, Erros: ', 0.6412898840328327, 0.4167637152671454, 2448.7512)
((727, 331), (727, 331), 70092.48, 66109.0)
('Error: ', tensor(44597.5742, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6735232185136395, 0.4732098286942113)
('Val: AUC, AUPR, Erros: ', 0.6676385897594985, 0.43504875276438937, 2383.8967)
('Test: AUC, AUPR, Erros: ', 0.66461792786605, 0.450780371966344, 2399.232)
((727, 331), (727, 331), 74540.92, 66109.0)
('Error: ', tensor(43698.7891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.688470087719347, 0.49487487366969535)
('Val: AUC, AUPR, Erros: ', 0.6858734354906395, 0.4594760293232213, 2354.7625)
('Test: AUC, AUPR, Erros: ', 0.6840928773416993, 0.4764150912541298, 2355.8203)
((727, 331), (727, 331), 74688.07, 66109.0)
('Error: ', tensor(42626.4102, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7022125608683496, 0.5132780431043013)
('Val: AUC, AUPR, Erros: ', 0.6989958964254772, 0.4769535054054741, 2304.026)
('Test: AUC, AUPR, Erros: ', 0.6971731023729835, 0.4931071195952461, 2302.7036)
((727, 331), (727, 331), 75034.29, 66109.0)
('Error: ', tensor(41796.8906, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.713035053295764, 0.52804076995432)
('Val: AUC, AUPR, Erros: ', 0.706424290100212, 0.48778245025658734, 2271.7688)
('Test: AUC, AUPR, Erros: ', 0.7079551491549441, 0.5076933956649572, 2261.226)
((727, 331), (727, 331), 74348.336, 66109.0)
('Error: ', tensor(41165.1797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7218371757272966, 0.5400545643354021)
('Val: AUC, AUPR, Erros: ', 0.7143729071059102, 0.4994145766577672, 2240.3545)
('Test: AUC, AUPR, Erros: ', 0.7125062807084991, 0.5137661849748154, 2239.7222)
((727, 331), (727, 331), 73949.05, 66109.0)
('Error: ', tensor(40706.9023, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7289329307919131, 0.5494451193127255)
('Val: AUC, AUPR, Erros: ', 0.7194930437680878, 0.5071280175362245, 2223.7646)
('Test: AUC, AUPR, Erros: ', 0.7193157618085082, 0.5234141612765125, 2217.9565)
((727, 331), (727, 331), 73517.94, 66109.0)
('Error: ', tensor(40347.9062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7344913091471379, 0.5570876803225446)
('Val: AUC, AUPR, Erros: ', 0.7233377059707328, 0.5124458918629066, 2208.6643)
('Test: AUC, AUPR, Erros: ', 0.7236552719615896, 0.5289155473963507, 2203.405)
((727, 331), (727, 331), 72743.43, 66109.0)
('Error: ', tensor(39998.7227, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7395199814840164, 0.56421865559006)
('Val: AUC, AUPR, Erros: ', 0.7262779301921369, 0.5157477716780353, 2195.538)
('Test: AUC, AUPR, Erros: ', 0.725268142232881, 0.5317483074116682, 2194.3455)
((727, 331), (727, 331), 72917.49, 66109.0)
('Error: ', tensor(39787.8750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7431981837684443, 0.5688872456725181)
('Val: AUC, AUPR, Erros: ', 0.7273448940858178, 0.5168228105628944, 2194.0396)
('Test: AUC, AUPR, Erros: ', 0.7274554979296024, 0.533735319954338, 2189.4429)
((727, 331), (727, 331), 73195.51, 66109.0)
('Error: ', tensor(39547.3750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.747354672578695, 0.5746658180751173)
('Val: AUC, AUPR, Erros: ', 0.7292793649016224, 0.5197732319855564, 2190.7466)
('Test: AUC, AUPR, Erros: ', 0.7299298154387585, 0.5372446807265336, 2184.1992)
((727, 331), (727, 331), 72592.78, 66109.0)
('Error: ', tensor(39292.8086, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7508926251651862, 0.580011171730529)
('Val: AUC, AUPR, Erros: ', 0.7295321049814426, 0.5184830701983217, 2187.1992)
('Test: AUC, AUPR, Erros: ', 0.731798009280413, 0.539995075657953, 2174.831)
((727, 331), (727, 331), 73534.59, 66109.0)
('Error: ', tensor(39128.5664, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.754067918358119, 0.5850192412037695)
('Val: AUC, AUPR, Erros: ', 0.7311141291708914, 0.5204448787820904, 2190.3855)
('Test: AUC, AUPR, Erros: ', 0.7325439621504909, 0.540704313109405, 2179.9185)
((727, 331), (727, 331), 72937.72, 66109.0)
('Error: ', tensor(38876.5781, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7575727303000573, 0.5902456856940167)
('Val: AUC, AUPR, Erros: ', 0.7321633661561961, 0.5216613032878761, 2182.375)
('Test: AUC, AUPR, Erros: ', 0.7344507428200928, 0.5432367871485753, 2171.0762)
Train: 0.7576 0.5902
Test: 0.7345 0.5432
[0.5452477184394902, 0.5316913124009174, 0.5515624912920698, 0.5616120404237608, 0.5657093888804614, 0.5655207550867108, 0.5676240805236569, 0.585011237258026, 0.5945184805200091, 0.5938951255257999, 0.6032534065847078, 0.6044472965130758, 0.6110292783505155, 0.6115940237005165, 0.619806790022516, 0.6215279346838807, 0.625155520914216, 0.6318297893747167, 0.6336372898912377, 0.6370160884902649, 0.6365870821533672, 0.6414215369481487, 0.644838813545461, 0.6526528937221283, 0.6546372891901436, 0.6589293137420406, 0.663022371124645, 0.6640969558366961, 0.6671959761663059, 0.6674350282206485, 0.672151994491963, 0.6744382409412741, 0.6792913106571832, 0.6817074637347204, 0.686499806862743, 0.6877233403121137, 0.6886115177043851, 0.693094787084477, 0.693094787084477, 0.6954332059250489, 0.6953864105600737, 0.6970066462464591, 0.6980685847961159, 0.7027533833210232, 0.7069361258576616, 0.7069361258576616, 0.7081133744544341, 0.7081133744544341, 0.7107945857453883, 0.712083187424939, 0.712083187424939, 0.714279677079, 0.714279677079, 0.714279677079, 0.714279677079, 0.714279677079, 0.714279677079, 0.714279677079, 0.7176115144253333, 0.7176115144253333, 0.719229011126358, 0.7210955262244598, 0.7210955262244598, 0.7210955262244598, 0.7210955262244598, 0.7210955262244598, 0.7210955262244598, 0.7230983812167047, 0.7230983812167047, 0.7230983812167047, 0.7297063778839594, 0.7297063778839594, 0.7297063778839594, 0.7315116407191102, 0.7315116407191102, 0.7315116407191102, 0.7315116407191102, 0.7315116407191102, 0.7344507428200928, 0.7344507428200928, 0.7344507428200928, 0.7344507428200928, 0.7344507428200928, 0.7344507428200928, 0.7344507428200928, 0.7344507428200928, 0.7344507428200928, 0.7344507428200928, 0.7344507428200928, 0.7344507428200928]
[0.14564685850288103, 0.1401509489427986, 0.15511773915350927, 0.16026317290902126, 0.1653307459720171, 0.1706841017992577, 0.1728320193635322, 0.1988457706191995, 0.21452537255944132, 0.21207142542976667, 0.2310764969566219, 0.23019075502464886, 0.241394811428655, 0.23920328787072012, 0.25096388587563345, 0.2514439067684163, 0.25672248300816863, 0.27267300056582544, 0.2746526355043787, 0.28325381283899054, 0.27961553326060584, 0.29299872211786665, 0.3013036556796353, 0.3205807478345297, 0.3250620125639774, 0.3327810158395609, 0.34301845180931567, 0.34712926614613093, 0.3558657815066656, 0.3548684071471878, 0.3642826271735694, 0.3681942899506895, 0.38208481201019545, 0.3872601578965504, 0.40139774061521416, 0.4051846540856072, 0.40748907608945767, 0.4159607262773394, 0.4159607262773394, 0.4204557257319061, 0.41792043601023987, 0.4212732637839078, 0.4239525620537408, 0.4384899413765499, 0.45200574688146916, 0.45200574688146916, 0.45526524601047497, 0.45526524601047497, 0.4642309205093539, 0.4678399322606468, 0.4678399322606468, 0.4732542902841211, 0.4732542902841211, 0.4732542902841211, 0.4732542902841211, 0.4732542902841211, 0.4732542902841211, 0.4732542902841211, 0.48435340741894034, 0.48435340741894034, 0.49007152714531643, 0.4966545014539735, 0.4966545014539735, 0.4966545014539735, 0.4966545014539735, 0.4966545014539735, 0.4966545014539735, 0.5046001920071045, 0.5046001920071045, 0.5046001920071045, 0.5267268494089574, 0.5267268494089574, 0.5267268494089574, 0.5318532366459383, 0.5318532366459383, 0.5318532366459383, 0.5318532366459383, 0.5318532366459383, 0.5432367871485753, 0.5432367871485753, 0.5432367871485753, 0.5432367871485753, 0.5432367871485753, 0.5432367871485753, 0.5432367871485753, 0.5432367871485753, 0.5432367871485753, 0.5432367871485753, 0.5432367871485753, 0.5432367871485753]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_2
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((727, 2666), (41, 2666), (727, 331), (41, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 21797.0)
('VALIDATE SUM PROTEIN TEST: ', 1447.0)
((727, 331), (727, 331), 53448.027, 66635.0)
('Error: ', tensor(51143.7578, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4515095828982462, 0.25011818966149396)
('Val: AUC, AUPR, Erros: ', 0.4056124140053249, 0.18236082224169708, 2521.9595)
('Test: AUC, AUPR, Erros: ', 0.43006778524043565, 0.22336788338953606, 2644.924)
((727, 331), (727, 331), 69822.84, 66635.0)
('Error: ', tensor(46714.7500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6214346850874439, 0.3863041075204354)
('Val: AUC, AUPR, Erros: ', 0.5869993025806238, 0.2748144034529442, 2326.9014)
('Test: AUC, AUPR, Erros: ', 0.5980029496873484, 0.32469759941516246, 2488.2673)
((727, 331), (727, 331), 69522.78, 66635.0)
('Error: ', tensor(46409.1953, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6382526634261226, 0.3999341569085393)
('Val: AUC, AUPR, Erros: ', 0.6070481156488325, 0.288590740561133, 2306.8809)
('Test: AUC, AUPR, Erros: ', 0.6214522415734146, 0.33835081565389435, 2467.3987)
((727, 331), (727, 331), 71077.27, 66635.0)
('Error: ', tensor(46186.4531, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6512699005096696, 0.4103842477030567)
('Val: AUC, AUPR, Erros: ', 0.6330516352123016, 0.3134372411333669, 2294.148)
('Test: AUC, AUPR, Erros: ', 0.6302754884421435, 0.3431903052491556, 2467.3254)
((727, 331), (727, 331), 71273.87, 66635.0)
('Error: ', tensor(46013.7930, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6581966441933392, 0.416300162359005)
('Val: AUC, AUPR, Erros: ', 0.6429925834200184, 0.3235444075188523, 2286.4282)
('Test: AUC, AUPR, Erros: ', 0.635933195063448, 0.3471029898876039, 2462.6414)
((727, 331), (727, 331), 70765.58, 66635.0)
('Error: ', tensor(45857.4414, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.660811594355493, 0.41696165793812984)
('Val: AUC, AUPR, Erros: ', 0.6566013128482071, 0.33735001530445097, 2259.9385)
('Test: AUC, AUPR, Erros: ', 0.6376666146560346, 0.3488888942938394, 2454.505)
((727, 331), (727, 331), 69367.62, 66635.0)
('Error: ', tensor(45751.2891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.660996695496774, 0.4167845979439966)
('Val: AUC, AUPR, Erros: ', 0.6592073108798912, 0.3432411921923325, 2244.9976)
('Test: AUC, AUPR, Erros: ', 0.6473747004488886, 0.35891191127274613, 2435.8958)
((727, 331), (727, 331), 69130.766, 66635.0)
('Error: ', tensor(45519.5391, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6669422283437416, 0.42388755188100324)
('Val: AUC, AUPR, Erros: ', 0.6734820852445513, 0.3614651440049352, 2218.4758)
('Test: AUC, AUPR, Erros: ', 0.6512352612896566, 0.3614243041382573, 2427.9106)
((727, 331), (727, 331), 69064.45, 66635.0)
('Error: ', tensor(45396.1953, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6683284553582568, 0.4244362001496575)
('Val: AUC, AUPR, Erros: ', 0.6747859116454077, 0.3635437801948085, 2211.1787)
('Test: AUC, AUPR, Erros: ', 0.6553151121776899, 0.3667294769619929, 2419.7485)
((727, 331), (727, 331), 68658.445, 66635.0)
('Error: ', tensor(45247.6406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.67117455529023, 0.4280772362812733)
('Val: AUC, AUPR, Erros: ', 0.68350094002521, 0.37609002226279803, 2189.6619)
('Test: AUC, AUPR, Erros: ', 0.660316923189072, 0.37263465779954175, 2407.981)
((727, 331), (727, 331), 69081.5, 66635.0)
('Error: ', tensor(45112.3203, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6736550674492073, 0.4311221776088496)
('Val: AUC, AUPR, Erros: ', 0.6901309085260006, 0.38601741863063654, 2182.6296)
('Test: AUC, AUPR, Erros: ', 0.6591850483883168, 0.3756598644374567, 2407.232)
((727, 331), (727, 331), 67154.27, 66635.0)
('Error: ', tensor(44946.9453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6779864261169738, 0.43613842260563845)
('Val: AUC, AUPR, Erros: ', 0.693398748378284, 0.3892445849077664, 2163.992)
('Test: AUC, AUPR, Erros: ', 0.672420335537028, 0.3858452511730375, 2383.0015)
((727, 331), (727, 331), 69063.04, 66635.0)
('Error: ', tensor(44842.7539, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6783229040610302, 0.4372636872438177)
('Val: AUC, AUPR, Erros: ', 0.6933996915972003, 0.3930172957499195, 2171.2595)
('Test: AUC, AUPR, Erros: ', 0.6678778737702542, 0.38603079786166344, 2390.13)
((727, 331), (727, 331), 69137.445, 66635.0)
('Error: ', tensor(44672.1289, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6810757085512448, 0.4415815891697979)
('Val: AUC, AUPR, Erros: ', 0.694263729767582, 0.3946328200447757, 2162.0366)
('Test: AUC, AUPR, Erros: ', 0.6736881312614965, 0.3931455982347063, 2380.5122)
((727, 331), (727, 331), 67464.57, 66635.0)
('Error: ', tensor(44484.2188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6850171107801764, 0.4482046780092231)
('Val: AUC, AUPR, Erros: ', 0.7073714444742414, 0.41203232855162647, 2127.2344)
('Test: AUC, AUPR, Erros: ', 0.6821754736931217, 0.40094759511891276, 2360.499)
((727, 331), (727, 331), 67849.375, 66635.0)
('Error: ', tensor(44281.2734, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6894796846210942, 0.45369645197429725)
('Val: AUC, AUPR, Erros: ', 0.7062902673807196, 0.4150256637926651, 2126.646)
('Test: AUC, AUPR, Erros: ', 0.6759711288922339, 0.4010055035618678, 2361.6045)
((727, 331), (727, 331), 68655.086, 66635.0)
('Error: ', tensor(44168.2188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.690423242962339, 0.4552741446363916)
('Val: AUC, AUPR, Erros: ', 0.708917231348665, 0.4221147828568993, 2121.916)
('Test: AUC, AUPR, Erros: ', 0.6826817144131876, 0.40344661194148423, 2353.7705)
Train: 0.6904 0.4553
Test: 0.6827 0.4034
[0.5329275662608995, 0.527399177778645, 0.5286459117931088, 0.5374905983251137, 0.5351604343526325, 0.5358888041359438, 0.5382558397025963, 0.5533933591444321, 0.5525330218872138, 0.5536540718344833, 0.5581008820783859, 0.5624306342752472, 0.563951554360023, 0.5658640107202514, 0.5706872021441758, 0.5769215585570575, 0.5824639614577832, 0.5889657624986531, 0.5921417543696201, 0.5971741889355617, 0.597618033357012, 0.6011374248180869, 0.6053266296092848, 0.6090656195786398, 0.610667380427889, 0.6148018981478705, 0.6164588032337498, 0.617502281964276, 0.6193137220714666, 0.6205281664366086, 0.6255641315103101, 0.6278746278811167, 0.6318557340790039, 0.6327567892222032, 0.6359971641488715, 0.638493955967299, 0.6400939804256826, 0.6432173542182391, 0.6432173542182391, 0.6467371976635632, 0.6491214694481332, 0.6499766491641057, 0.6518356255090303, 0.6556930974170864, 0.6597100659367827, 0.6597100659367827, 0.6605956668423038, 0.6605956668423038, 0.6628867193290007, 0.6643470291460082, 0.6643470291460082, 0.6652686247797193, 0.6652686247797193, 0.6652686247797193, 0.6652686247797193, 0.6652686247797193, 0.6652686247797193, 0.6652686247797193, 0.6679108065133632, 0.6679108065133632, 0.669831485360935, 0.6713269803921569, 0.6713269803921569, 0.6713269803921569, 0.6713269803921569, 0.6713269803921569, 0.6713269803921569, 0.6735148288665168, 0.6735148288665168, 0.6735148288665168, 0.678532453017882, 0.678532453017882, 0.678532453017882, 0.6796608746516147, 0.6796608746516147, 0.6796608746516147, 0.6796608746516147, 0.6796608746516147, 0.6826817144131876, 0.6826817144131876, 0.6826817144131876, 0.6826817144131876, 0.6826817144131876, 0.6826817144131876, 0.6826817144131876, 0.6826817144131876, 0.6826817144131876, 0.6826817144131876, 0.6826817144131876, 0.6826817144131876]
[0.12120249342796592, 0.11864359016032452, 0.11938892443484105, 0.12250363139733299, 0.12548490759097664, 0.12562592306853992, 0.1307528715662491, 0.14868277596913515, 0.15403218480055536, 0.15555650832085485, 0.16271470063917773, 0.16879458110435092, 0.1729318488016625, 0.17463230625318452, 0.18264178260656774, 0.1903728426831939, 0.1973202594160035, 0.20928152898582425, 0.2144567706602514, 0.22237566849580492, 0.22278728478897758, 0.22781280949944194, 0.23655875894234504, 0.24109124606777776, 0.24492541965520293, 0.2532597854006355, 0.25555614782959596, 0.2573894221705685, 0.26047969900692813, 0.26281804115038676, 0.2748443860775961, 0.27927178449262186, 0.2877486556840435, 0.29123157503929026, 0.2983164668898681, 0.3031071544300199, 0.3059275958583799, 0.3146761666705947, 0.3146761666705947, 0.32229774978650466, 0.32698520701714406, 0.32930423151330757, 0.3332613696069918, 0.3407130541880754, 0.3493090493178427, 0.3493090493178427, 0.3510989823044282, 0.3510989823044282, 0.35664965247434766, 0.35955016529476336, 0.35955016529476336, 0.3622627277013668, 0.3622627277013668, 0.3622627277013668, 0.3622627277013668, 0.3622627277013668, 0.3622627277013668, 0.3622627277013668, 0.3680677944578921, 0.3680677944578921, 0.3733527480028307, 0.37628890464190495, 0.37628890464190495, 0.37628890464190495, 0.37628890464190495, 0.37628890464190495, 0.37628890464190495, 0.3804772266709665, 0.3804772266709665, 0.3804772266709665, 0.39181717453742204, 0.39181717453742204, 0.39181717453742204, 0.3943172787324001, 0.3943172787324001, 0.3943172787324001, 0.3943172787324001, 0.3943172787324001, 0.40344661194148423, 0.40344661194148423, 0.40344661194148423, 0.40344661194148423, 0.40344661194148423, 0.40344661194148423, 0.40344661194148423, 0.40344661194148423, 0.40344661194148423, 0.40344661194148423, 0.40344661194148423, 0.40344661194148423]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold20/ATCInchikeySideEffectByDrug.txt_P3_3
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((728, 2666), (40, 2666), (728, 331), (40, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 21953.0)
('VALIDATE SUM PROTEIN TEST: ', 1399.0)
((728, 331), (728, 331), 39664.207, 66099.0)
('Error: ', tensor(52301.5820, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4534512935093903, 0.2492759487757472)
('Val: AUC, AUPR, Erros: ', 0.42505742052049156, 0.2750173539808558, 3069.7688)
('Test: AUC, AUPR, Erros: ', 0.4109275684322699, 0.18316761610449656, 2467.7078)
((728, 331), (728, 331), 71493.125, 66099.0)
('Error: ', tensor(46755.1602, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6106994992387803, 0.366422241408722)
('Val: AUC, AUPR, Erros: ', 0.573418292860685, 0.36189916710207937, 2700.2886)
('Test: AUC, AUPR, Erros: ', 0.5605251333256486, 0.24562930089522933, 2379.4941)
((728, 331), (728, 331), 71372.43, 66099.0)
('Error: ', tensor(46495.1914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6261102225888856, 0.3822084373505988)
('Val: AUC, AUPR, Erros: ', 0.5989591728448286, 0.3817004232995633, 2675.6145)
('Test: AUC, AUPR, Erros: ', 0.5863801869221604, 0.26507202135748065, 2344.9521)
((728, 331), (728, 331), 71308.516, 66099.0)
('Error: ', tensor(46359.8281, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6326379728325243, 0.3921445585736913)
('Val: AUC, AUPR, Erros: ', 0.6044733001052502, 0.38667561474743795, 2670.1033)
('Test: AUC, AUPR, Erros: ', 0.5946521506268319, 0.2728630194616414, 2335.8633)
((728, 331), (728, 331), 71731.766, 66099.0)
('Error: ', tensor(46185.0977, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6423203434624782, 0.40521094332712315)
('Val: AUC, AUPR, Erros: ', 0.6143407632866517, 0.39624963203318575, 2660.1453)
('Test: AUC, AUPR, Erros: ', 0.6075620210288837, 0.2852264711421712, 2323.4458)
((728, 331), (728, 331), 71303.81, 66099.0)
('Error: ', tensor(46086.5547, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6458436675546162, 0.4103211007722947)
('Val: AUC, AUPR, Erros: ', 0.6224560012886082, 0.4088740141715691, 2650.172)
('Test: AUC, AUPR, Erros: ', 0.6092158147430676, 0.28561872287842516, 2321.8755)
((728, 331), (728, 331), 71163.9, 66099.0)
('Error: ', tensor(45996.9023, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6488734143183066, 0.4156066639508258)
('Val: AUC, AUPR, Erros: ', 0.6268289759255234, 0.4115201104319063, 2644.8796)
('Test: AUC, AUPR, Erros: ', 0.6152685663625166, 0.294709837962735, 2312.0737)
((728, 331), (728, 331), 71254.48, 66099.0)
('Error: ', tensor(45860.0859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6539864029487851, 0.42453756997064435)
('Val: AUC, AUPR, Erros: ', 0.6306018542032747, 0.4182207261120547, 2639.1362)
('Test: AUC, AUPR, Erros: ', 0.6223493273144715, 0.30256834611717703, 2304.9958)
