class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug, drugFeatures = None):


        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]
            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xProtein = self.nodesEmbedding(proteinNodes)

            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)




            iLevel = 0
            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv1(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            iLevel += 1

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv2(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv2g(xAtom, edge_index))

            iLevel += 1
            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv3(xAtom, edge_index, xProtein, proteinWeight))
            else:
                xAtom = F.relu(self.conv3g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xDrug = x1 + x2 + x3

            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)
            xDrug = self.lin2(xDrug)
            xDrug = self.act2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x = self.convD1(x, drugEdges)
            x = F.relu(x)
            x = self.convD2(x, drugEdges)
            x = F.relu(x)

        if config.SE_GRAPH:
            # Conv SE:
            x = self.convS1(x, seEdges)
            x = F.relu(x)
            # x = self.convS2(x, seEdges)
            # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Inner mode: ', True)
('Cross Prob: ', 0.5)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7f0c65c3f610>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19906.0)
('VALIDATE SUM PROTEIN TEST: ', 2291.0)
((646, 331), (646, 331), 85979.13, 58595.0)
('Error: ', tensor(50336.4453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4456488727369952, 0.24279508747373926)
('Val: AUC, AUPR, Erros: ', 0.456465275186564, 0.28182934126382225, 6253.367)
('Test: AUC, AUPR, Erros: ', 0.4347839689036367, 0.21927513577304245, 6011.645)
((646, 331), (646, 331), 44697.434, 58595.0)
('Error: ', tensor(42747.3828, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5877129891254518, 0.3469690619798471)
('Val: AUC, AUPR, Erros: ', 0.5796217461741251, 0.3583966444320885, 5445.96)
('Test: AUC, AUPR, Erros: ', 0.5779317935815523, 0.3082085334991452, 5086.0635)
((646, 331), (646, 331), 52703.62, 58595.0)
('Error: ', tensor(39584.2852, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7025258370796946, 0.5195558497445283)
('Val: AUC, AUPR, Erros: ', 0.6756855574731881, 0.49400315426351826, 5090.764)
('Test: AUC, AUPR, Erros: ', 0.6843077425294806, 0.47540021246688513, 4750.9478)
((646, 331), (646, 331), 49583.63, 58595.0)
('Error: ', tensor(37847.4336, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7331312994468381, 0.5563613618340117)
('Val: AUC, AUPR, Erros: ', 0.695944963516093, 0.5192539674049163, 4928.5566)
('Test: AUC, AUPR, Erros: ', 0.708559109651417, 0.5069087305662552, 4560.3633)
((646, 331), (646, 331), 50173.434, 58595.0)
('Error: ', tensor(36299.3164, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7453108312924572, 0.5709096974158542)
('Val: AUC, AUPR, Erros: ', 0.7040908407081907, 0.5269586386508881, 4787.497)
('Test: AUC, AUPR, Erros: ', 0.7217850169530587, 0.5231597785472641, 4399.9653)
((646, 331), (646, 331), 50599.547, 58595.0)
('Error: ', tensor(35382.6562, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7550431805594897, 0.5844679172912013)
('Val: AUC, AUPR, Erros: ', 0.7085561147895794, 0.5301289819463461, 4730.785)
('Test: AUC, AUPR, Erros: ', 0.7258730567432247, 0.5270645166770342, 4342.093)
((646, 331), (646, 331), 51566.793, 58595.0)
('Error: ', tensor(34605.7188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7648056154363683, 0.599358675042722)
('Val: AUC, AUPR, Erros: ', 0.7124557809023231, 0.5342260540926432, 4692.1646)
('Test: AUC, AUPR, Erros: ', 0.7276339693371999, 0.5299247371336726, 4315.794)
((646, 331), (646, 331), 51169.168, 58595.0)
('Error: ', tensor(33983.3164, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.775875229033695, 0.6161828419373498)
('Val: AUC, AUPR, Erros: ', 0.7135568428237725, 0.5325111834343351, 4695.454)
('Test: AUC, AUPR, Erros: ', 0.7273351994700051, 0.5286425074819634, 4315.3584)
((646, 331), (646, 331), 50805.75, 58595.0)
('Error: ', tensor(33391.9414, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7865373314589311, 0.630862571276988)
('Val: AUC, AUPR, Erros: ', 0.7107195022401211, 0.5248306050862961, 4721.834)
('Test: AUC, AUPR, Erros: ', 0.726246889550093, 0.525229252957853, 4323.8735)
((646, 331), (646, 331), 51665.53, 58595.0)
('Error: ', tensor(32798.2461, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7950818087426005, 0.642583771322539)
('Val: AUC, AUPR, Erros: ', 0.7067495815184859, 0.5169722005621604, 4749.88)
('Test: AUC, AUPR, Erros: ', 0.7238650130655145, 0.5212058354067943, 4336.1885)
((646, 331), (646, 331), 51871.965, 58595.0)
('Error: ', tensor(32353.3086, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8020958501617619, 0.6525386497081055)
('Val: AUC, AUPR, Erros: ', 0.6980985356289849, 0.5078728866146573, 4796.9414)
('Test: AUC, AUPR, Erros: ', 0.7213053976342585, 0.5145435310993418, 4361.8984)
Train: 0.7648 0.5994
Test: 0.7276 0.5299
[0.5387238155173963, 0.5504705892995372, 0.559485775767086, 0.5608745987634896, 0.5708848335358665, 0.5757394610305802, 0.5807572554082312, 0.5843950337831643, 0.5906972497832204, 0.5937440207227058, 0.594633849481523, 0.5979440906899081, 0.6037969139742981, 0.6057446934833827, 0.6119867339042782, 0.6188000682745911, 0.6211155444000817, 0.6249089757799564, 0.6296835208248163, 0.6318213286586598, 0.6326604366724395, 0.6358158734231034, 0.6392051325264059, 0.6409464416988813, 0.6424107018743228, 0.6478189974786367, 0.6509383190316128, 0.6509538329164484, 0.6535030262409619, 0.6548666925941371, 0.6608155177551567, 0.6626195976614419, 0.6654875554614317, 0.6681737288249238, 0.6732837485785996, 0.6749417771270898, 0.6758071345359964, 0.6794340863525562, 0.6794340863525562, 0.6816820820440419, 0.6824640684838927, 0.685096449884479, 0.6861031940221456, 0.6913467967177856, 0.6949855405343538, 0.6949855405343538, 0.6964798957578364, 0.6964798957578364, 0.6997133840238337, 0.7010219536977891, 0.7010219536977891, 0.7043686829905766, 0.7043686829905766, 0.7043686829905766, 0.7043686829905766, 0.7043686829905766, 0.7043686829905766, 0.7043686829905766, 0.708214187615745, 0.708214187615745, 0.7102178519255078, 0.7118877063623645, 0.7118877063623645, 0.7118877063623645, 0.7118877063623645, 0.7118877063623645, 0.7118877063623645, 0.7147617147762497, 0.7147617147762497, 0.7147617147762497, 0.7225126372148962, 0.7225126372148962, 0.7225126372148962, 0.724769094622006, 0.724769094622006, 0.724769094622006, 0.724769094622006, 0.724769094622006, 0.7276339693371999, 0.7276339693371999, 0.7276339693371999, 0.7276339693371999, 0.7276339693371999, 0.7276339693371999, 0.7276339693371999, 0.7276339693371999, 0.7276339693371999, 0.7276339693371999, 0.7276339693371999, 0.7276339693371999]
[0.11961005567459172, 0.13321594624969646, 0.13858466334897634, 0.14461204005095865, 0.15361500461160793, 0.16091024703474, 0.17058039871669722, 0.18111551920031316, 0.19271604841287465, 0.19760659351124418, 0.20100616162555068, 0.20860425878877198, 0.21876112065071157, 0.2204410144110511, 0.2332483816994383, 0.24936517809836514, 0.25014360898530663, 0.2552175497721536, 0.2670191510060424, 0.2703561264528246, 0.27253803578214975, 0.27754312997901576, 0.2839578460153292, 0.28493118095504144, 0.28810138711699196, 0.3014428107235503, 0.3084663247263665, 0.3055548571121611, 0.31202328349187053, 0.3172136022775382, 0.3345364239735239, 0.3363032557366852, 0.3417709584969972, 0.3499928575664749, 0.365566978022215, 0.37000007313554173, 0.3725033462154807, 0.381156542789394, 0.381156542789394, 0.3869432146898669, 0.38816613950462164, 0.39678231278697373, 0.40050535950999666, 0.41449462129305314, 0.42494031561402135, 0.42494031561402135, 0.4283345700155313, 0.4283345700155313, 0.4394007797682858, 0.44140581185854477, 0.44140581185854477, 0.45192467019894833, 0.45192467019894833, 0.45192467019894833, 0.45192467019894833, 0.45192467019894833, 0.45192467019894833, 0.45192467019894833, 0.4635657946975615, 0.4635657946975615, 0.46988144468146864, 0.4748727719102423, 0.4748727719102423, 0.4748727719102423, 0.4748727719102423, 0.4748727719102423, 0.4748727719102423, 0.4862547748215315, 0.4862547748215315, 0.4862547748215315, 0.5132552147421849, 0.5132552147421849, 0.5132552147421849, 0.5200135626649414, 0.5200135626649414, 0.5200135626649414, 0.5200135626649414, 0.5200135626649414, 0.5299247371336726, 0.5299247371336726, 0.5299247371336726, 0.5299247371336726, 0.5299247371336726, 0.5299247371336726, 0.5299247371336726, 0.5299247371336726, 0.5299247371336726, 0.5299247371336726, 0.5299247371336726, 0.5299247371336726]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19911.0)
('VALIDATE SUM PROTEIN TEST: ', 2446.0)
((646, 331), (646, 331), 79565.56, 58221.0)
('Error: ', tensor(48911.6875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4471783114037355, 0.24302867907391607)
('Val: AUC, AUPR, Erros: ', 0.4834727780854874, 0.2507342180186417, 6080.937)
('Test: AUC, AUPR, Erros: ', 0.45636304993002164, 0.2691050688327145, 6143.033)
((646, 331), (646, 331), 57579.49, 58221.0)
('Error: ', tensor(41441.1797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5978677434840332, 0.35932304799249176)
('Val: AUC, AUPR, Erros: ', 0.5780631280339863, 0.3411138459579999, 5179.3765)
('Test: AUC, AUPR, Erros: ', 0.5757777498107042, 0.3454082605981896, 5324.569)
((646, 331), (646, 331), 57123.98, 58221.0)
('Error: ', tensor(40328.8008, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6606168892142674, 0.43367342928536334)
('Val: AUC, AUPR, Erros: ', 0.6419330373764824, 0.4088262223695843, 5046.432)
('Test: AUC, AUPR, Erros: ', 0.6323083235859179, 0.40974748197428024, 5206.445)
((646, 331), (646, 331), 53870.082, 58221.0)
('Error: ', tensor(39268.7930, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6966726762674145, 0.4890363714124056)
('Val: AUC, AUPR, Erros: ', 0.6750075237501318, 0.4615179082104284, 4925.94)
('Test: AUC, AUPR, Erros: ', 0.6724828494070252, 0.4659914655641856, 5080.614)
((646, 331), (646, 331), 51757.086, 58221.0)
('Error: ', tensor(38136.6562, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7138996275172546, 0.518406868652416)
('Val: AUC, AUPR, Erros: ', 0.7005502337607052, 0.4962593629565918, 4777.9946)
('Test: AUC, AUPR, Erros: ', 0.6867535767269987, 0.48960662060298377, 4970.576)
((646, 331), (646, 331), 52560.83, 58221.0)
('Error: ', tensor(36883.4062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7249916219655157, 0.5364208198249788)
('Val: AUC, AUPR, Erros: ', 0.7138820021974793, 0.5153408118486891, 4630.9165)
('Test: AUC, AUPR, Erros: ', 0.695039786999575, 0.5026025301584112, 4850.493)
((646, 331), (646, 331), 53632.31, 58221.0)
('Error: ', tensor(36163.5977, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7303834824235619, 0.5447733324951648)
('Val: AUC, AUPR, Erros: ', 0.7164127171845004, 0.5202941021020657, 4564.9785)
('Test: AUC, AUPR, Erros: ', 0.7022007354664965, 0.5132573320199333, 4771.176)
((646, 331), (646, 331), 53589.387, 58221.0)
('Error: ', tensor(35823.8008, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7345709741916104, 0.5495052224441528)
('Val: AUC, AUPR, Erros: ', 0.721061531547504, 0.5243611951062358, 4528.133)
('Test: AUC, AUPR, Erros: ', 0.7049129011388969, 0.5168613669812195, 4745.8247)
((646, 331), (646, 331), 54010.746, 58221.0)
('Error: ', tensor(35553.6133, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7388423468345687, 0.5549314523615065)
('Val: AUC, AUPR, Erros: ', 0.7232654106048364, 0.5294095841803071, 4502.878)
('Test: AUC, AUPR, Erros: ', 0.7078491618143717, 0.5218597141353927, 4717.322)
((646, 331), (646, 331), 55178.207, 58221.0)
('Error: ', tensor(35305.8359, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7422029511796286, 0.5595436694394451)
('Val: AUC, AUPR, Erros: ', 0.7288091479730014, 0.5349814382941347, 4468.067)
('Test: AUC, AUPR, Erros: ', 0.7066385183136519, 0.5216958708571507, 4713.8896)
((646, 331), (646, 331), 52822.527, 58221.0)
('Error: ', tensor(35293.9609, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7453099215602164, 0.5643391001791871)
('Val: AUC, AUPR, Erros: ', 0.7310133424098373, 0.5369949667777105, 4468.5806)
('Test: AUC, AUPR, Erros: ', 0.7093950084207447, 0.5248409916894321, 4717.3496)
Train: 0.7422 0.5595
Test: 0.7066 0.5217
[0.5224333720448257, 0.5279159176256769, 0.5400911526449073, 0.5452061782290974, 0.5530965534873706, 0.5549441735599516, 0.5555096095230787, 0.5661837698683654, 0.5735996115002042, 0.574179383952966, 0.5759773337102918, 0.5782757531125621, 0.5805776036251484, 0.5832274189188834, 0.5898532282631905, 0.5926299926198899, 0.5979895788008853, 0.6026585202588066, 0.6061984172886429, 0.6081830923664395, 0.6088712838806838, 0.6119475147708628, 0.6131493559963752, 0.6149767208237704, 0.6165529184942415, 0.6230185025254176, 0.6252688207535424, 0.6258791553694905, 0.6281393780502157, 0.6294442923389147, 0.6367445849295511, 0.63973124345024, 0.6441668793686741, 0.6476172810392916, 0.6522632053423988, 0.6536688380263181, 0.6544688584493915, 0.6585973156449961, 0.6585973156449961, 0.6610139861971792, 0.6620133669466941, 0.6649244397269355, 0.6668078606524894, 0.6727887934585526, 0.6762185591680923, 0.6762185591680923, 0.6769564715451067, 0.6769564715451067, 0.6796648694722212, 0.6816697390282401, 0.6816697390282401, 0.6848579988214252, 0.6848579988214252, 0.6848579988214252, 0.6848579988214252, 0.6848579988214252, 0.6848579988214252, 0.6848579988214252, 0.6881920987419421, 0.6881920987419421, 0.6899322311027543, 0.6920385709508494, 0.6920385709508494, 0.6920385709508494, 0.6920385709508494, 0.6920385709508494, 0.6920385709508494, 0.6940190868092151, 0.6940190868092151, 0.6940190868092151, 0.7012697786015806, 0.7012697786015806, 0.7012697786015806, 0.7038062365039204, 0.7038062365039204, 0.7038062365039204, 0.7038062365039204, 0.7038062365039204, 0.7066385183136519, 0.7066385183136519, 0.7066385183136519, 0.7066385183136519, 0.7066385183136519, 0.7066385183136519, 0.7066385183136519, 0.7066385183136519, 0.7066385183136519, 0.7066385183136519, 0.7066385183136519, 0.7066385183136519]
[0.14038248766116296, 0.1479112754888174, 0.16356504743974912, 0.17000070570183995, 0.1838862168005787, 0.18776244393574196, 0.19395123254777952, 0.2066201312981369, 0.21946726633966165, 0.22027486251577488, 0.22360416985429968, 0.22727658969257053, 0.23067692925172884, 0.23556849085499815, 0.24616474610873273, 0.2539496473136887, 0.2620354337403389, 0.26830158037480556, 0.2746138420578593, 0.27734754359708463, 0.27900197710821034, 0.2840940913622934, 0.28600858197538825, 0.2882583142860049, 0.2913510619159596, 0.3083420804230961, 0.3134117059943571, 0.3140143119712184, 0.31993509996859554, 0.32444947740673796, 0.34120844827261204, 0.3460681360486416, 0.3535661680531965, 0.361799348060814, 0.3739524337063543, 0.37633380535268957, 0.3765878765149024, 0.3858335500135988, 0.3858335500135988, 0.39066771789062815, 0.3931304910569266, 0.400734770790974, 0.4071379941255407, 0.4224299580296779, 0.43036930322738315, 0.43036930322738315, 0.4315838078493019, 0.4315838078493019, 0.4376977897117754, 0.44360247948565956, 0.44360247948565956, 0.45247446620619747, 0.45247446620619747, 0.45247446620619747, 0.45247446620619747, 0.45247446620619747, 0.45247446620619747, 0.45247446620619747, 0.462464965452702, 0.462464965452702, 0.46796342079427566, 0.4741068028313411, 0.4741068028313411, 0.4741068028313411, 0.4741068028313411, 0.4741068028313411, 0.4741068028313411, 0.4802620265005719, 0.4802620265005719, 0.4802620265005719, 0.5037055226457415, 0.5037055226457415, 0.5037055226457415, 0.5122655226028506, 0.5122655226028506, 0.5122655226028506, 0.5122655226028506, 0.5122655226028506, 0.5216958708571507, 0.5216958708571507, 0.5216958708571507, 0.5216958708571507, 0.5216958708571507, 0.5216958708571507, 0.5216958708571507, 0.5216958708571507, 0.5216958708571507, 0.5216958708571507, 0.5216958708571507, 0.5216958708571507]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_2
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19946.0)
('VALIDATE SUM PROTEIN TEST: ', 2286.0)
((646, 331), (646, 331), 48634.63, 58507.0)
('Error: ', tensor(45147.3984, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4377956040261939, 0.24050910070256135)
('Val: AUC, AUPR, Erros: ', 0.46873504405020144, 0.26014316013203903, 5489.3677)
('Test: AUC, AUPR, Erros: ', 0.4784970923568961, 0.24903381792054147, 5523.24)
((646, 331), (646, 331), 61008.543, 58507.0)
('Error: ', tensor(41448.6172, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6165147726896716, 0.3698035872016238)
('Val: AUC, AUPR, Erros: ', 0.6176513145653151, 0.3621519396017241, 5144.752)
('Test: AUC, AUPR, Erros: ', 0.6070168197488065, 0.3454455677332044, 5157.1943)
((646, 331), (646, 331), 59634.824, 58507.0)
('Error: ', tensor(40707.4258, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.660959851653265, 0.42081814730119754)
('Val: AUC, AUPR, Erros: ', 0.6535210630512378, 0.40154438324423736, 5067.777)
('Test: AUC, AUPR, Erros: ', 0.6460425138090864, 0.39576672425586157, 5073.671)
((646, 331), (646, 331), 61423.754, 58507.0)
('Error: ', tensor(40262.2891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6762727399749717, 0.4374373407292259)
('Val: AUC, AUPR, Erros: ', 0.6635316483696245, 0.4134519837483941, 5029.716)
('Test: AUC, AUPR, Erros: ', 0.6584210282069191, 0.4138280276191958, 5030.441)
((646, 331), (646, 331), 63581.746, 58507.0)
('Error: ', tensor(39836.5625, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6847597137297374, 0.4503775403742879)
('Val: AUC, AUPR, Erros: ', 0.6703502169239443, 0.4294410528484929, 4989.451)
('Test: AUC, AUPR, Erros: ', 0.6662431627849805, 0.42391056069805194, 4989.3003)
((646, 331), (646, 331), 64349.957, 58507.0)
('Error: ', tensor(39400.8594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.689460994035278, 0.45842037090470744)
('Val: AUC, AUPR, Erros: ', 0.6726029673113916, 0.43546846244963355, 4947.8423)
('Test: AUC, AUPR, Erros: ', 0.6676374343082212, 0.42736855908063975, 4955.022)
((646, 331), (646, 331), 64746.473, 58507.0)
('Error: ', tensor(38969.4375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6926027836284604, 0.46714929456397253)
('Val: AUC, AUPR, Erros: ', 0.6856587830381111, 0.45412651051652, 4871.264)
('Test: AUC, AUPR, Erros: ', 0.6773472002606267, 0.44215784226475585, 4893.3994)
((646, 331), (646, 331), 64341.676, 58507.0)
('Error: ', tensor(38423.3359, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6988794766271751, 0.48031482827886524)
('Val: AUC, AUPR, Erros: ', 0.6871614210031676, 0.46058910679075404, 4825.089)
('Test: AUC, AUPR, Erros: ', 0.6806602442264856, 0.4533481891074141, 4840.268)
((646, 331), (646, 331), 63793.31, 58507.0)
('Error: ', tensor(37835.7617, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7049006597825673, 0.4950932806795304)
('Val: AUC, AUPR, Erros: ', 0.6915383930478699, 0.47441074504879, 4762.9644)
('Test: AUC, AUPR, Erros: ', 0.6881437781563025, 0.46937606476371324, 4766.8203)
((646, 331), (646, 331), 64632.15, 58507.0)
('Error: ', tensor(37370.5742, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7103658888589596, 0.5070882342230113)
('Val: AUC, AUPR, Erros: ', 0.6975461567280715, 0.4885567779009468, 4710.0674)
('Test: AUC, AUPR, Erros: ', 0.6924051009608458, 0.4795470005576858, 4730.9575)
((646, 331), (646, 331), 60195.137, 58507.0)
('Error: ', tensor(36831.8281, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7171664607169281, 0.5209837120087545)
('Val: AUC, AUPR, Erros: ', 0.7046929485610931, 0.501847684785359, 4631.307)
('Test: AUC, AUPR, Erros: ', 0.7015673220285821, 0.4958054859468811, 4643.826)
Train: 0.7172 0.5210
Test: 0.7016 0.4958
[0.5175719531073423, 0.4994192841623953, 0.5061734845380975, 0.5005139579548935, 0.5071994208936731, 0.5096597230031987, 0.5107183289980919, 0.5181542833761617, 0.522749623911517, 0.5250631021436846, 0.536146622937874, 0.5398694029527955, 0.5430142865228619, 0.544652812658856, 0.5536770527795726, 0.5612584463678891, 0.5690591339953344, 0.5759317728299113, 0.5816033783887345, 0.5879470765174238, 0.5893566025620626, 0.5969180924075979, 0.6011337508763798, 0.6071246388864016, 0.6095076343244361, 0.6159255607973628, 0.6184170843980085, 0.6197732651622264, 0.6222523473536284, 0.6232149930448896, 0.6301509452329873, 0.633562916486086, 0.6387174377247333, 0.6395031814130645, 0.6447476303769131, 0.6474831601276043, 0.6485900998146961, 0.6535571841532759, 0.6535571841532759, 0.6563910825814169, 0.6576933315036834, 0.659648108024282, 0.6613498451069125, 0.6665337698142874, 0.6720751505200009, 0.6720751505200009, 0.673032721114238, 0.673032721114238, 0.6755610147028858, 0.6771821622804176, 0.6771821622804176, 0.6792885694563594, 0.6792885694563594, 0.6792885694563594, 0.6792885694563594, 0.6792885694563594, 0.6792885694563594, 0.6792885694563594, 0.6834210012084425, 0.6834210012084425, 0.6847671422230367, 0.686567301473493, 0.686567301473493, 0.686567301473493, 0.686567301473493, 0.686567301473493, 0.686567301473493, 0.6889749782618583, 0.6889749782618583, 0.6889749782618583, 0.6963755779966981, 0.6963755779966981, 0.6963755779966981, 0.698898753533298, 0.698898753533298, 0.698898753533298, 0.698898753533298, 0.698898753533298, 0.7015673220285821, 0.7015673220285821, 0.7015673220285821, 0.7015673220285821, 0.7015673220285821, 0.7015673220285821, 0.7015673220285821, 0.7015673220285821, 0.7015673220285821, 0.7015673220285821, 0.7015673220285821, 0.7015673220285821]
[0.11825404069264157, 0.12106271964603578, 0.12556265909774528, 0.12805094785547502, 0.13635170695552304, 0.14013684093426992, 0.14343543617388493, 0.1519949766758339, 0.15946874808223643, 0.16155831717833952, 0.1750164851538299, 0.18071907245784796, 0.1852486106313971, 0.1864408853218637, 0.19610304834365108, 0.205533493616403, 0.21482602313167276, 0.22344738730804123, 0.2329369591714, 0.24345602319388604, 0.2451889505196246, 0.2579112266475596, 0.2645408281139574, 0.27380908921976455, 0.27815608366892264, 0.2905854284398159, 0.2937221100336866, 0.29659333461740656, 0.30135320245701275, 0.302755993498246, 0.3164589615911589, 0.32377358891380126, 0.3331583876439392, 0.33758418407639695, 0.3510671127900149, 0.356692716364705, 0.35865589636583883, 0.36863061693646815, 0.36863061693646815, 0.37451557788913753, 0.37787740712238405, 0.38147195244079884, 0.38554333899371046, 0.39586094263716126, 0.41229364263881774, 0.41229364263881774, 0.4138306020593165, 0.4138306020593165, 0.41953334301931633, 0.42301143540004243, 0.42301143540004243, 0.42744267697861765, 0.42744267697861765, 0.42744267697861765, 0.42744267697861765, 0.42744267697861765, 0.42744267697861765, 0.42744267697861765, 0.43862274347502406, 0.43862274347502406, 0.4417159569925503, 0.44499190681860734, 0.44499190681860734, 0.44499190681860734, 0.44499190681860734, 0.44499190681860734, 0.44499190681860734, 0.45390691616570256, 0.45390691616570256, 0.45390691616570256, 0.479356988220636, 0.479356988220636, 0.479356988220636, 0.4870448943430821, 0.4870448943430821, 0.4870448943430821, 0.4870448943430821, 0.4870448943430821, 0.4958054859468811, 0.4958054859468811, 0.4958054859468811, 0.4958054859468811, 0.4958054859468811, 0.4958054859468811, 0.4958054859468811, 0.4958054859468811, 0.4958054859468811, 0.4958054859468811, 0.4958054859468811, 0.4958054859468811]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_P3_3
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((647, 2666), (81, 2666), (647, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19714.0)
('VALIDATE SUM PROTEIN TEST: ', 2411.0)
((647, 331), (647, 331), 42569.49, 58338.0)
('Error: ', tensor(44813.7734, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.45309278024979677, 0.2457838175441362)
('Val: AUC, AUPR, Erros: ', 0.46314717368837977, 0.2526646570421894, 5603.88)
('Test: AUC, AUPR, Erros: ', 0.48022049875898387, 0.26336261318291404, 5488.4634)
