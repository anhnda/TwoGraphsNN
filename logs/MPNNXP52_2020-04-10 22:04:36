class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD3 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.L1C = Linear(config.CHEM_FINGERPRINT_SIZE + config.EMBED_DIM, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=1)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=1)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.conv4 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv4g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool4 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.conv5 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv5g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool5 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug,
                drugFeatures=None):

        xAtomProtein, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
        xAtomProtein = self.nodesEmbedding(xAtomProtein)
        xAtomProtein = xAtomProtein.squeeze(1)

        xAtomProtein = F.relu(self.conv1g(xAtomProtein, edge_index))
        xAtomProtein, edge_index, _, batch, _, _ = self.pool1(xAtomProtein, edge_index, None, batch)
        x1 = torch.cat([gmp(xAtomProtein, batch), gap(xAtomProtein, batch)], dim=1)

        xAtomProtein = F.relu(self.conv2g(xAtomProtein, edge_index))
        xAtomProtein, edge_index, _, batch, _, _ = self.pool2(xAtomProtein, edge_index, None, batch)
        x2 = torch.cat([gmp(xAtomProtein, batch), gap(xAtomProtein, batch)], dim=1)

        xAtomProtein = F.relu(self.conv3g(xAtomProtein, edge_index))
        xAtomProtein, edge_index, _, batch, _, _ = self.pool3(xAtomProtein, edge_index, None, batch)
        x3 = torch.cat([gmp(xAtomProtein, batch), gap(xAtomProtein, batch)], dim=1)

        xDrugProtein = x1 + x2 + x3
        xDrugProtein = self.lin1(xDrugProtein)
        xDrugProtein = self.act1(xDrugProtein)

        # xDrug = self.lin2(xDrug)
        # xDrug = self.act2(xDrug)

        nProtein = len(proteinNodes)
        x = self.nodesEmbedding(x[nDrug+nProtein:])

        x = x.squeeze(1)

        x = torch.cat((xDrugProtein, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)

        # x = self.convD3(x, drugEdges)
        # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', False, True, False)
('Drug Features: ', True)
('Combine Features: ', False)
('Inner mode: ', False)
('Cross Prob: ', 0.001)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7fd289e0a250>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
KFold: 5 x 10
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19463.0)
('VALIDATE SUM PROTEIN TEST: ', 2334.0)
((646, 331), (646, 331), 25136.418, 59640.0)
('Error: ', tensor(48446.3984, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5488044588076368, 0.3097643861376121)
('Val: AUC, AUPR, Erros: ', 0.48428473644488523, 0.2330348108254398, 5240.9287)
('Test: AUC, AUPR, Erros: ', 0.5478780260887657, 0.27615796008034194, 5743.267)
((646, 331), (646, 331), 61924.566, 59640.0)
('Error: ', tensor(43283.1328, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5705966473154364, 0.3334701483296988)
('Val: AUC, AUPR, Erros: ', 0.5522255099966178, 0.28843949338881697, 5117.2275)
('Test: AUC, AUPR, Erros: ', 0.5799738328865736, 0.3159071404684647, 5219.0923)
((646, 331), (646, 331), 56141.06, 59640.0)
('Error: ', tensor(38098.6484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7061114177270003, 0.51001803423613)
('Val: AUC, AUPR, Erros: ', 0.6938643453014128, 0.44341746654566994, 4390.2236)
('Test: AUC, AUPR, Erros: ', 0.7042055783833138, 0.47416980818913923, 4622.91)
((646, 331), (646, 331), 60693.51, 59640.0)
('Error: ', tensor(36151.1641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7416194332077584, 0.5517654574145718)
('Val: AUC, AUPR, Erros: ', 0.7331167413568472, 0.4846064528120367, 4382.1104)
('Test: AUC, AUPR, Erros: ', 0.7319800491902198, 0.5097556838752333, 4498.098)
((646, 331), (646, 331), 60426.133, 59640.0)
('Error: ', tensor(35324.7344, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7551404731446894, 0.5742671338020257)
('Val: AUC, AUPR, Erros: ', 0.7379947839278362, 0.4946531550312408, 4325.9673)
('Test: AUC, AUPR, Erros: ', 0.7387016953397995, 0.5212801747339622, 4454.7275)
((646, 331), (646, 331), 64231.188, 59640.0)
('Error: ', tensor(35603.3125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7579381814083757, 0.5819163285555785)
('Val: AUC, AUPR, Erros: ', 0.7343281059133103, 0.5012521118484684, 4515.2686)
('Test: AUC, AUPR, Erros: ', 0.7371344027670725, 0.5244407892177265, 4591.8047)
((646, 331), (646, 331), 74301.6, 59640.0)
('Error: ', tensor(36234.5195, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7654346480214742, 0.5890799766528837)
('Val: AUC, AUPR, Erros: ', 0.7401224182514433, 0.49716779038015024, 5023.42)
('Test: AUC, AUPR, Erros: ', 0.7410703850694437, 0.5230089552368804, 4916.801)
((646, 331), (646, 331), 66190.52, 59640.0)
('Error: ', tensor(34304.8242, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7756744880948662, 0.6027846475865488)
('Val: AUC, AUPR, Erros: ', 0.736923265047009, 0.49219818808984284, 4545.568)
('Test: AUC, AUPR, Erros: ', 0.7418568738036829, 0.51932364234759, 4605.874)
((646, 331), (646, 331), 54057.613, 59640.0)
('Error: ', tensor(33713.1445, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7855570578378411, 0.6226391971998092)
('Val: AUC, AUPR, Erros: ', 0.7362313134252766, 0.4956754757172769, 4185.575)
('Test: AUC, AUPR, Erros: ', 0.7384301117096443, 0.5138524297038585, 4482.496)
((646, 331), (646, 331), 63033.715, 59640.0)
('Error: ', tensor(33037.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7915145923665688, 0.6347678173963414)
('Val: AUC, AUPR, Erros: ', 0.7288360331690936, 0.4830447392746081, 4541.9795)
('Test: AUC, AUPR, Erros: ', 0.7372152538161667, 0.509270112326818, 4703.348)
((646, 331), (646, 331), 62617.383, 59640.0)
('Error: ', tensor(32653.9863, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7967758250696245, 0.6443927325007698)
('Val: AUC, AUPR, Erros: ', 0.7259867231290187, 0.4743541808132084, 4683.16)
('Test: AUC, AUPR, Erros: ', 0.7344939490489053, 0.5041387830313644, 4740.9316)
((646, 331), (646, 331), 60003.008, 59640.0)
('Error: ', tensor(32388.4375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.801036509474481, 0.6522882334288043)
('Val: AUC, AUPR, Erros: ', 0.7210753122636655, 0.45823244460379803, 4848.647)
('Test: AUC, AUPR, Erros: ', 0.7314588856507749, 0.49459949605469644, 4764.005)
((646, 331), (646, 331), 61453.36, 59640.0)
('Error: ', tensor(32153.8574, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8036672242148883, 0.6576103546936285)
('Val: AUC, AUPR, Erros: ', 0.7180907282914717, 0.44555999430355425, 5200.121)
('Test: AUC, AUPR, Erros: ', 0.7259686470784974, 0.4850498759413362, 4902.897)
((646, 331), (646, 331), 61467.453, 59640.0)
('Error: ', tensor(31990.1328, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8059796047394149, 0.6619099452193994)
('Val: AUC, AUPR, Erros: ', 0.7111778057857223, 0.42893698986989354, 5657.1846)
('Test: AUC, AUPR, Erros: ', 0.7179324878229244, 0.47034915035706093, 5085.2295)
((646, 331), (646, 331), 63061.12, 59640.0)
('Error: ', tensor(31869.0254, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8080315131702707, 0.6651164716953263)
('Val: AUC, AUPR, Erros: ', 0.7115918202396038, 0.42163369676605145, 6259.829)
('Test: AUC, AUPR, Erros: ', 0.7111407327686337, 0.46080536066449795, 5308.4883)
((646, 331), (646, 331), 62502.332, 59640.0)
('Error: ', tensor(31775.5078, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.808618326469612, 0.6665481619777468)
('Val: AUC, AUPR, Erros: ', 0.7096434696711078, 0.41688141930937617, 6730.9155)
('Test: AUC, AUPR, Erros: ', 0.7046430376042868, 0.4520064529594331, 5479.157)
((646, 331), (646, 331), 59243.48, 59640.0)
('Error: ', tensor(31709.3828, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8111364284357558, 0.6701030731004392)
('Val: AUC, AUPR, Erros: ', 0.7045379071818707, 0.40588357294685484, 7200.9688)
('Test: AUC, AUPR, Erros: ', 0.7065147714946053, 0.4446721067077667, 5576.741)
Train: 0.7856 0.6226
Test: 0.7384 0.5139
[0.5905776534913811, 0.6195599237951848, 0.6264637240975368, 0.6263411350395472, 0.6306869524826102, 0.6294084154719236, 0.6364778464178903, 0.6410805129830768, 0.6468061237138485, 0.6450368942172483, 0.6504620007209301, 0.652779785162797, 0.6555328955222529, 0.6566587882364077, 0.6594939467705856, 0.6612174906664543, 0.6628569284909489, 0.6675608337989446, 0.6690537015324685, 0.6713456461603151, 0.6714592631945832, 0.674576552658952, 0.6763930566925245, 0.6790462212907837, 0.6800613678736521, 0.6813839935071779, 0.682938487480603, 0.6834468097207036, 0.685152776326873, 0.6859816587702614, 0.690395836472293, 0.6916838317080155, 0.694980558282118, 0.6962806865338302, 0.6991340539458462, 0.7004496829308282, 0.7009485819532161, 0.7036493840970995, 0.7036493840970995, 0.7053000930321098, 0.7056768822939752, 0.7071977282995073, 0.7081548027938703, 0.7117005256653389, 0.7143811181426546, 0.7143811181426546, 0.7153101638353104, 0.7153101638353104, 0.7173601005415275, 0.7185990247686475, 0.7185990247686475, 0.7207305408817839, 0.7207305408817839, 0.7207305408817839, 0.7207305408817839, 0.7207305408817839, 0.7207305408817839, 0.7207305408817839, 0.723358056891557, 0.723358056891557, 0.7245891546882786, 0.726119476045058, 0.726119476045058, 0.726119476045058, 0.726119476045058, 0.726119476045058, 0.726119476045058, 0.7280059403787369, 0.7280059403787369, 0.7280059403787369, 0.7341263862401073, 0.7341263862401073, 0.7341263862401073, 0.7360544203690463, 0.7360544203690463, 0.7360544203690463, 0.7360544203690463, 0.7360544203690463, 0.7384301117096443, 0.7384301117096443, 0.7384301117096443, 0.7384301117096443, 0.7384301117096443, 0.7384301117096443, 0.7384301117096443, 0.7384301117096443, 0.7384301117096443, 0.7384301117096443, 0.7384301117096443, 0.7384301117096443]
[0.14101282230837442, 0.1581845253305188, 0.17196331999176365, 0.17920805481962251, 0.18563456493594785, 0.18856464641242981, 0.19869566879381007, 0.21125688610817592, 0.2252280774429337, 0.22295111221493857, 0.23575496038260763, 0.24145802847138434, 0.2482402498957134, 0.2505165246397265, 0.26019171346088055, 0.26724987460599814, 0.2737190669821732, 0.28815279611233824, 0.2913581699950235, 0.2992906418963152, 0.29974558535493145, 0.30954168675417787, 0.31499795928523755, 0.3225255985670118, 0.3262453136622262, 0.3310712234590091, 0.33621718978012083, 0.3370886915280442, 0.3423416678777772, 0.3452335637544275, 0.35758093756395526, 0.3604827552667832, 0.371035218846617, 0.37533886665000393, 0.3839598341442487, 0.38852430313057845, 0.38954215376900647, 0.3966064136647741, 0.3966064136647741, 0.401792445463262, 0.4024578411084665, 0.40720950907277176, 0.41091134007956154, 0.42254913153937795, 0.43160482374810605, 0.43160482374810605, 0.4348881963990716, 0.4348881963990716, 0.44132558822263523, 0.4453620282280052, 0.4453620282280052, 0.4524154872735451, 0.4524154872735451, 0.4524154872735451, 0.4524154872735451, 0.4524154872735451, 0.4524154872735451, 0.4524154872735451, 0.4622126951443834, 0.4622126951443834, 0.4668999159709242, 0.472115010030815, 0.472115010030815, 0.472115010030815, 0.472115010030815, 0.472115010030815, 0.472115010030815, 0.47820456309991627, 0.47820456309991627, 0.47820456309991627, 0.49953872020098594, 0.49953872020098594, 0.49953872020098594, 0.5061380231973014, 0.5061380231973014, 0.5061380231973014, 0.5061380231973014, 0.5061380231973014, 0.5138524297038585, 0.5138524297038585, 0.5138524297038585, 0.5138524297038585, 0.5138524297038585, 0.5138524297038585, 0.5138524297038585, 0.5138524297038585, 0.5138524297038585, 0.5138524297038585, 0.5138524297038585, 0.5138524297038585]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19245.0)
('VALIDATE SUM PROTEIN TEST: ', 2846.0)
((646, 331), (646, 331), 23375.021, 59364.0)
('Error: ', tensor(48991.2930, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5380459482453077, 0.2986540933601147)
('Val: AUC, AUPR, Erros: ', 0.5554711535443096, 0.30572965309906447, 5984.566)
('Test: AUC, AUPR, Erros: ', 0.4747810829542939, 0.22677762427823808, 5302.4165)
