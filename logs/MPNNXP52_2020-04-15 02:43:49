class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = XGAT(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = XGAT(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD3 = XGAT(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.L1C = Linear(config.CHEM_FINGERPRINT_SIZE + config.EMBED_DIM, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        # self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=1)
        # self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=1)
        # self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=1)

        # self.conv4= EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv4g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool4 = TopKPooling(config.EMBED_DIM, ratio=1)

        # self.conv5 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv5g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool5 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, drugId2ProteinIdList, drugGraphBatch,
                nDrug, drugFeatures=None):

        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]

            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)
            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)

            xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xAtom = F.relu(self.conv2g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xAtom = F.relu(self.conv3g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xsum = 0
            #            if config.N_INNER_LAYER >= 4:
            #                if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
            #                    xAtom = F.relu(self.conv4(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch))
            #                else:
            #                    xAtom = F.relu(self.conv4g(xAtom, edge_index))
            #
            #                xAtom, edge_index, _, batch, _, _ = self.pool4(xAtom, edge_index, None, batch)
            #                x4 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            #                xsum += x4
            #                iLevel += 1
            #                if config.N_INNER_LAYER == 5:
            #                    if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
            #                        xAtom = F.relu(self.conv5(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch))
            #                    else:
            #                        xAtom = F.relu(self.conv5g(xAtom, edge_index))
            #                    xAtom, edge_index, _, batch, _, _ = self.pool5(xAtom, edge_index, None, batch)
            #                    x5 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            #                    xsum += x5

            xDrug = x1 + x2 + x3 + xsum
            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)

            # xDrug = self.lin2(xDrug)
            # xDrug = self.act2(xDrug)


            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x0 = x
            x = self.convD1(x, drugEdges, x0)
            x = F.relu(x)
            x = self.convD2(x, drugEdges, x0)
            x = F.relu(x)
#            x = self.convD3(x, drugEdges, x0)
#            x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Combine Features: ', False)
('Inner mode: ', False)
('Cross Prob: ', 0.0)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7fab6107a490>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
KFold: 5 x 10
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19463.0)
('VALIDATE SUM PROTEIN TEST: ', 2334.0)
((646, 331), (646, 331), 113126.64, 59640.0)
('Error: ', tensor(65026.4648, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.45234420817164717, 0.2502461133816322)
('Val: AUC, AUPR, Erros: ', 0.4203005818129647, 0.19840867303119922, 8658.639)
('Test: AUC, AUPR, Erros: ', 0.476553614194117, 0.25813701630189123, 7574.509)
((646, 331), (646, 331), 77146.8, 59640.0)
('Error: ', tensor(50677.7617, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.45560236872529936, 0.25652135840081897)
('Val: AUC, AUPR, Erros: ', 0.4290133857700672, 0.20189971436712748, 6281.772)
('Test: AUC, AUPR, Erros: ', 0.4695155437169926, 0.2618722473697834, 6069.1597)
((646, 331), (646, 331), 81602.05, 59640.0)
('Error: ', tensor(41646.2812, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6739030612120616, 0.5040472684508239)
('Val: AUC, AUPR, Erros: ', 0.5880828548021866, 0.3341661321092874, 5464.231)
('Test: AUC, AUPR, Erros: ', 0.6144847536578841, 0.3981767496677978, 5515.967)
((646, 331), (646, 331), 67999.195, 59640.0)
('Error: ', tensor(33942.7891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7864242251793354, 0.6329615080252554)
('Val: AUC, AUPR, Erros: ', 0.7184352545724538, 0.4780385049579478, 4611.991)
('Test: AUC, AUPR, Erros: ', 0.7134831190339255, 0.4836547985843844, 4968.3433)
((646, 331), (646, 331), 56050.957, 59640.0)
('Error: ', tensor(32534.5391, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8000438088516659, 0.6553393808457211)
('Val: AUC, AUPR, Erros: ', 0.7432179349203228, 0.5089652508777025, 4208.87)
('Test: AUC, AUPR, Erros: ', 0.7408086706491719, 0.5272218927294119, 4516.3823)
((646, 331), (646, 331), 65695.18, 59640.0)
('Error: ', tensor(32051.6562, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.804653040769794, 0.6637123471902786)
('Val: AUC, AUPR, Erros: ', 0.738540796803201, 0.49775780125417135, 4468.6777)
('Test: AUC, AUPR, Erros: ', 0.7351959867810303, 0.519735021652441, 4757.3623)
((646, 331), (646, 331), 60211.234, 59640.0)
('Error: ', tensor(31698.0039, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8097065745751538, 0.6707399354596728)
('Val: AUC, AUPR, Erros: ', 0.7307057365539086, 0.4837944565437602, 4372.849)
('Test: AUC, AUPR, Erros: ', 0.732060016483312, 0.5121254845625666, 4649.779)
((646, 331), (646, 331), 62295.066, 59640.0)
('Error: ', tensor(31429.1641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8131363347958592, 0.6760396120029697)
('Val: AUC, AUPR, Erros: ', 0.7327192170033092, 0.49361890897228194, 4395.5454)
('Test: AUC, AUPR, Erros: ', 0.7286043321214213, 0.5119867681235407, 4714.3145)
((646, 331), (646, 331), 62258.953, 59640.0)
('Error: ', tensor(31159.8945, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8168007643207034, 0.6811475698068733)
('Val: AUC, AUPR, Erros: ', 0.7334312912822036, 0.4983394211369163, 4367.844)
('Test: AUC, AUPR, Erros: ', 0.7229177915016867, 0.5035913703307957, 4758.425)
((646, 331), (646, 331), 62092.105, 59640.0)
('Error: ', tensor(30846.6992, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8201760478231354, 0.686840901681556)
('Val: AUC, AUPR, Erros: ', 0.7291807108066097, 0.4963147230463695, 4385.2837)
('Test: AUC, AUPR, Erros: ', 0.7169470565947244, 0.4925842812145226, 4813.569)
((646, 331), (646, 331), 61558.934, 59640.0)
('Error: ', tensor(30529.0586, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.823303013670468, 0.6925015087718749)
('Val: AUC, AUPR, Erros: ', 0.7284043953813313, 0.49865985856175227, 4368.23)
('Test: AUC, AUPR, Erros: ', 0.7128072440866262, 0.4912949551307264, 4796.0923)
((646, 331), (646, 331), 61274.24, 59640.0)
('Error: ', tensor(30098.7090, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8262293773972142, 0.6976597761907984)
('Val: AUC, AUPR, Erros: ', 0.7287653263820478, 0.4986773188971255, 4361.2695)
('Test: AUC, AUPR, Erros: ', 0.7140581664393189, 0.4913504130436858, 4795.9097)
((646, 331), (646, 331), 61131.066, 59640.0)
('Error: ', tensor(29599.1777, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8299633142748499, 0.704551504553583)
('Val: AUC, AUPR, Erros: ', 0.7299396590398342, 0.49999414981688817, 4399.6997)
('Test: AUC, AUPR, Erros: ', 0.7137236160958156, 0.4845995215595189, 4855.1816)
((646, 331), (646, 331), 62571.684, 59640.0)
('Error: ', tensor(29226.8008, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8337105709786544, 0.7113654854857332)
('Val: AUC, AUPR, Erros: ', 0.7309495874540926, 0.4975420274896943, 4480.2686)
('Test: AUC, AUPR, Erros: ', 0.7135802239791211, 0.4741447785761219, 4981.361)
((646, 331), (646, 331), 57915.406, 59640.0)
('Error: ', tensor(28928.6582, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8373498606358902, 0.7176987295477437)
('Val: AUC, AUPR, Erros: ', 0.7335311827137736, 0.49796546682204157, 4340.5947)
('Test: AUC, AUPR, Erros: ', 0.7136325639774417, 0.47438214599898487, 4832.2)
((646, 331), (646, 331), 60710.176, 59640.0)
('Error: ', tensor(28569.3633, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8403518779347073, 0.7234669071450738)
('Val: AUC, AUPR, Erros: ', 0.7307108555095106, 0.49838905675519357, 4459.926)
('Test: AUC, AUPR, Erros: ', 0.7119931352719502, 0.47366298321329103, 4945.279)
((646, 331), (646, 331), 62403.77, 59640.0)
('Error: ', tensor(28334.1680, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.84320782947896, 0.7281128467202267)
('Val: AUC, AUPR, Erros: ', 0.7279992799154676, 0.4941834261773172, 4556.703)
('Test: AUC, AUPR, Erros: ', 0.7056327108612963, 0.4680491284015345, 5064.8726)
Train: 0.8000 0.6553
Test: 0.7408 0.5272
[0.5811720021703743, 0.6021573342182073, 0.6148863023955485, 0.6062137328786634, 0.6096182441906726, 0.6092325019912386, 0.6175576573816871, 0.6246175832658588, 0.6311249484121814, 0.6318449283135936, 0.6372716301532841, 0.6395956194158285, 0.6418437176259979, 0.6423864099128771, 0.647730953135502, 0.6508969067334198, 0.6542802215834668, 0.6592748064123896, 0.6612785249041648, 0.6649089214680566, 0.6649101242221311, 0.6682186189713706, 0.6702584852321951, 0.6740042080451243, 0.6752719815649382, 0.6770403094781348, 0.6790630472790737, 0.6798719633763233, 0.6819428307402728, 0.682688130781438, 0.6872552008516563, 0.6891283126168253, 0.6928919361291527, 0.694572913520537, 0.6978291966298896, 0.6992883120995812, 0.7000183174171066, 0.7031788304729741, 0.7031788304729741, 0.7048988028718907, 0.7053387688350679, 0.7071257621494983, 0.7081282297311232, 0.7120800293803472, 0.7150477279801997, 0.7150477279801997, 0.7160184187700214, 0.7160184187700214, 0.7182298858596269, 0.719576461153267, 0.719576461153267, 0.7219405226328316, 0.7219405226328316, 0.7219405226328316, 0.7219405226328316, 0.7219405226328316, 0.7219405226328316, 0.7219405226328316, 0.7247492054308177, 0.7247492054308177, 0.7261225803158102, 0.7278352336487708, 0.7278352336487708, 0.7278352336487708, 0.7278352336487708, 0.7278352336487708, 0.7278352336487708, 0.7297904221710785, 0.7297904221710785, 0.7297904221710785, 0.7361520064974159, 0.7361520064974159, 0.7361520064974159, 0.7382042471273917, 0.7382042471273917, 0.7382042471273917, 0.7382042471273917, 0.7382042471273917, 0.7408086706491719, 0.7408086706491719, 0.7408086706491719, 0.7408086706491719, 0.7408086706491719, 0.7408086706491719, 0.7408086706491719, 0.7408086706491719, 0.7408086706491719, 0.7408086706491719, 0.7408086706491719, 0.7408086706491719]
[0.1355876546923656, 0.1539236313032935, 0.1661814830330751, 0.17214096733613457, 0.18052024505958353, 0.18122928515799872, 0.19473619242276125, 0.2098600565951116, 0.22274627053213386, 0.2223115970287708, 0.23179048839397548, 0.23723491134478625, 0.24244588473370465, 0.24442940680891434, 0.25716320573775153, 0.26616880711530905, 0.2734157893061854, 0.28586143316238444, 0.2898802442070227, 0.3005179598866853, 0.3005738235070763, 0.3067868634348256, 0.31194882720206335, 0.3215707195608822, 0.3254149987049705, 0.3295576806908423, 0.33509085721005677, 0.3368615508287928, 0.34357214651638, 0.34605264767633837, 0.3591851557807098, 0.36507731222870565, 0.3773959238205402, 0.38292944515379984, 0.39103659087379117, 0.39561853370682154, 0.39785669031149296, 0.4060119680471823, 0.4060119680471823, 0.41066561870788026, 0.4119810616167172, 0.4181850913761676, 0.42166416554986036, 0.43322752703163586, 0.4421179138681731, 0.4421179138681731, 0.44392418063958194, 0.44392418063958194, 0.45009915800363187, 0.45444833216159347, 0.45444833216159347, 0.4609924684207693, 0.4609924684207693, 0.4609924684207693, 0.4609924684207693, 0.4609924684207693, 0.4609924684207693, 0.4609924684207693, 0.4705434308763664, 0.4705434308763664, 0.47538150183514805, 0.4814988347865198, 0.4814988347865198, 0.4814988347865198, 0.4814988347865198, 0.4814988347865198, 0.4814988347865198, 0.48857824119960297, 0.48857824119960297, 0.48857824119960297, 0.5108948855088626, 0.5108948855088626, 0.5108948855088626, 0.5182572325065089, 0.5182572325065089, 0.5182572325065089, 0.5182572325065089, 0.5182572325065089, 0.5272218927294119, 0.5272218927294119, 0.5272218927294119, 0.5272218927294119, 0.5272218927294119, 0.5272218927294119, 0.5272218927294119, 0.5272218927294119, 0.5272218927294119, 0.5272218927294119, 0.5272218927294119, 0.5272218927294119]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19245.0)
('VALIDATE SUM PROTEIN TEST: ', 2846.0)
((646, 331), (646, 331), 101967.31, 59364.0)
('Error: ', tensor(54062.4648, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.49484288560317746, 0.27292051507537246)
('Val: AUC, AUPR, Erros: ', 0.4860640805082711, 0.2627352915326628, 6683.7734)
('Test: AUC, AUPR, Erros: ', 0.45430362279082914, 0.21192227897197055, 6907.9)
((646, 331), (646, 331), 34121.016, 59364.0)
('Error: ', tensor(45864.6602, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.527654293378195, 0.3091806390214855)
('Val: AUC, AUPR, Erros: ', 0.4776759605150338, 0.25830731709184157, 5769.005)
('Test: AUC, AUPR, Erros: ', 0.49775062845173423, 0.2371004286279999, 5011.29)
((646, 331), (646, 331), 72905.72, 59364.0)
('Error: ', tensor(39588., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6730643928332246, 0.4921007142018836)
('Val: AUC, AUPR, Erros: ', 0.6049808010313402, 0.3650397749942151, 5344.2285)
('Test: AUC, AUPR, Erros: ', 0.6357597322600711, 0.3721035176566184, 4978.005)
((646, 331), (646, 331), 66716.26, 59364.0)
('Error: ', tensor(34568.9805, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7679648337803495, 0.6096325693148653)
('Val: AUC, AUPR, Erros: ', 0.7127120582642984, 0.4949226543801454, 4914.9204)
('Test: AUC, AUPR, Erros: ', 0.7350491373942741, 0.49984924121734453, 4490.3877)
((646, 331), (646, 331), 64422.39, 59364.0)
('Error: ', tensor(33292.4688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7806504978526286, 0.6313869050426587)
('Val: AUC, AUPR, Erros: ', 0.7280130457544568, 0.5229412879131161, 4666.7534)
('Test: AUC, AUPR, Erros: ', 0.7458868434954964, 0.5158447014741953, 4308.5483)
((646, 331), (646, 331), 64852.375, 59364.0)
('Error: ', tensor(32475.5742, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.795347812273536, 0.6503905760400279)
('Val: AUC, AUPR, Erros: ', 0.7295586024992092, 0.5123146377723742, 4659.2534)
('Test: AUC, AUPR, Erros: ', 0.7467331671392018, 0.5024069150889128, 4323.7417)
((646, 331), (646, 331), 62704.15, 59364.0)
('Error: ', tensor(31921.3438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8050843933436831, 0.6624731320365715)
('Val: AUC, AUPR, Erros: ', 0.7287126464029577, 0.50085400950239, 4770.679)
('Test: AUC, AUPR, Erros: ', 0.7455233743621311, 0.48759322670171334, 4483.6763)
((646, 331), (646, 331), 61863.125, 59364.0)
('Error: ', tensor(31502.1660, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8108838004449457, 0.6709165792232732)
('Val: AUC, AUPR, Erros: ', 0.72572442550551, 0.4980348691974541, 4715.3457)
('Test: AUC, AUPR, Erros: ', 0.7430395282569221, 0.47219838305237805, 4562.61)
((646, 331), (646, 331), 60835.156, 59364.0)
('Error: ', tensor(31149.2266, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8153293169150313, 0.6776003807131259)
('Val: AUC, AUPR, Erros: ', 0.7195899091284947, 0.48410986878742523, 4782.874)
('Test: AUC, AUPR, Erros: ', 0.7387164751680512, 0.45826933293114847, 4714.8257)
((646, 331), (646, 331), 61240.92, 59364.0)
('Error: ', tensor(30797.7383, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8204322209441478, 0.6847341609582385)
('Val: AUC, AUPR, Erros: ', 0.7129436536981013, 0.4705448374725684, 4875.808)
('Test: AUC, AUPR, Erros: ', 0.7357554601248727, 0.4519488600181531, 4824.926)
((646, 331), (646, 331), 61167.63, 59364.0)
('Error: ', tensor(30411.1328, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8246901279103943, 0.6911808359158045)
('Val: AUC, AUPR, Erros: ', 0.7024998778816929, 0.457107039019751, 4986.9854)
('Test: AUC, AUPR, Erros: ', 0.731216902497999, 0.4382596581066918, 5082.626)
((646, 331), (646, 331), 61325.41, 59364.0)
('Error: ', tensor(29886.0762, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8297279928250797, 0.7005200865697363)
('Val: AUC, AUPR, Erros: ', 0.6933744237388416, 0.44560565046119605, 5125.397)
('Test: AUC, AUPR, Erros: ', 0.7274956313459042, 0.42516185018143593, 5378.468)
((646, 331), (646, 331), 61255.168, 59364.0)
('Error: ', tensor(29246.5938, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8348100179761427, 0.7101872159044941)
('Val: AUC, AUPR, Erros: ', 0.6879722934324846, 0.4393884631900147, 5245.84)
('Test: AUC, AUPR, Erros: ', 0.7246401040451206, 0.41288307932037926, 5751.3926)
((646, 331), (646, 331), 59965.15, 59364.0)
('Error: ', tensor(28720.7852, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8394185385802259, 0.7175981926747144)
('Val: AUC, AUPR, Erros: ', 0.6867848213490111, 0.4328857721902334, 5389.4053)
('Test: AUC, AUPR, Erros: ', 0.7240069175679871, 0.4056494625465821, 5986.647)
((646, 331), (646, 331), 58252.242, 59364.0)
('Error: ', tensor(28363.2363, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8433984826306496, 0.7241419718274011)
('Val: AUC, AUPR, Erros: ', 0.6904103520005653, 0.43348276644480266, 5466.43)
('Test: AUC, AUPR, Erros: ', 0.7265842826065869, 0.4063571182700163, 5919.2207)
((646, 331), (646, 331), 58782.54, 59364.0)
('Error: ', tensor(28044.0273, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8467191821469497, 0.7297761760446715)
('Val: AUC, AUPR, Erros: ', 0.6949636087444873, 0.43282513544640944, 5641.051)
('Test: AUC, AUPR, Erros: ', 0.7254060146789136, 0.4030307236524125, 6035.603)
((646, 331), (646, 331), 58329.61, 59364.0)
('Error: ', tensor(27772.0273, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8500942260625158, 0.7351460976516615)
('Val: AUC, AUPR, Erros: ', 0.6985166532066719, 0.43423300669799925, 5752.159)
('Test: AUC, AUPR, Erros: ', 0.7252992074180162, 0.3984874225221522, 6167.375)
Train: 0.7953 0.6504
Test: 0.7467 0.5024
[0.5899371283087806, 0.5801240730868027, 0.576220008795791, 0.5774042342193612, 0.583183390143004, 0.5847907122002654, 0.5908628496962128, 0.6029668980559897, 0.6083919786586878, 0.6107618213932975, 0.6181442586361646, 0.6232866280452337, 0.62561737573633, 0.6263469228142102, 0.6328182435249545, 0.6367455197132617, 0.6392565062790219, 0.6438441228453317, 0.6476358511360005, 0.6502435311041931, 0.6509273692062494, 0.654340856360434, 0.6591727870216697, 0.6628144653352739, 0.6647563717342242, 0.6696749778834281, 0.6712334610062225, 0.6721709235262616, 0.6743884308207483, 0.6755347661851879, 0.6817997746712784, 0.6854487488200712, 0.6887656204906556, 0.6909834108469324, 0.6941170028554063, 0.6960735143071872, 0.6977148398278652, 0.7018404773145532, 0.7018404773145532, 0.704653668453028, 0.7062516985426373, 0.7076312126690413, 0.7094312660717448, 0.7140573353419692, 0.7175282012725728, 0.7175282012725728, 0.7182614803885549, 0.7182614803885549, 0.7213149041213421, 0.7226998607342117, 0.7226998607342117, 0.7256102017609818, 0.7256102017609818, 0.7256102017609818, 0.7256102017609818, 0.7256102017609818, 0.7256102017609818, 0.7256102017609818, 0.7286492609019317, 0.7286492609019317, 0.7300693186765188, 0.7319933339603992, 0.7319933339603992, 0.7319933339603992, 0.7319933339603992, 0.7319933339603992, 0.7319933339603992, 0.7345098359146081, 0.7345098359146081, 0.7345098359146081, 0.741417478958535, 0.741417478958535, 0.741417478958535, 0.7437695361744835, 0.7437695361744835, 0.7437695361744835, 0.7437695361744835, 0.7437695361744835, 0.7467331671392018, 0.7467331671392018, 0.7467331671392018, 0.7467331671392018, 0.7467331671392018, 0.7467331671392018, 0.7467331671392018, 0.7467331671392018, 0.7467331671392018, 0.7467331671392018, 0.7467331671392018, 0.7467331671392018]
[0.1343052885606348, 0.12435761217730505, 0.12893077479922804, 0.13200272201284818, 0.1387663746467087, 0.14047335900358185, 0.14990939714239293, 0.1634204943524612, 0.16997587647183215, 0.17258636829390586, 0.18674662783986834, 0.19838466646275496, 0.20321487294268825, 0.20284195108001848, 0.21332796013363722, 0.22102816064053715, 0.2268862040641027, 0.23788514587712484, 0.24496465035345427, 0.2543490827393668, 0.25570400133481686, 0.26394919922399307, 0.27473521982970805, 0.28117441200852283, 0.2850312190615464, 0.2934108237053886, 0.29835859139449084, 0.2995736135845979, 0.3031543971617893, 0.30561192612876054, 0.3208782250743878, 0.32939749317507333, 0.33672513121670744, 0.3426711664237606, 0.34934736714905, 0.3542772689295992, 0.3588587405235055, 0.3707939072626002, 0.3707939072626002, 0.37684160155982843, 0.38061621023289066, 0.3846535980693501, 0.389751727032237, 0.4019770037225976, 0.41132168595177165, 0.41132168595177165, 0.4132372313029379, 0.4132372313029379, 0.4216110526625139, 0.42543009623520067, 0.42543009623520067, 0.4336956638902041, 0.4336956638902041, 0.4336956638902041, 0.4336956638902041, 0.4336956638902041, 0.4336956638902041, 0.4336956638902041, 0.4421308431337749, 0.4421308431337749, 0.4464851371813541, 0.45264834395422715, 0.45264834395422715, 0.45264834395422715, 0.45264834395422715, 0.45264834395422715, 0.45264834395422715, 0.461382545293398, 0.461382545293398, 0.461382545293398, 0.4839344951493111, 0.4839344951493111, 0.4839344951493111, 0.49170854277822457, 0.49170854277822457, 0.49170854277822457, 0.49170854277822457, 0.49170854277822457, 0.5024069150889128, 0.5024069150889128, 0.5024069150889128, 0.5024069150889128, 0.5024069150889128, 0.5024069150889128, 0.5024069150889128, 0.5024069150889128, 0.5024069150889128, 0.5024069150889128, 0.5024069150889128, 0.5024069150889128]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_2
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19732.0)
('VALIDATE SUM PROTEIN TEST: ', 2552.0)
((646, 331), (646, 331), 53835.363, 58006.0)
('Error: ', tensor(45125.2109, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.45791120724555323, 0.2478654229187764)
('Val: AUC, AUPR, Erros: ', 0.46633991420484655, 0.2739920971979784, 5774.669)
('Test: AUC, AUPR, Erros: ', 0.42899684069029853, 0.2369482585005109, 5718.19)
((646, 331), (646, 331), 88039.71, 58006.0)
('Error: ', tensor(53286.3438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4356280841943539, 0.2371864664764194)
('Val: AUC, AUPR, Erros: ', 0.43322245002786913, 0.2537733364529646, 6667.83)
('Test: AUC, AUPR, Erros: ', 0.40654545679778065, 0.22545223920497887, 6646.8228)
((646, 331), (646, 331), 72305.01, 58006.0)
('Error: ', tensor(42006.3672, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5966271999077475, 0.3807316151916825)
('Val: AUC, AUPR, Erros: ', 0.5662534303508451, 0.35300459210905927, 5553.691)
('Test: AUC, AUPR, Erros: ', 0.5354201967772874, 0.2956749987298605, 5597.542)
((646, 331), (646, 331), 54148.33, 58006.0)
('Error: ', tensor(34894.8867, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7475736448718389, 0.5747624900857425)
('Val: AUC, AUPR, Erros: ', 0.7052267970406096, 0.5185436604114428, 4781.9385)
('Test: AUC, AUPR, Erros: ', 0.6962071074403201, 0.45815486322131105, 4790.013)
((646, 331), (646, 331), 64085.73, 58006.0)
('Error: ', tensor(33293.4297, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7761725560055965, 0.6158871015744634)
('Val: AUC, AUPR, Erros: ', 0.7224547319403636, 0.5499253046944446, 4734.113)
('Test: AUC, AUPR, Erros: ', 0.7161041212359583, 0.49730175098356805, 4853.295)
((646, 331), (646, 331), 58811.42, 58006.0)
('Error: ', tensor(32137.3867, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7963977544615359, 0.6423128764330512)
('Val: AUC, AUPR, Erros: ', 0.7213950758452058, 0.5460970378374875, 4667.896)
('Test: AUC, AUPR, Erros: ', 0.7180930167050805, 0.4978218150202328, 4692.252)
