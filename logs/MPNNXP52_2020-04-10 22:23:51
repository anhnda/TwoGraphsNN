class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD3 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.L1C = Linear(config.CHEM_FINGERPRINT_SIZE + config.EMBED_DIM, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=1)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=1)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.conv4 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv4g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool4 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.conv5 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv5g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool5 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug,
                drugFeatures=None):

        xAtomProtein, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
        xAtomProtein = self.nodesEmbedding(xAtomProtein)
        xAtomProtein = xAtomProtein.squeeze(1)

        xAtomProtein = F.relu(self.conv1g(xAtomProtein, edge_index))
        xAtomProtein, edge_index, _, batch, _, _ = self.pool1(xAtomProtein, edge_index, None, batch)
        x1 = torch.cat([gmp(xAtomProtein, batch), gap(xAtomProtein, batch)], dim=1)

        xAtomProtein = F.relu(self.conv2g(xAtomProtein, edge_index))
        xAtomProtein, edge_index, _, batch, _, _ = self.pool2(xAtomProtein, edge_index, None, batch)
        x2 = torch.cat([gmp(xAtomProtein, batch), gap(xAtomProtein, batch)], dim=1)

        xAtomProtein = F.relu(self.conv3g(xAtomProtein, edge_index))
        xAtomProtein, edge_index, _, batch, _, _ = self.pool3(xAtomProtein, edge_index, None, batch)
        x3 = torch.cat([gmp(xAtomProtein, batch), gap(xAtomProtein, batch)], dim=1)

        xDrugProtein = x1 + x2 + x3
        xDrugProtein = self.lin1(xDrugProtein)
        xDrugProtein = self.act1(xDrugProtein)

        # xDrug = self.lin2(xDrug)
        # xDrug = self.act2(xDrug)

        nProtein = len(proteinNodes)
        x = self.nodesEmbedding(x[nDrug+nProtein:])

        x = x.squeeze(1)

        x = torch.cat((xDrugProtein, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)

        # x = self.convD3(x, drugEdges)
        # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', False, True, False)
('Drug Features: ', True)
('Combine Features: ', False)
('Is ADAM: ', False)
('Inner mode: ', False)
('Cross Prob: ', 0.001)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7fa7d1f2fb50>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
KFold: 5 x 10
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19463.0)
('VALIDATE SUM PROTEIN TEST: ', 2334.0)
((646, 331), (646, 331), 26374.682, 59640.0)
('Error: ', tensor(48158.8008, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5442971180761296, 0.3071852700343672)
('Val: AUC, AUPR, Erros: ', 0.48297783098697333, 0.23839918930159543, 5219.133)
('Test: AUC, AUPR, Erros: ', 0.5496181777283099, 0.27750269869989697, 5722.108)
((646, 331), (646, 331), 59066.246, 59640.0)
('Error: ', tensor(41793.9492, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6101057412775113, 0.36763412134253814)
('Val: AUC, AUPR, Erros: ', 0.5547872309790904, 0.2894433454425683, 5025.9404)
('Test: AUC, AUPR, Erros: ', 0.6059715212694459, 0.3215222778162122, 5127.255)
((646, 331), (646, 331), 54246.45, 59640.0)
('Error: ', tensor(40338.9922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6646542468396568, 0.42903253278941117)
('Val: AUC, AUPR, Erros: ', 0.6212528022498008, 0.3406317734129693, 4686.7036)
('Test: AUC, AUPR, Erros: ', 0.6556125035097738, 0.3761532443451102, 4916.9644)
((646, 331), (646, 331), 50146.93, 59640.0)
('Error: ', tensor(38725.1602, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7167358589249253, 0.5076496478794187)
('Val: AUC, AUPR, Erros: ', 0.6740265527794903, 0.4042178235992128, 4440.9307)
('Test: AUC, AUPR, Erros: ', 0.7056061909669027, 0.45359746700456666, 4696.895)
((646, 331), (646, 331), 53412.605, 59640.0)
('Error: ', tensor(36674.0508, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7452870810467204, 0.5573157069111874)
('Val: AUC, AUPR, Erros: ', 0.702495308063871, 0.44251959377321937, 4324.444)
('Test: AUC, AUPR, Erros: ', 0.7335199489340531, 0.5046408475149395, 4480.2827)
((646, 331), (646, 331), 50463.246, 59640.0)
('Error: ', tensor(35908.3125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7607295932731277, 0.583420509577968)
('Val: AUC, AUPR, Erros: ', 0.7184163233628807, 0.46394275521414785, 4233.1313)
('Test: AUC, AUPR, Erros: ', 0.7445033190268266, 0.5235589203195619, 4405.259)
((646, 331), (646, 331), 48849.19, 59640.0)
('Error: ', tensor(35536.1875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7682319536492647, 0.5967812211627204)
('Val: AUC, AUPR, Erros: ', 0.7241039215825988, 0.4686973265686403, 4213.6367)
('Test: AUC, AUPR, Erros: ', 0.7483460271957333, 0.5257650893624036, 4416.4404)
((646, 331), (646, 331), 51194.69, 59640.0)
('Error: ', tensor(34931.5312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.772323676861997, 0.6034856897593376)
('Val: AUC, AUPR, Erros: ', 0.7271781125039172, 0.4732473426038387, 4215.662)
('Test: AUC, AUPR, Erros: ', 0.7435565638470065, 0.5163858606462545, 4472.4062)
((646, 331), (646, 331), 53702.98, 59640.0)
('Error: ', tensor(34271.6016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7775069948702632, 0.6129417060724656)
('Val: AUC, AUPR, Erros: ', 0.7275911450807955, 0.47269835984009806, 4266.3086)
('Test: AUC, AUPR, Erros: ', 0.7445957851548036, 0.51128756708251, 4645.507)
((646, 331), (646, 331), 52712.01, 59640.0)
('Error: ', tensor(34218.6211, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7797857741379073, 0.6167578662021951)
('Val: AUC, AUPR, Erros: ', 0.7262994722997129, 0.47139860385960863, 4273.658)
('Test: AUC, AUPR, Erros: ', 0.741857930703718, 0.5050682456819262, 4745.0005)
((646, 331), (646, 331), 52906.375, 59640.0)
('Error: ', tensor(34059.6719, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7818308603779162, 0.620258474800697)
('Val: AUC, AUPR, Erros: ', 0.7239138953945031, 0.4673082362406565, 4313.501)
('Test: AUC, AUPR, Erros: ', 0.7392701777006069, 0.4992442205468296, 4882.0376)
((646, 331), (646, 331), 53140.41, 59640.0)
('Error: ', tensor(33916.4648, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7835862316310274, 0.6232674643921663)
('Val: AUC, AUPR, Erros: ', 0.7210217592171511, 0.46169256057457736, 4364.2905)
('Test: AUC, AUPR, Erros: ', 0.7367031009807744, 0.49404669021865694, 5024.952)
((646, 331), (646, 331), 53315.53, 59640.0)
('Error: ', tensor(33791.0195, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7851542334289724, 0.6260037953060091)
('Val: AUC, AUPR, Erros: ', 0.7178691694921051, 0.45494369590530037, 4424.738)
('Test: AUC, AUPR, Erros: ', 0.7342848018784973, 0.4893166701627191, 5171.4355)
((646, 331), (646, 331), 53437.67, 59640.0)
('Error: ', tensor(33683.9141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7865106911428228, 0.6283719656195152)
('Val: AUC, AUPR, Erros: ', 0.7147996007664819, 0.4474964594953831, 4491.2285)
('Test: AUC, AUPR, Erros: ', 0.7321420542904659, 0.48522607804548995, 5326.9644)
((646, 331), (646, 331), 53605.68, 59640.0)
('Error: ', tensor(33575.7422, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7877720996528594, 0.6306343608191611)
('Val: AUC, AUPR, Erros: ', 0.7117433785824171, 0.43976808068327106, 4567.868)
('Test: AUC, AUPR, Erros: ', 0.7298337341136742, 0.48116207816791345, 5488.66)
((646, 331), (646, 331), 53720.535, 59640.0)
('Error: ', tensor(33482.6680, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7888581346474987, 0.632587165448675)
('Val: AUC, AUPR, Erros: ', 0.7088043063557465, 0.43221548069896987, 4649.126)
('Test: AUC, AUPR, Erros: ', 0.7276606069621793, 0.4774839622510466, 5655.2764)
((646, 331), (646, 331), 53994.324, 59640.0)
('Error: ', tensor(33377.1797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7898737444643735, 0.6344797060945561)
('Val: AUC, AUPR, Erros: ', 0.7059264791922721, 0.42490949092107727, 4742.4463)
('Test: AUC, AUPR, Erros: ', 0.725269469830085, 0.47368946264652084, 5837.7227)
Train: 0.7682 0.5968
Test: 0.7483 0.5258
[0.6272820234567386, 0.6469049635484765, 0.6503657140226164, 0.64875992749773, 0.6536523834782992, 0.6524879981207686, 0.6565017649251361, 0.6622044079932675, 0.6670215957374768, 0.6655600998825764, 0.6697900887830028, 0.6723823275525269, 0.673696920781542, 0.674164059981269, 0.6759422462865516, 0.6773964982761239, 0.6784632977283505, 0.6824462753614539, 0.6835858459484028, 0.6851289224234224, 0.6851927541037971, 0.6876887489522518, 0.689056810599371, 0.6918319267464689, 0.692820382044833, 0.6937510338631732, 0.6952648796183467, 0.6956568320320985, 0.6974735341820364, 0.6981091482362984, 0.701746478866613, 0.7029888654435208, 0.7060925611298725, 0.707341371849305, 0.7100567226582969, 0.7112773853951124, 0.7118837608818246, 0.7144306836396777, 0.7144306836396777, 0.7158835074125797, 0.7162455668817203, 0.7176846534403005, 0.718595808454581, 0.7221090036260333, 0.7248194233455728, 0.7248194233455728, 0.7256683003689472, 0.7256683003689472, 0.7276659516053574, 0.7288728585829014, 0.7288728585829014, 0.7309697513768368, 0.7309697513768368, 0.7309697513768368, 0.7309697513768368, 0.7309697513768368, 0.7309697513768368, 0.7309697513768368, 0.7335839676467167, 0.7335839676467167, 0.7348422031102079, 0.7362688640799698, 0.7362688640799698, 0.7362688640799698, 0.7362688640799698, 0.7362688640799698, 0.7362688640799698, 0.738066617343725, 0.738066617343725, 0.738066617343725, 0.7440536073671788, 0.7440536073671788, 0.7440536073671788, 0.7459435110974061, 0.7459435110974061, 0.7459435110974061, 0.7459435110974061, 0.7459435110974061, 0.7483460271957333, 0.7483460271957333, 0.7483460271957333, 0.7483460271957333, 0.7483460271957333, 0.7483460271957333, 0.7483460271957333, 0.7483460271957333, 0.7483460271957333, 0.7483460271957333, 0.7483460271957333, 0.7483460271957333]
[0.15476052717762967, 0.17137937501590214, 0.18469882543181348, 0.18987916675672195, 0.19715317852485642, 0.19987665172480656, 0.21048440976154942, 0.2252402410433652, 0.2387504598118858, 0.23774586860398952, 0.2497483455441015, 0.25550946632754223, 0.26096575218091655, 0.262679739146035, 0.2712819180699488, 0.27857560019583333, 0.28538070237797564, 0.298367214474721, 0.30166214367542726, 0.30910690526481976, 0.3095961203111187, 0.3184394200038103, 0.32376055477236765, 0.3325641050516498, 0.3363042570445145, 0.3417412456549216, 0.34670268970644164, 0.34752909483186145, 0.3535447546559556, 0.3563065533666353, 0.3681876831103778, 0.37136343028320523, 0.3824377999100982, 0.3873605278661722, 0.3962888021936989, 0.4009199416085726, 0.4022137692779959, 0.409937559884707, 0.409937559884707, 0.41497721333260246, 0.41602493293163345, 0.42095037596949864, 0.42460676535073016, 0.4365487895430555, 0.44651660483935407, 0.44651660483935407, 0.4492172192589171, 0.4492172192589171, 0.45583316489759174, 0.45990732087092473, 0.45990732087092473, 0.46657649944597457, 0.46657649944597457, 0.46657649944597457, 0.46657649944597457, 0.46657649944597457, 0.46657649944597457, 0.46657649944597457, 0.47567365827140845, 0.47567365827140845, 0.48038222635875105, 0.48483605997451584, 0.48483605997451584, 0.48483605997451584, 0.48483605997451584, 0.48483605997451584, 0.48483605997451584, 0.4907424656019181, 0.4907424656019181, 0.4907424656019181, 0.5114576227475227, 0.5114576227475227, 0.5114576227475227, 0.5178410684882937, 0.5178410684882937, 0.5178410684882937, 0.5178410684882937, 0.5178410684882937, 0.5257650893624036, 0.5257650893624036, 0.5257650893624036, 0.5257650893624036, 0.5257650893624036, 0.5257650893624036, 0.5257650893624036, 0.5257650893624036, 0.5257650893624036, 0.5257650893624036, 0.5257650893624036, 0.5257650893624036]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19245.0)
('VALIDATE SUM PROTEIN TEST: ', 2846.0)
((646, 331), (646, 331), 24514.322, 59364.0)
('Error: ', tensor(48696.7500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5358125032017621, 0.29786201743242147)
('Val: AUC, AUPR, Erros: ', 0.5406460368139889, 0.29362639081814296, 5962.8726)
('Test: AUC, AUPR, Erros: ', 0.47414788483435005, 0.23030654534335226, 5277.3037)
((646, 331), (646, 331), 57251.246, 59364.0)
('Error: ', tensor(42948.0430, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5633566056246242, 0.32077261981704125)
('Val: AUC, AUPR, Erros: ', 0.5730232424571358, 0.33340890782027427, 5234.561)
('Test: AUC, AUPR, Erros: ', 0.5007388139332523, 0.25044032633404967, 5190.278)
((646, 331), (646, 331), 58335.734, 59364.0)
('Error: ', tensor(42580.3555, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5751926161006304, 0.3300884295883728)
('Val: AUC, AUPR, Erros: ', 0.5865768295891461, 0.35120035966607666, 5187.413)
('Test: AUC, AUPR, Erros: ', 0.5137373751768485, 0.25879847053998667, 5130.853)
((646, 331), (646, 331), 60300.94, 59364.0)
('Error: ', tensor(42159.6914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5918816906520865, 0.3442882727371994)
('Val: AUC, AUPR, Erros: ', 0.6049036271882229, 0.3767821441543109, 5129.4478)
('Test: AUC, AUPR, Erros: ', 0.5333208809596073, 0.2714822324280887, 5088.168)
((646, 331), (646, 331), 62060.312, 59364.0)
('Error: ', tensor(41689.8477, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6114191873413979, 0.3629389686281084)
('Val: AUC, AUPR, Erros: ', 0.625014488791651, 0.4039406496885186, 5067.3433)
('Test: AUC, AUPR, Erros: ', 0.5582211110013582, 0.2883398070219874, 5036.002)
((646, 331), (646, 331), 62428.035, 59364.0)
('Error: ', tensor(40977.1836, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6365935597073293, 0.3915593292101764)
('Val: AUC, AUPR, Erros: ', 0.6487912891850198, 0.43340505234987226, 4983.8613)
('Test: AUC, AUPR, Erros: ', 0.5923327716375925, 0.31438008647277843, 4930.8354)
((646, 331), (646, 331), 68287.7, 59364.0)
('Error: ', tensor(40403.6289, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6623684971214396, 0.4254567924770642)
('Val: AUC, AUPR, Erros: ', 0.673253975672344, 0.4672250696234246, 4910.1006)
('Test: AUC, AUPR, Erros: ', 0.6291815327890179, 0.347490449876163, 4958.054)
((646, 331), (646, 331), 72500.15, 59364.0)
('Error: ', tensor(39827.5391, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6852544420041671, 0.4611660736938208)
('Val: AUC, AUPR, Erros: ', 0.6938761962491169, 0.4968110893398875, 4841.3193)
('Test: AUC, AUPR, Erros: ', 0.662010155728487, 0.38577595354656247, 4958.39)
((646, 331), (646, 331), 68161.055, 59364.0)
('Error: ', tensor(38414.9805, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7036570715538362, 0.4937518856154321)
('Val: AUC, AUPR, Erros: ', 0.7095256960145231, 0.5209940263550096, 4676.7144)
('Test: AUC, AUPR, Erros: ', 0.6890254769061986, 0.42573694885913604, 4674.7764)
((646, 331), (646, 331), 64900.582, 59364.0)
('Error: ', tensor(37488.6094, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.715592823867303, 0.5155934632810515)
('Val: AUC, AUPR, Erros: ', 0.7195077625716045, 0.5376216455246988, 4567.769)
('Test: AUC, AUPR, Erros: ', 0.7059740982864624, 0.454514744375826, 4487.5366)
((646, 331), (646, 331), 64651.6, 59364.0)
('Error: ', tensor(37015.8125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7229169470587273, 0.5287607192002846)
('Val: AUC, AUPR, Erros: ', 0.7256190799895323, 0.5476425489655932, 4513.113)
('Test: AUC, AUPR, Erros: ', 0.7160712479138218, 0.4722259777515171, 4422.662)
((646, 331), (646, 331), 64105.49, 59364.0)
('Error: ', tensor(36692.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.727823008074582, 0.5372421090429513)
('Val: AUC, AUPR, Erros: ', 0.7294912438710335, 0.5537146250278497, 4477.9814)
('Test: AUC, AUPR, Erros: ', 0.7225691624458762, 0.4838158942538789, 4367.587)
((646, 331), (646, 331), 63688.652, 59364.0)
('Error: ', tensor(36469.6719, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7313675080152029, 0.5428616027241504)
('Val: AUC, AUPR, Erros: ', 0.7320754256157332, 0.5573662690911518, 4456.6226)
('Test: AUC, AUPR, Erros: ', 0.7266631277180431, 0.4909738982158991, 4325.3647)
((646, 331), (646, 331), 63398.793, 59364.0)
('Error: ', tensor(36302.0977, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.734118309318686, 0.546968975335778)
('Val: AUC, AUPR, Erros: ', 0.7338372338225619, 0.5596145977861138, 4443.586)
('Test: AUC, AUPR, Erros: ', 0.7294553530591414, 0.4957506481564593, 4291.738)
((646, 331), (646, 331), 63340.656, 59364.0)
('Error: ', tensor(36176.2539, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7362937542494384, 0.5501387332993518)
('Val: AUC, AUPR, Erros: ', 0.7351344188231397, 0.5610213625613935, 4435.6934)
('Test: AUC, AUPR, Erros: ', 0.7313570819341974, 0.4989728382809102, 4270.1816)
((646, 331), (646, 331), 63684.047, 59364.0)
('Error: ', tensor(36087.1484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7381161212810594, 0.5527565659261743)
('Val: AUC, AUPR, Erros: ', 0.7361546627303514, 0.5619326605488097, 4432.7134)
('Test: AUC, AUPR, Erros: ', 0.7327055638677459, 0.5011319031811561, 4262.592)
((646, 331), (646, 331), 63464.305, 59364.0)
('Error: ', tensor(35973.8438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7398788453590239, 0.5553850904546465)
('Val: AUC, AUPR, Erros: ', 0.7368323806228441, 0.5623873973591011, 4428.6133)
('Test: AUC, AUPR, Erros: ', 0.7339537740379207, 0.5033848588919039, 4240.7427)
Train: 0.7399 0.5554
Test: 0.7340 0.5034
[0.5395984763089361, 0.5373353365967141, 0.5392181881032401, 0.5391607594654699, 0.5439952636898281, 0.5484406203709274, 0.5543106811992886, 0.5713598898083904, 0.5767545088738396, 0.5779984809494905, 0.5865161657371477, 0.5909945691706193, 0.5948485352168429, 0.5966197188292068, 0.6042698992601281, 0.6097662713811296, 0.6127610686254191, 0.6179453793699935, 0.6228269333134963, 0.6259306326890608, 0.6267716637192418, 0.6307683133771963, 0.6361166870312804, 0.640130743315288, 0.6422791537768383, 0.6473010805909764, 0.6492110157447727, 0.6502180836821263, 0.6525485858717346, 0.6541003232711238, 0.6613599204234948, 0.6654837573294136, 0.6693010074640511, 0.6718082450818793, 0.6754303177642971, 0.6778032911802617, 0.679633869054457, 0.684370999656452, 0.684370999656452, 0.6875625631980669, 0.6893340801417294, 0.6908249514856245, 0.6928249600839331, 0.6977948997658476, 0.7016371960699684, 0.7016371960699684, 0.7025606168367617, 0.7025606168367617, 0.7060167796375649, 0.7075514602172311, 0.7075514602172311, 0.7107810546301067, 0.7107810546301067, 0.7107810546301067, 0.7107810546301067, 0.7107810546301067, 0.7107810546301067, 0.7107810546301067, 0.7142845035776253, 0.7142845035776253, 0.7159297700533156, 0.7180475340411526, 0.7180475340411526, 0.7180475340411526, 0.7180475340411526, 0.7180475340411526, 0.7180475340411526, 0.7207465764811969, 0.7207465764811969, 0.7207465764811969, 0.7282313184403494, 0.7282313184403494, 0.7282313184403494, 0.7307853105379445, 0.7307853105379445, 0.7307853105379445, 0.7307853105379445, 0.7307853105379445, 0.7339537740379207, 0.7339537740379207, 0.7339537740379207, 0.7339537740379207, 0.7339537740379207, 0.7339537740379207, 0.7339537740379207, 0.7339537740379207, 0.7339537740379207, 0.7339537740379207, 0.7339537740379207, 0.7339537740379207]
[0.12318861034668468, 0.1266777893392805, 0.12714733887251062, 0.12875279073945875, 0.1351697443973011, 0.13690257193250047, 0.14174528884611082, 0.15911809205877497, 0.16197888009018838, 0.16493744434764085, 0.1757094672902817, 0.18308638186795229, 0.18711012912357416, 0.19051323670784312, 0.20268561754351688, 0.21075877298001572, 0.21445786830456764, 0.2234700371991163, 0.22939599830680188, 0.23728389646539885, 0.2382395060264057, 0.24634324664109608, 0.25735286194060814, 0.2646671079670909, 0.2691234976178234, 0.27880222937530363, 0.28383016506053593, 0.2850430938897206, 0.28885273535498857, 0.29234865254415127, 0.3071104077528528, 0.3166903069845676, 0.32428516102986765, 0.33120426205795467, 0.3403939779551781, 0.34583655684652204, 0.3509703590859818, 0.35984300692616344, 0.35984300692616344, 0.36779927050354166, 0.37105457927607666, 0.37430623176217365, 0.38018999419905136, 0.3929465038481749, 0.4024248990476561, 0.4024248990476561, 0.4043573213303219, 0.4043573213303219, 0.41450138011751503, 0.4192024006508734, 0.4192024006508734, 0.4279601346642341, 0.4279601346642341, 0.4279601346642341, 0.4279601346642341, 0.4279601346642341, 0.4279601346642341, 0.4279601346642341, 0.4387713664644894, 0.4387713664644894, 0.44313357572408624, 0.44966679400673026, 0.44966679400673026, 0.44966679400673026, 0.44966679400673026, 0.44966679400673026, 0.44966679400673026, 0.4587586091286906, 0.4587586091286906, 0.4587586091286906, 0.4829945222933278, 0.4829945222933278, 0.4829945222933278, 0.49158655761912984, 0.49158655761912984, 0.49158655761912984, 0.49158655761912984, 0.49158655761912984, 0.5033848588919039, 0.5033848588919039, 0.5033848588919039, 0.5033848588919039, 0.5033848588919039, 0.5033848588919039, 0.5033848588919039, 0.5033848588919039, 0.5033848588919039, 0.5033848588919039, 0.5033848588919039, 0.5033848588919039]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_2
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19732.0)
('VALIDATE SUM PROTEIN TEST: ', 2552.0)
((646, 331), (646, 331), 16027.014, 58006.0)
('Error: ', tensor(50364.1172, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5412224294860808, 0.29812552879640314)
('Val: AUC, AUPR, Erros: ', 0.5314590826425716, 0.2902617373016556, 6670.6133)
('Test: AUC, AUPR, Erros: ', 0.5580495988959098, 0.3209063088117497, 6313.876)
((646, 331), (646, 331), 53024.312, 58006.0)
('Error: ', tensor(41876.6641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5850129332152127, 0.33338488927159504)
('Val: AUC, AUPR, Erros: ', 0.5509604709072495, 0.3191042499649063, 5546.369)
('Test: AUC, AUPR, Erros: ', 0.6131008555038474, 0.3944895269630679, 5125.5815)
((646, 331), (646, 331), 50883.54, 58006.0)
('Error: ', tensor(40306.8320, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6466206360383726, 0.40303470924155743)
('Val: AUC, AUPR, Erros: ', 0.6075514246879223, 0.37706246555956635, 5392.655)
('Test: AUC, AUPR, Erros: ', 0.6649720598944193, 0.4641668478001872, 4972.6006)
((646, 331), (646, 331), 50509.97, 58006.0)
('Error: ', tensor(38280.4375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7005218675832371, 0.4870082416268354)
('Val: AUC, AUPR, Erros: ', 0.6596365034013475, 0.45397513925322164, 5172.3086)
('Test: AUC, AUPR, Erros: ', 0.708068532512398, 0.5268952034859893, 4744.862)
((646, 331), (646, 331), 48857.023, 58006.0)
('Error: ', tensor(36973.5312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.727333761946729, 0.5303678429999266)
('Val: AUC, AUPR, Erros: ', 0.6860990254476247, 0.49445232969620934, 5039.419)
('Test: AUC, AUPR, Erros: ', 0.7280935347400893, 0.552002883688882, 4605.7534)
((646, 331), (646, 331), 47777.56, 58006.0)
('Error: ', tensor(36467.3164, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7387433430675646, 0.5466231122079028)
('Val: AUC, AUPR, Erros: ', 0.6955639207781115, 0.5068041996535835, 4998.4736)
('Test: AUC, AUPR, Erros: ', 0.7352708006892681, 0.5603803901197779, 4560.256)
((646, 331), (646, 331), 50930.637, 58006.0)
('Error: ', tensor(35594.4141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7473759331935322, 0.5580603311500908)
('Val: AUC, AUPR, Erros: ', 0.7021925993652202, 0.5134409771660542, 4904.97)
('Test: AUC, AUPR, Erros: ', 0.7395147356325172, 0.5642437112159029, 4468.61)
((646, 331), (646, 331), 49929.44, 58006.0)
('Error: ', tensor(35366.2891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7537185730918129, 0.5669781928837747)
('Val: AUC, AUPR, Erros: ', 0.7053209297075798, 0.516633703391761, 4901.643)
('Test: AUC, AUPR, Erros: ', 0.7419104223153715, 0.566642357124251, 4464.017)
((646, 331), (646, 331), 49767.996, 58006.0)
('Error: ', tensor(35094.4531, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7591903573808725, 0.5751094033441939)
('Val: AUC, AUPR, Erros: ', 0.7071260905622189, 0.518609234610199, 4893.4287)
('Test: AUC, AUPR, Erros: ', 0.7434632674466941, 0.5676169274088102, 4455.8667)
((646, 331), (646, 331), 49350.203, 58006.0)
('Error: ', tensor(34893.1484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7638058503771333, 0.5823568572566332)
('Val: AUC, AUPR, Erros: ', 0.7082547089563467, 0.5198418234371669, 4894.029)
('Test: AUC, AUPR, Erros: ', 0.7445809139010331, 0.5677917837560985, 4455.4883)
((646, 331), (646, 331), 49347.234, 58006.0)
('Error: ', tensor(34672.2891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7676960732860598, 0.588821310581105)
('Val: AUC, AUPR, Erros: ', 0.7087685595594174, 0.5203089694976855, 4892.8584)
('Test: AUC, AUPR, Erros: ', 0.7452872715279091, 0.567019727272184, 4453.2983)
((646, 331), (646, 331), 49955.05, 58006.0)
('Error: ', tensor(34395.4219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7710986250684313, 0.5945370283742543)
('Val: AUC, AUPR, Erros: ', 0.7088586884707826, 0.5201492555718726, 4887.354)
('Test: AUC, AUPR, Erros: ', 0.7455836178185461, 0.5655656301687317, 4445.477)
((646, 331), (646, 331), 49978.402, 58006.0)
('Error: ', tensor(34217.8398, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7740828976977507, 0.599459100965261)
('Val: AUC, AUPR, Erros: ', 0.7088444191131367, 0.5198568148008764, 4891.259)
('Test: AUC, AUPR, Erros: ', 0.7455579237044233, 0.5639949236425705, 4447.045)
((646, 331), (646, 331), 50118.31, 58006.0)
('Error: ', tensor(34041.4102, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7767724898494492, 0.6038395739739852)
('Val: AUC, AUPR, Erros: ', 0.7087305580429095, 0.5192530405806307, 4894.8047)
('Test: AUC, AUPR, Erros: ', 0.7455754144244879, 0.5626445919203966, 4446.695)
((646, 331), (646, 331), 49328.883, 58006.0)
('Error: ', tensor(33995.7852, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7790501004673906, 0.6075303669534388)
('Val: AUC, AUPR, Erros: ', 0.7088384168959033, 0.5190120741504023, 4909.8496)
('Test: AUC, AUPR, Erros: ', 0.7453781986374272, 0.5613221028331683, 4458.142)
((646, 331), (646, 331), 51299.36, 58006.0)
('Error: ', tensor(33624.9961, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7813510341055765, 0.6110639223245036)
('Val: AUC, AUPR, Erros: ', 0.7081229368872836, 0.51724301198954, 4898.7983)
('Test: AUC, AUPR, Erros: ', 0.7449694401575953, 0.5596159372129398, 4439.7847)
((646, 331), (646, 331), 51354.477, 58006.0)
('Error: ', tensor(33499.7695, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7831688721024362, 0.6140744166746461)
('Val: AUC, AUPR, Erros: ', 0.7075666779036007, 0.515796112545456, 4908.768)
('Test: AUC, AUPR, Erros: ', 0.7445407274759996, 0.5580258215985044, 4443.379)
Train: 0.7711 0.5945
Test: 0.7456 0.5656
[0.5965950248592408, 0.6303875848539879, 0.6262414009514121, 0.6263335002687412, 0.6281427334342813, 0.6262223071441418, 0.6302442346687946, 0.6325362112472068, 0.6367526146045002, 0.6382940609636728, 0.6409928458916456, 0.6436335536592706, 0.6440444630470743, 0.645986980867898, 0.6501960216810667, 0.6520743423223389, 0.6557408794548254, 0.6603974619622559, 0.664057670027894, 0.6665121252403031, 0.6666643605233294, 0.6692889611350027, 0.6713815746804136, 0.67468921085357, 0.6759957575166495, 0.6819810404583834, 0.683500428405995, 0.684433858960603, 0.6867698233912705, 0.687563897028998, 0.6932080957001003, 0.6951902979963323, 0.6978557338998905, 0.6991718236549656, 0.7026456836373061, 0.7041000545500765, 0.7048725367664284, 0.7078606634056805, 0.7078606634056805, 0.7096615139685352, 0.7105854323723324, 0.7122207883950369, 0.7135751190570561, 0.7174382561331782, 0.720954686294866, 0.720954686294866, 0.7214373040572113, 0.7214373040572113, 0.7236311613483197, 0.724424657082161, 0.724424657082161, 0.7266204531795268, 0.7266204531795268, 0.7266204531795268, 0.7266204531795268, 0.7266204531795268, 0.7266204531795268, 0.7266204531795268, 0.7297242692543213, 0.7297242692543213, 0.7314000482809192, 0.7329874449693368, 0.7329874449693368, 0.7329874449693368, 0.7329874449693368, 0.7329874449693368, 0.7329874449693368, 0.7350711340151761, 0.7350711340151761, 0.7350711340151761, 0.7416405586624895, 0.7416405586624895, 0.7416405586624895, 0.7434202872757183, 0.7434202872757183, 0.7434202872757183, 0.7434202872757183, 0.7434202872757183, 0.7455836178185461, 0.7455836178185461, 0.7455836178185461, 0.7455836178185461, 0.7455836178185461, 0.7455836178185461, 0.7455836178185461, 0.7455836178185461, 0.7455836178185461, 0.7455836178185461, 0.7455836178185461, 0.7455836178185461]
[0.17793597185243543, 0.2144108996108795, 0.21653440498167031, 0.22365111205934185, 0.23167697477995342, 0.23483943158463236, 0.2434606884265148, 0.2577528970694962, 0.26417977356033895, 0.26831841967880654, 0.2734541567268557, 0.2789743207706925, 0.27814205439764317, 0.2840327419156079, 0.29549877313338113, 0.30071741722178813, 0.310140096881728, 0.3221285192540797, 0.33167326843596556, 0.3411679070773162, 0.34240989106465736, 0.34931033395024125, 0.35494438984241955, 0.36439729393752385, 0.36817021688724194, 0.3861058101001073, 0.38903868917097595, 0.39099490100514134, 0.39606344565786106, 0.39853799822229763, 0.4105445779780895, 0.41453688795144433, 0.42319150323178745, 0.4270644173429747, 0.43715943621150927, 0.44205784385939567, 0.44290149744000823, 0.45051322191490834, 0.45051322191490834, 0.4554420675987337, 0.45672282893821803, 0.4617929698882279, 0.46573339430609734, 0.4767744385414775, 0.48728522959233855, 0.48728522959233855, 0.4888363475469321, 0.4888363475469321, 0.4960317947926003, 0.49835166098199707, 0.49835166098199707, 0.504678503754061, 0.504678503754061, 0.504678503754061, 0.504678503754061, 0.504678503754061, 0.504678503754061, 0.504678503754061, 0.5144385933245619, 0.5144385933245619, 0.519703094127485, 0.5246891680817695, 0.5246891680817695, 0.5246891680817695, 0.5246891680817695, 0.5246891680817695, 0.5246891680817695, 0.5312875039165553, 0.5312875039165553, 0.5312875039165553, 0.5532849540284639, 0.5532849540284639, 0.5532849540284639, 0.5585032731626292, 0.5585032731626292, 0.5585032731626292, 0.5585032731626292, 0.5585032731626292, 0.5655656301687317, 0.5655656301687317, 0.5655656301687317, 0.5655656301687317, 0.5655656301687317, 0.5655656301687317, 0.5655656301687317, 0.5655656301687317, 0.5655656301687317, 0.5655656301687317, 0.5655656301687317, 0.5655656301687317]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_3
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((647, 2666), (81, 2666), (647, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19668.0)
('VALIDATE SUM PROTEIN TEST: ', 2359.0)
((647, 331), (647, 331), 25932.707, 57502.0)
('Error: ', tensor(46833.9141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5399098366917129, 0.29216808938845606)
('Val: AUC, AUPR, Erros: ', 0.528922668853265, 0.3291417829164852, 6260.919)
('Test: AUC, AUPR, Erros: ', 0.5349018717762423, 0.2894214307555101, 6248.6807)
((647, 331), (647, 331), 54741.8, 57502.0)
('Error: ', tensor(41440.8828, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5918837406380646, 0.3345464993048931)
('Val: AUC, AUPR, Erros: ', 0.563886833222886, 0.3575959153489656, 5472.2764)
('Test: AUC, AUPR, Erros: ', 0.5686072287055886, 0.31828457960629725, 5499.2686)
((647, 331), (647, 331), 54834.11, 57502.0)
('Error: ', tensor(40976.5625, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6101637566453456, 0.350857712048682)
('Val: AUC, AUPR, Erros: ', 0.5761615985546448, 0.3690849035716748, 5431.166)
('Test: AUC, AUPR, Erros: ', 0.5809757248061629, 0.3300015477278163, 5447.6753)
((647, 331), (647, 331), 53890.41, 57502.0)
('Error: ', tensor(40532.4609, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6288024257582904, 0.36915235851424616)
('Val: AUC, AUPR, Erros: ', 0.5915401955045807, 0.3827895424084873, 5392.681)
('Test: AUC, AUPR, Erros: ', 0.596512886012258, 0.34540345963552976, 5400.252)
