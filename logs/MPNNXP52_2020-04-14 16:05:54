class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)


        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.L1C = Linear(config.CHEM_FINGERPRINT_SIZE + config.EMBED_DIM, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=1)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=1)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)



        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.conv4= EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv4g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool4 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.conv5 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv5g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool5 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, drugId2ProteinIdList, drugGraphBatch, nDrug, drugFeatures = None, isDebug=False):


        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]


            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)
            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xProtein = self.nodesEmbedding(proteinNodes)
            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)

            iLevel = 0
            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv1(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch))
            else:
                xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            iLevel += 1

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv2(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch))
            else:
                xAtom = F.relu(self.conv2g(xAtom, edge_index))

            iLevel += 1
            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                xAtom = F.relu(self.conv3(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch, isDebug=isDebug))
            else:
                xAtom = F.relu(self.conv3g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            iLevel += 1
            xsum = 0
            if config.N_INNER_LAYER >= 4:
                if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                    xAtom = F.relu(self.conv4(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch))
                else:
                    xAtom = F.relu(self.conv4g(xAtom, edge_index))

                xAtom, edge_index, _, batch, _, _ = self.pool4(xAtom, edge_index, None, batch)
                x4 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
                xsum += x4
                iLevel += 1
                if config.N_INNER_LAYER == 5:
                    if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
                        xAtom = F.relu(self.conv5(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch))
                    else:
                        xAtom = F.relu(self.conv5g(xAtom, edge_index))

                    xAtom, edge_index, _, batch, _, _ = self.pool5(xAtom, edge_index, None, batch)
                    x5 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
                    xsum += x5

            xDrug = x1 + x2 + x3 + xsum


            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)

            # xDrug = self.lin2(xDrug)
            # xDrug = self.act2(xDrug)

            if config.COMBINE_FEATURE:
                #print (drugFeatures.shape, xDrug.shape)
                combinedFeatures = torch.cat((drugFeatures, xDrug), dim=1)
                xDrug = self.L1C(combinedFeatures)
                xDrug = self.actL1(xDrug)
                xDrug = self.L2(xDrug)
                xDrug = self.actL2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x = self.convD1(x, drugEdges)
            x = F.relu(x)
            x = self.convD2(x, drugEdges)
            x = F.relu(x)
            x = self.convD3(x, drugEdges)
            x = F.relu(x)
        if config.SE_GRAPH:
            # Conv SE:
            x = self.convS1(x, seEdges)
            x = F.relu(x)
            # x = self.convS2(x, seEdges)
            # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Combine Features: ', False)
('Inner mode: ', True)
('Cross Prob: ', 1)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7fbf718da850>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
KFold: 5 x 10
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19463.0)
('VALIDATE SUM PROTEIN TEST: ', 2334.0)
((646, 331), (646, 331), 38214.96, 59640.0)
('Error: ', tensor(45104.9453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5423877145325614, 0.30668873295130533)
('Val: AUC, AUPR, Erros: ', 0.5390369536124202, 0.2554304937486418, 4882.518)
('Test: AUC, AUPR, Erros: ', 0.5393172007342462, 0.28389158620116167, 5346.2637)
((646, 331), (646, 331), 61609.51, 59640.0)
('Error: ', tensor(44091.3125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4286209442499801, 0.24146573419550502)
('Val: AUC, AUPR, Erros: ', 0.47119412326199817, 0.21824307034250565, 4946.3325)
('Test: AUC, AUPR, Erros: ', 0.46468686324478264, 0.23345496043272082, 5286.6685)
((646, 331), (646, 331), 53561.668, 59640.0)
('Error: ', tensor(43522.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4725668273473702, 0.26561795207863753)
('Val: AUC, AUPR, Erros: ', 0.5126371451257833, 0.24780796263029814, 4817.44)
('Test: AUC, AUPR, Erros: ', 0.507571851887977, 0.25727449885722825, 5190.8433)
((646, 331), (646, 331), 61580.484, 59640.0)
('Error: ', tensor(42477.5078, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6342211084553926, 0.42356966470845747)
('Val: AUC, AUPR, Erros: ', 0.655629286368534, 0.3798154126798502, 4812.8877)
('Test: AUC, AUPR, Erros: ', 0.635237588242135, 0.3854619288996689, 5125.547)
((646, 331), (646, 331), 66402.836, 59640.0)
('Error: ', tensor(41060.9766, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7318827614226732, 0.553948717642696)
('Val: AUC, AUPR, Erros: ', 0.7231305554736678, 0.4941789064636874, 4733.94)
('Test: AUC, AUPR, Erros: ', 0.7091982010046394, 0.5027204830565707, 5007.452)
((646, 331), (646, 331), 39549.02, 59640.0)
('Error: ', tensor(38683.5391, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7454987902631872, 0.5697194250046148)
('Val: AUC, AUPR, Erros: ', 0.7368480447304975, 0.5051921908756305, 4191.379)
('Test: AUC, AUPR, Erros: ', 0.7242215913206359, 0.5221204054104207, 4644.593)
((646, 331), (646, 331), 55282.32, 59640.0)
('Error: ', tensor(35167.5234, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7522175831788451, 0.5877573421604517)
('Val: AUC, AUPR, Erros: ', 0.74705738059712, 0.5197676651160745, 4019.5586)
('Test: AUC, AUPR, Erros: ', 0.733961733148685, 0.5375643961691806, 4368.914)
((646, 331), (646, 331), 64005.668, 59640.0)
('Error: ', tensor(34696.6641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7582542763596918, 0.6017208935105688)
('Val: AUC, AUPR, Erros: ', 0.748264480004071, 0.5206150637368661, 4144.492)
('Test: AUC, AUPR, Erros: ', 0.7390987434648949, 0.5413453673323003, 4456.809)
((646, 331), (646, 331), 58391.17, 59640.0)
('Error: ', tensor(34334.5195, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7621637285588583, 0.6072784032683037)
('Val: AUC, AUPR, Erros: ', 0.7487396463786662, 0.5143673792800696, 4071.8228)
('Test: AUC, AUPR, Erros: ', 0.7407492389598314, 0.5384754683321398, 4432.1973)
((646, 331), (646, 331), 59987.508, 59640.0)
('Error: ', tensor(34025.8633, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.766714118109006, 0.6166961883626634)
('Val: AUC, AUPR, Erros: ', 0.7466812479670683, 0.5035199648780816, 4145.5615)
('Test: AUC, AUPR, Erros: ', 0.739967392649978, 0.531603742611795, 4523.909)
((646, 331), (646, 331), 65655.586, 59640.0)
('Error: ', tensor(34015.6523, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7692291815742538, 0.6221254234947995)
('Val: AUC, AUPR, Erros: ', 0.744481769741941, 0.49332088909537714, 4409.138)
('Test: AUC, AUPR, Erros: ', 0.737163288963251, 0.5214208349947789, 4921.1587)
((646, 331), (646, 331), 50001.305, 59640.0)
('Error: ', tensor(34576.6016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7717098324209936, 0.6251088545891792)
('Val: AUC, AUPR, Erros: ', 0.7459804672141799, 0.49041912793050957, 4114.3716)
('Test: AUC, AUPR, Erros: ', 0.7382272049387604, 0.5218053127530637, 4576.874)
((646, 331), (646, 331), 66004.97, 59640.0)
('Error: ', tensor(33691.0352, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7732916215486095, 0.6295343022232968)
('Val: AUC, AUPR, Erros: ', 0.7445927645336153, 0.4916504671750045, 4506.1836)
('Test: AUC, AUPR, Erros: ', 0.7362914546493935, 0.5182724707649089, 5117.6777)
((646, 331), (646, 331), 59214.383, 59640.0)
('Error: ', tensor(33322.6211, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7767738014286802, 0.6355765865906408)
('Val: AUC, AUPR, Erros: ', 0.743807076646033, 0.48324369775957243, 4405.5923)
('Test: AUC, AUPR, Erros: ', 0.7328184378483622, 0.5069386470554045, 5051.089)
((646, 331), (646, 331), 58509.734, 59640.0)
('Error: ', tensor(33161.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7790794171807943, 0.638958740116853)
('Val: AUC, AUPR, Erros: ', 0.7428655846708091, 0.4753658217664858, 4589.34)
('Test: AUC, AUPR, Erros: ', 0.7288610542220739, 0.4957387873089404, 5444.0156)
((646, 331), (646, 331), 49964.695, 59640.0)
('Error: ', tensor(33806.4219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7829898323893264, 0.6428587960675253)
('Val: AUC, AUPR, Erros: ', 0.7405602965855348, 0.46397631809236967, 4484.798)
('Test: AUC, AUPR, Erros: ', 0.7253705138020323, 0.48574976373141837, 5260.991)
((646, 331), (646, 331), 67388.05, 59640.0)
('Error: ', tensor(33242.7969, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7820724192960634, 0.6412651105622174)
('Val: AUC, AUPR, Erros: ', 0.7426822725033286, 0.47378537499023754, 4999.0166)
('Test: AUC, AUPR, Erros: ', 0.725518014482344, 0.4924714374462616, 6000.98)
Train: 0.7522 0.5878
Test: 0.7340 0.5376
[0.6364560290496265, 0.6412461451853613, 0.6436022406659048, 0.6338302265637807, 0.6288454842428762, 0.6190923607999801, 0.6161755603934218, 0.6163483675072488, 0.620049158366456, 0.618402875429466, 0.6242714520573955, 0.6266955545168013, 0.6288581606389846, 0.6298117590158792, 0.6349265963465094, 0.637045524216973, 0.6405967563835806, 0.6459753402705304, 0.648128557082738, 0.6516387612885026, 0.6517207100051097, 0.6552010947074552, 0.6574789022678714, 0.6621715112377273, 0.6635014299072223, 0.6658176642339378, 0.6682366269148463, 0.6691106245017562, 0.671490420925094, 0.6722591368520472, 0.6772600596963946, 0.6791678598208224, 0.6831927787544518, 0.6847709165907505, 0.6882575224855751, 0.6897361639866224, 0.6905123208062774, 0.6940976985217495, 0.6940976985217495, 0.6958116574365615, 0.6963466394129696, 0.6981505564634575, 0.6992253378673571, 0.7033779587925427, 0.7066415939974876, 0.7066415939974876, 0.7077743525006372, 0.7077743525006372, 0.7101710032079191, 0.7116031401158848, 0.7116031401158848, 0.7141176172036482, 0.7141176172036482, 0.7141176172036482, 0.7141176172036482, 0.7141176172036482, 0.7141176172036482, 0.7141176172036482, 0.7170193526577284, 0.7170193526577284, 0.7184000028980081, 0.7201209347468357, 0.7201209347468357, 0.7201209347468357, 0.7201209347468357, 0.7201209347468357, 0.7201209347468357, 0.7222411185200437, 0.7222411185200437, 0.7222411185200437, 0.7290930714999615, 0.7290930714999615, 0.7290930714999615, 0.7312366120106626, 0.7312366120106626, 0.7312366120106626, 0.7312366120106626, 0.7312366120106626, 0.733961733148685, 0.733961733148685, 0.733961733148685, 0.733961733148685, 0.733961733148685, 0.733961733148685, 0.733961733148685, 0.733961733148685, 0.733961733148685, 0.733961733148685, 0.733961733148685, 0.733961733148685]
[0.1642710309179847, 0.17506603801850906, 0.17853841844211965, 0.17767238532841662, 0.1811711356200837, 0.17871054973075529, 0.1849105276674236, 0.20152897063632091, 0.21722840236847332, 0.2143598962059776, 0.23045371677806475, 0.23578852664591415, 0.2414920578674799, 0.24391586198984047, 0.2551608609407444, 0.2601932406028624, 0.26832973014589273, 0.28338698194223044, 0.2869479510940404, 0.2946245246262091, 0.29496568028483816, 0.30423255448572106, 0.30942316197551106, 0.3209138116982977, 0.32494220482431957, 0.32872733022264455, 0.33571698533568045, 0.338177330756751, 0.3458404850061527, 0.3485174262084172, 0.36150315250969006, 0.3653615292396104, 0.37715273896679036, 0.3808501898878658, 0.3906804720907184, 0.39553780495973434, 0.3967945466593519, 0.4047939526014614, 0.4047939526014614, 0.40958322928810953, 0.4099511677815653, 0.4157440275473699, 0.4195114393884144, 0.43183504303088444, 0.44261692431854993, 0.44261692431854993, 0.44636684175442165, 0.44636684175442165, 0.4543187839883085, 0.45906128276446473, 0.45906128276446473, 0.4671067656215445, 0.4671067656215445, 0.4671067656215445, 0.4671067656215445, 0.4671067656215445, 0.4671067656215445, 0.4671067656215445, 0.4773412743522361, 0.4773412743522361, 0.4820085583379454, 0.4879956882149557, 0.4879956882149557, 0.4879956882149557, 0.4879956882149557, 0.4879956882149557, 0.4879956882149557, 0.49613348856367834, 0.49613348856367834, 0.49613348856367834, 0.5210916823653672, 0.5210916823653672, 0.5210916823653672, 0.5280364379209236, 0.5280364379209236, 0.5280364379209236, 0.5280364379209236, 0.5280364379209236, 0.5375643961691806, 0.5375643961691806, 0.5375643961691806, 0.5375643961691806, 0.5375643961691806, 0.5375643961691806, 0.5375643961691806, 0.5375643961691806, 0.5375643961691806, 0.5375643961691806, 0.5375643961691806, 0.5375643961691806]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19245.0)
('VALIDATE SUM PROTEIN TEST: ', 2846.0)
((646, 331), (646, 331), 43178.992, 59364.0)
('Error: ', tensor(44099.2266, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5087305742061835, 0.2821295175792377)
('Val: AUC, AUPR, Erros: ', 0.512579544064438, 0.27965232937805146, 5425.7573)
('Test: AUC, AUPR, Erros: ', 0.4970724425127314, 0.23147099555932873, 4833.1743)
((646, 331), (646, 331), 46409.414, 59364.0)
('Error: ', tensor(43713.3008, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.49523101831719485, 0.27357093693812734)
('Val: AUC, AUPR, Erros: ', 0.472007489125136, 0.2500520321067914, 5400.2095)
('Test: AUC, AUPR, Erros: ', 0.5293663034125372, 0.25431574334492013, 4804.896)
((646, 331), (646, 331), 55452.355, 59364.0)
('Error: ', tensor(42295.4297, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6508014755539465, 0.43212673181735206)
('Val: AUC, AUPR, Erros: ', 0.636271195972503, 0.3909344029636662, 5233.596)
('Test: AUC, AUPR, Erros: ', 0.6732073956931879, 0.40759065060713034, 4736.1606)
((646, 331), (646, 331), 68500.82, 59364.0)
('Error: ', tensor(37765.3398, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7241943383318, 0.5463798881781926)
('Val: AUC, AUPR, Erros: ', 0.720804944052923, 0.533363485432329, 4717.7188)
('Test: AUC, AUPR, Erros: ', 0.7283190885101498, 0.5008209759391423, 4399.9443)
((646, 331), (646, 331), 46588.7, 59364.0)
('Error: ', tensor(36934.6328, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.739139569151731, 0.5628489619314953)
('Val: AUC, AUPR, Erros: ', 0.7315279132888228, 0.5412530405796115, 4568.0825)
('Test: AUC, AUPR, Erros: ', 0.7363948987911456, 0.5096877230544339, 4079.5103)
((646, 331), (646, 331), 67235.414, 59364.0)
('Error: ', tensor(35866.5234, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7435096740023455, 0.5714871520609077)
('Val: AUC, AUPR, Erros: ', 0.7260235590497268, 0.5329266625792209, 4586.7056)
('Test: AUC, AUPR, Erros: ', 0.7399004713583994, 0.5138120384647489, 4227.2427)
((646, 331), (646, 331), 58515.445, 59364.0)
('Error: ', tensor(34918.2852, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7561736579517606, 0.5831765607329109)
('Val: AUC, AUPR, Erros: ', 0.7331018000731161, 0.5398525322326047, 4503.3125)
('Test: AUC, AUPR, Erros: ', 0.7422193854126795, 0.5088486211100255, 4102.7026)
((646, 331), (646, 331), 67414.375, 59364.0)
('Error: ', tensor(34694.7656, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7622411125779507, 0.599034894390737)
('Val: AUC, AUPR, Erros: ', 0.7276467752954173, 0.5300052016846477, 4665.561)
('Test: AUC, AUPR, Erros: ', 0.7434282467649247, 0.5139862084460808, 4295.9717)
((646, 331), (646, 331), 61911.34, 59364.0)
('Error: ', tensor(33781.7422, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7746627699750819, 0.6116739209080838)
('Val: AUC, AUPR, Erros: ', 0.7340357059852891, 0.5353243521651629, 4549.2754)
('Test: AUC, AUPR, Erros: ', 0.7498598244447385, 0.5154874166335299, 4148.16)
((646, 331), (646, 331), 56584.44, 59364.0)
('Error: ', tensor(33317.7148, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7845982231807094, 0.6237989849919872)
('Val: AUC, AUPR, Erros: ', 0.7378565661007744, 0.5371790176675191, 4488.6465)
('Test: AUC, AUPR, Erros: ', 0.7500411650963388, 0.5102993398026578, 4093.0298)
((646, 331), (646, 331), 74519.625, 59364.0)
('Error: ', tensor(33933.9414, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7923899452421075, 0.6370249818319733)
('Val: AUC, AUPR, Erros: ', 0.7408346691269576, 0.5441887770734263, 4839.219)
('Test: AUC, AUPR, Erros: ', 0.7431206049070223, 0.4977851369149937, 4770.2275)
((646, 331), (646, 331), 61025.977, 59364.0)
('Error: ', tensor(32433.0703, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7989002481584846, 0.6431891690054841)
('Val: AUC, AUPR, Erros: ', 0.7465664590350443, 0.5560771638991796, 4446.6514)
('Test: AUC, AUPR, Erros: ', 0.7430872366126582, 0.5022511384020607, 4214.149)
((646, 331), (646, 331), 62431.51, 59364.0)
('Error: ', tensor(32009.1777, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8041122597120688, 0.6523172350410158)
('Val: AUC, AUPR, Erros: ', 0.746300952016022, 0.5549225496358423, 4552.1147)
('Test: AUC, AUPR, Erros: ', 0.7370313103267365, 0.4903009326592395, 4389.7744)
((646, 331), (646, 331), 56409.832, 59364.0)
('Error: ', tensor(31697.7402, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8088234842619959, 0.6620039344530507)
('Val: AUC, AUPR, Erros: ', 0.7463899681675934, 0.5586031900425519, 4423.772)
('Test: AUC, AUPR, Erros: ', 0.7314066841870781, 0.47573898934743153, 4328.812)
((646, 331), (646, 331), 62086.28, 59364.0)
('Error: ', tensor(31307.1523, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.81188074730983, 0.6677709844879811)
('Val: AUC, AUPR, Erros: ', 0.7425967623938117, 0.5521862260514165, 4564.581)
('Test: AUC, AUPR, Erros: ', 0.7250229196482934, 0.46010176467439656, 4651.996)
((646, 331), (646, 331), 58958.777, 59364.0)
('Error: ', tensor(30960.0664, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8150744882390832, 0.6740588851334038)
('Val: AUC, AUPR, Erros: ', 0.7407747994831474, 0.5493404240711856, 4548.5493)
('Test: AUC, AUPR, Erros: ', 0.7216369187429794, 0.45013099730950257, 4612.138)
((646, 331), (646, 331), 60399.69, 59364.0)
('Error: ', tensor(30617.0098, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8177338648596192, 0.6795877081334807)
('Val: AUC, AUPR, Erros: ', 0.7367280662499206, 0.5410688391874094, 4628.282)
('Test: AUC, AUPR, Erros: ', 0.7186944274110131, 0.4444107934606009, 4647.6196)
Train: 0.8088 0.6620
Test: 0.7314 0.4757
[0.5699824114743266, 0.579058546987835, 0.5885628473749269, 0.5909603541064593, 0.5934519823585102, 0.5964609651296833, 0.5985372408432929, 0.6048782490546941, 0.6097127932821184, 0.6091197449227134, 0.6162365793493225, 0.6206435046866786, 0.620242371021882, 0.6199454911486613, 0.6250907758412108, 0.6282010196457899, 0.6299111782492611, 0.6343574375423096, 0.6378964545380459, 0.6401954303403155, 0.640682500422704, 0.6442588205305564, 0.6488472236776498, 0.6511270254962125, 0.651976759650869, 0.6556345194890203, 0.6571022907168598, 0.6578080079693908, 0.6596596833802708, 0.6608330508198094, 0.6672981804068605, 0.6705590546817289, 0.6737805729513684, 0.6756528291434539, 0.6784423127644692, 0.6803083444846079, 0.681909941803204, 0.68593165779558, 0.68593165779558, 0.6885743827482875, 0.690054661362677, 0.6914634985262506, 0.6932096917562267, 0.6977839629415017, 0.7012790981533307, 0.7012790981533307, 0.7020618483250789, 0.7020618483250789, 0.7050700264149208, 0.7064630574558368, 0.7064630574558368, 0.7094972180433547, 0.7094972180433547, 0.7094972180433547, 0.7094972180433547, 0.7094972180433547, 0.7094972180433547, 0.7094972180433547, 0.7126749780128591, 0.7126749780128591, 0.7142340232798843, 0.7162467494035505, 0.7162467494035505, 0.7162467494035505, 0.7162467494035505, 0.7162467494035505, 0.7162467494035505, 0.718783715770735, 0.718783715770735, 0.718783715770735, 0.7259461999818047, 0.7259461999818047, 0.7259461999818047, 0.7283726734390957, 0.7283726734390957, 0.7283726734390957, 0.7283726734390957, 0.7283726734390957, 0.7314066841870781, 0.7314066841870781, 0.7314066841870781, 0.7314066841870781, 0.7314066841870781, 0.7314066841870781, 0.7314066841870781, 0.7314066841870781, 0.7314066841870781, 0.7314066841870781, 0.7314066841870781, 0.7314066841870781]
[0.12719189872774528, 0.11979151456317028, 0.12539068298816525, 0.1261764289541402, 0.1303050449418572, 0.13314837065361146, 0.1391479697822634, 0.15235980888866096, 0.15835685240814323, 0.16033192800889878, 0.17205249281300708, 0.1800285042227484, 0.1836150394126862, 0.18416809838021375, 0.19573463990886214, 0.20300114910568012, 0.20889037577046637, 0.21919798950522612, 0.226685808273461, 0.2330450823539199, 0.23396317547403506, 0.24207917210392552, 0.25305518711583996, 0.2596983566900073, 0.26240972777292926, 0.27006689973428455, 0.2751395485321305, 0.27633005209207506, 0.2794806284452861, 0.2820521995368167, 0.2979307717455741, 0.3055437485258018, 0.3133556779877317, 0.31959591767409623, 0.3255727641635593, 0.3305434686101586, 0.335140230848288, 0.34689003315872147, 0.34689003315872147, 0.35346005923657065, 0.35708811751698627, 0.36008967996413493, 0.36477142184902966, 0.3780495497234282, 0.3878766312795694, 0.3878766312795694, 0.389519295629212, 0.389519295629212, 0.39774390241346774, 0.40171571996029853, 0.40171571996029853, 0.4097276697576123, 0.4097276697576123, 0.4097276697576123, 0.4097276697576123, 0.4097276697576123, 0.4097276697576123, 0.4097276697576123, 0.4181795810465679, 0.4181795810465679, 0.42286423785892524, 0.42854902476493034, 0.42854902476493034, 0.42854902476493034, 0.42854902476493034, 0.42854902476493034, 0.42854902476493034, 0.43671357050144455, 0.43671357050144455, 0.43671357050144455, 0.45887657535725157, 0.45887657535725157, 0.45887657535725157, 0.46619965559837206, 0.46619965559837206, 0.46619965559837206, 0.46619965559837206, 0.46619965559837206, 0.47573898934743153, 0.47573898934743153, 0.47573898934743153, 0.47573898934743153, 0.47573898934743153, 0.47573898934743153, 0.47573898934743153, 0.47573898934743153, 0.47573898934743153, 0.47573898934743153, 0.47573898934743153, 0.47573898934743153]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_2
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19732.0)
('VALIDATE SUM PROTEIN TEST: ', 2552.0)
((646, 331), (646, 331), 27910.94, 58006.0)
('Error: ', tensor(46508.2344, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5019841580549341, 0.2683232157572655)
('Val: AUC, AUPR, Erros: ', 0.5024954773276066, 0.2818345730839938, 6095.297)
('Test: AUC, AUPR, Erros: ', 0.5106899902544664, 0.2722619854519754, 5828.7764)
((646, 331), (646, 331), 51364.95, 58006.0)
('Error: ', tensor(42270.2070, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5819868262425267, 0.3545638566260074)
('Val: AUC, AUPR, Erros: ', 0.5805870564730411, 0.3684054020209315, 5485.4956)
('Test: AUC, AUPR, Erros: ', 0.5917038734519305, 0.3650177337524749, 5294.0444)
((646, 331), (646, 331), 51809.43, 58006.0)
('Error: ', tensor(41388.0625, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7120057162680797, 0.5249943623703235)
('Val: AUC, AUPR, Erros: ', 0.6947612805130928, 0.5214969284861014, 5380.9434)
('Test: AUC, AUPR, Erros: ', 0.7006528824777051, 0.5105037782522293, 5194.131)
((646, 331), (646, 331), 68254.695, 58006.0)
('Error: ', tensor(37587.6250, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7377964613050865, 0.5556972719672659)
('Val: AUC, AUPR, Erros: ', 0.7168976694726206, 0.5469155740472684, 4887.624)
('Test: AUC, AUPR, Erros: ', 0.7222278968327649, 0.5344953424525798, 4772.036)
((646, 331), (646, 331), 50190.277, 58006.0)
('Error: ', tensor(35139.0391, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7504097927290752, 0.5743563849298869)
('Val: AUC, AUPR, Erros: ', 0.7228262647460847, 0.5570472196858, 4724.443)
('Test: AUC, AUPR, Erros: ', 0.7282108140652699, 0.5387438395810196, 4572.345)
((646, 331), (646, 331), 57691.586, 58006.0)
('Error: ', tensor(34117.7891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7590002148831212, 0.5929922508223148)
('Val: AUC, AUPR, Erros: ', 0.7238548268280047, 0.5613005978516197, 4629.894)
('Test: AUC, AUPR, Erros: ', 0.7283096947014169, 0.5330495495235925, 4518.905)
((646, 331), (646, 331), 58931.375, 58006.0)
('Error: ', tensor(33590.6641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7673425665874026, 0.6030729378120169)
('Val: AUC, AUPR, Erros: ', 0.725463622600804, 0.5616075478286864, 4615.858)
('Test: AUC, AUPR, Erros: ', 0.7296182046792921, 0.5276793300495436, 4539.8677)
((646, 331), (646, 331), 57383.74, 58006.0)
('Error: ', tensor(33260.4844, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7730849272856591, 0.610522265610031)
('Val: AUC, AUPR, Erros: ', 0.7268192013286456, 0.561494747044363, 4617.941)
('Test: AUC, AUPR, Erros: ', 0.7333327972327921, 0.5381163414195247, 4485.7754)
((646, 331), (646, 331), 54586.273, 58006.0)
('Error: ', tensor(33135.0234, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7789288862597491, 0.6196947771408985)
('Val: AUC, AUPR, Erros: ', 0.7268858782073943, 0.5625528744392085, 4643.801)
('Test: AUC, AUPR, Erros: ', 0.7342965394276024, 0.5406031167236317, 4474.781)
((646, 331), (646, 331), 54632.234, 58006.0)
('Error: ', tensor(32893.4453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7840763466955624, 0.6263389146792153)
('Val: AUC, AUPR, Erros: ', 0.72509990258439, 0.561826559371239, 4653.647)
('Test: AUC, AUPR, Erros: ', 0.7337271091520878, 0.5396230674068832, 4483.9478)
((646, 331), (646, 331), 56547.414, 58006.0)
('Error: ', tensor(32538.8164, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7885065872781395, 0.6324437678204864)
('Val: AUC, AUPR, Erros: ', 0.7212459427812764, 0.5584121236277348, 4663.563)
('Test: AUC, AUPR, Erros: ', 0.7313481389521925, 0.5322316305598649, 4521.992)
((646, 331), (646, 331), 58200.582, 58006.0)
('Error: ', tensor(32242.5156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7920684991655669, 0.6379188330876607)
('Val: AUC, AUPR, Erros: ', 0.7092604202522257, 0.5501461216181176, 4728.9194)
('Test: AUC, AUPR, Erros: ', 0.7241953987229592, 0.5262686456049239, 4578.4805)
((646, 331), (646, 331), 60870.945, 58006.0)
('Error: ', tensor(31990.9277, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.795895473048515, 0.6432504879742695)
('Val: AUC, AUPR, Erros: ', 0.7024212848666647, 0.544023465239201, 4761.913)
('Test: AUC, AUPR, Erros: ', 0.7145213940716243, 0.5166044160119252, 4686.431)
((646, 331), (646, 331), 68834.23, 58006.0)
('Error: ', tensor(32175.0215, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8007306884120039, 0.6495359702784531)
('Val: AUC, AUPR, Erros: ', 0.7033902996243986, 0.5418853095129686, 4797.939)
('Test: AUC, AUPR, Erros: ', 0.7162104627023944, 0.5114524693940201, 4887.9062)
((646, 331), (646, 331), 66689.055, 58006.0)
('Error: ', tensor(31826.3242, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.804247279092347, 0.6524087883984895)
('Val: AUC, AUPR, Erros: ', 0.710661816702056, 0.5411579565581337, 4774.9517)
('Test: AUC, AUPR, Erros: ', 0.7119642332019054, 0.5067477971844555, 4909.9233)
((646, 331), (646, 331), 57531.035, 58006.0)
('Error: ', tensor(31365.1562, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8084764978769274, 0.6568823464083764)
('Val: AUC, AUPR, Erros: ', 0.7039801020178792, 0.5293156818811575, 4815.8394)
('Test: AUC, AUPR, Erros: ', 0.7049596362042843, 0.4995422184020626, 4786.8926)
((646, 331), (646, 331), 60017.145, 58006.0)
('Error: ', tensor(31147.8828, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8109925965417262, 0.6604006209878985)
('Val: AUC, AUPR, Erros: ', 0.7034607752883285, 0.5239788936469459, 4842.9863)
('Test: AUC, AUPR, Erros: ', 0.7099268458551639, 0.5069433438786463, 4778.786)
Train: 0.7673 0.6031
Test: 0.7296 0.5277
[0.596413931052649, 0.597324489419351, 0.5995884087982614, 0.6001814385582369, 0.5926860587346203, 0.591399898467773, 0.5953571125725369, 0.5921063475349995, 0.59542532764117, 0.5962329619281908, 0.6008489870074079, 0.6041591284682244, 0.6058716925581804, 0.6090439631927657, 0.6146529975541355, 0.6177711918994138, 0.6227760606969168, 0.6283988982810311, 0.6334582186975641, 0.6371086415428009, 0.6374839317607625, 0.6410212370081031, 0.6441359379230014, 0.6483898365184604, 0.6503108437595787, 0.6572947228312025, 0.6591190346442922, 0.6601757783961865, 0.662772741103921, 0.6637154111896946, 0.6705919370395277, 0.6729403579159827, 0.6761910410450738, 0.6779029060022269, 0.6818336798981077, 0.6836099914716217, 0.6845651130270529, 0.6881123320245982, 0.6881123320245982, 0.6900671665123521, 0.6911474031051086, 0.6930096254989265, 0.6945655819101689, 0.6988444693338376, 0.7027942782649672, 0.7027942782649672, 0.7034250435203373, 0.7034250435203373, 0.7058103578891977, 0.7067445880256459, 0.7067445880256459, 0.7092456512674037, 0.7092456512674037, 0.7092456512674037, 0.7092456512674037, 0.7092456512674037, 0.7092456512674037, 0.7092456512674037, 0.7126118703562446, 0.7126118703562446, 0.7144660190868549, 0.7161624523655052, 0.7161624523655052, 0.7161624523655052, 0.7161624523655052, 0.7161624523655052, 0.7161624523655052, 0.7183987998420504, 0.7183987998420504, 0.7183987998420504, 0.72539918933178, 0.72539918933178, 0.72539918933178, 0.7273099573240867, 0.7273099573240867, 0.7273099573240867, 0.7273099573240867, 0.7273099573240867, 0.7296182046792921, 0.7296182046792921, 0.7296182046792921, 0.7296182046792921, 0.7296182046792921, 0.7296182046792921, 0.7296182046792921, 0.7296182046792921, 0.7296182046792921, 0.7296182046792921, 0.7296182046792921, 0.7296182046792921]
[0.15593587482893242, 0.16630976382186977, 0.17005500331691115, 0.17634709005260996, 0.17161752914001413, 0.17522063554785708, 0.18684802087825567, 0.18869233640645136, 0.19678140131451471, 0.1994343211288999, 0.20931689174697765, 0.2169343404696543, 0.22211637805870427, 0.22750885910228044, 0.23870374489554763, 0.24531214770380566, 0.2547583700002549, 0.2680868313678125, 0.27833292343326677, 0.2864681172978748, 0.2873934592899771, 0.2954714368725543, 0.30328836097611034, 0.31167804633546614, 0.3159218194715837, 0.32965777666342877, 0.3331485096751956, 0.3348680396352952, 0.33925025429197997, 0.3416938729673159, 0.35765844461319724, 0.362461609757475, 0.37082991627904355, 0.3750770650016423, 0.3847617637378944, 0.3897326595801095, 0.3916715161611931, 0.3993830587715035, 0.3993830587715035, 0.40446986394060036, 0.406776815744324, 0.41174690262489794, 0.41665767228564254, 0.42862434221952944, 0.44027523220371423, 0.44027523220371423, 0.4420846544905478, 0.4420846544905478, 0.4489714203671048, 0.45190984492585545, 0.45190984492585545, 0.4590412516474175, 0.4590412516474175, 0.4590412516474175, 0.4590412516474175, 0.4590412516474175, 0.4590412516474175, 0.4590412516474175, 0.46940704188914095, 0.46940704188914095, 0.475710229379653, 0.48120116472152197, 0.48120116472152197, 0.48120116472152197, 0.48120116472152197, 0.48120116472152197, 0.48120116472152197, 0.4884152937621504, 0.4884152937621504, 0.4884152937621504, 0.5143906363909689, 0.5143906363909689, 0.5143906363909689, 0.5197096225032793, 0.5197096225032793, 0.5197096225032793, 0.5197096225032793, 0.5197096225032793, 0.5276793300495436, 0.5276793300495436, 0.5276793300495436, 0.5276793300495436, 0.5276793300495436, 0.5276793300495436, 0.5276793300495436, 0.5276793300495436, 0.5276793300495436, 0.5276793300495436, 0.5276793300495436, 0.5276793300495436]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_3
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((647, 2666), (81, 2666), (647, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19668.0)
('VALIDATE SUM PROTEIN TEST: ', 2359.0)
((647, 331), (647, 331), 41903.938, 57502.0)
('Error: ', tensor(43196.4297, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5040369915247364, 0.2769114021227209)
('Val: AUC, AUPR, Erros: ', 0.5052918532881918, 0.3057244990130795, 5745.5767)
('Test: AUC, AUPR, Erros: ', 0.5105646094787343, 0.2987070159104034, 5669.635)
((647, 331), (647, 331), 45895.52, 57502.0)
('Error: ', tensor(42771.6484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.47507635192017683, 0.2537163767754076)
('Val: AUC, AUPR, Erros: ', 0.5015755025351304, 0.29316717009547133, 5659.662)
('Test: AUC, AUPR, Erros: ', 0.4729886867258011, 0.27038280776678114, 5603.254)
((647, 331), (647, 331), 63870.562, 57502.0)
('Error: ', tensor(41968.2148, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5962737153487094, 0.36448786934110594)
('Val: AUC, AUPR, Erros: ', 0.598415610111642, 0.39201064088908744, 5455.15)
('Test: AUC, AUPR, Erros: ', 0.597529672543351, 0.38684874298573974, 5426.5503)
((647, 331), (647, 331), 58560.133, 57502.0)
('Error: ', tensor(41321.8242, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6606775739110249, 0.4339008023634316)
('Val: AUC, AUPR, Erros: ', 0.6434083601286174, 0.4542704925362539, 5415.917)
('Test: AUC, AUPR, Erros: ', 0.6666018219957588, 0.451907106872533, 5366.775)
((647, 331), (647, 331), 61578.535, 57502.0)
('Error: ', tensor(40009.6094, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.672014056674071, 0.45804641547067515)
('Val: AUC, AUPR, Erros: ', 0.6421415736459893, 0.45774976590314914, 5275.0234)
('Test: AUC, AUPR, Erros: ', 0.6871772211175835, 0.48592405008610395, 5172.771)
((647, 331), (647, 331), 69446.45, 57502.0)
('Error: ', tensor(36255.2383, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7311435410593093, 0.5397371621281827)
('Val: AUC, AUPR, Erros: ', 0.7165270527078493, 0.5451397476421478, 4744.5317)
('Test: AUC, AUPR, Erros: ', 0.7189530957981201, 0.5433756943031097, 4727.1616)
((647, 331), (647, 331), 63422.19, 57502.0)
('Error: ', tensor(34969.7188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7449360760439254, 0.5672854772606352)
('Val: AUC, AUPR, Erros: ', 0.7253517784590843, 0.5640319104434668, 4666.5796)
('Test: AUC, AUPR, Erros: ', 0.7188575522514019, 0.5501341377574364, 4693.527)
((647, 331), (647, 331), 58402.66, 57502.0)
('Error: ', tensor(34009.8750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7595188567119386, 0.5838183465778448)
('Val: AUC, AUPR, Erros: ', 0.7201385292547774, 0.5609535147120569, 4689.426)
('Test: AUC, AUPR, Erros: ', 0.7198406655580954, 0.5523019605202106, 4650.332)
((647, 331), (647, 331), 60386.67, 57502.0)
('Error: ', tensor(33454.2891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7696879989179278, 0.5974117582713534)
('Val: AUC, AUPR, Erros: ', 0.7108664000460697, 0.5562171147119677, 4737.3394)
('Test: AUC, AUPR, Erros: ', 0.719195063383004, 0.5511240121026781, 4671.5444)
((647, 331), (647, 331), 61382.56, 57502.0)
('Error: ', tensor(32984.4180, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7802099953685379, 0.6102154905967384)
('Val: AUC, AUPR, Erros: ', 0.7023746939063183, 0.5519878723571172, 4772.4375)
('Test: AUC, AUPR, Erros: ', 0.7176321639041892, 0.5489020240481748, 4683.9517)
((647, 331), (647, 331), 53113.23, 57502.0)
('Error: ', tensor(32732.3438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7862210120100223, 0.6202390031436664)
('Val: AUC, AUPR, Erros: ', 0.7005318969170168, 0.5471862475312445, 4886.963)
('Test: AUC, AUPR, Erros: ', 0.7110705755528496, 0.5426025352941504, 4770.1626)
((647, 331), (647, 331), 52502.348, 57502.0)
('Error: ', tensor(32460.3203, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7922335747258185, 0.6293454200494489)
('Val: AUC, AUPR, Erros: ', 0.6996959287499, 0.5474897096170794, 4893.108)
('Test: AUC, AUPR, Erros: ', 0.7064185326604655, 0.5393623599154485, 4802.081)
((647, 331), (647, 331), 58641.023, 57502.0)
('Error: ', tensor(31856.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7981259313017628, 0.6377881237564368)
('Val: AUC, AUPR, Erros: ', 0.6948550097941383, 0.5407666028046612, 4865.1553)
('Test: AUC, AUPR, Erros: ', 0.6964963107373483, 0.5304653888756009, 4838.0967)
((647, 331), (647, 331), 63494.492, 57502.0)
('Error: ', tensor(31711.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8016353042915199, 0.6437449175461456)
('Val: AUC, AUPR, Erros: ', 0.691663827698803, 0.5356129088150121, 4881.2065)
('Test: AUC, AUPR, Erros: ', 0.6905870920012478, 0.5257669878153137, 4895.611)
((647, 331), (647, 331), 41381.438, 57502.0)
('Error: ', tensor(33422.8789, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8059882836763524, 0.6495950224854236)
('Val: AUC, AUPR, Erros: ', 0.6878076859274691, 0.5210394092422749, 5234.1934)
('Test: AUC, AUPR, Erros: ', 0.6825862389143454, 0.5143335363291596, 5133.4985)
((647, 331), (647, 331), 71251.05, 57502.0)
('Error: ', tensor(32167.0273, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8049241245131629, 0.6486107091256692)
('Val: AUC, AUPR, Erros: ', 0.6911475498323522, 0.5318207128966368, 4963.81)
('Test: AUC, AUPR, Erros: ', 0.6898305530006372, 0.5246472522111034, 4990.553)
((647, 331), (647, 331), 67298.49, 57502.0)
('Error: ', tensor(31554.3086, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8084853093649682, 0.6535091403788721)
('Val: AUC, AUPR, Erros: ', 0.6880355803553394, 0.5249772520025048, 4973.1636)
('Test: AUC, AUPR, Erros: ', 0.6881442169166463, 0.5200519561892001, 4975.942)
Train: 0.7449 0.5673
Test: 0.7189 0.5501
[0.5206189525418523, 0.5347304433273461, 0.5373279151873047, 0.5398026425194892, 0.5505358054363652, 0.5544562589312093, 0.560047014569146, 0.5671576270591517, 0.5739774511956023, 0.5753636695858815, 0.5769299934440448, 0.5808489797936259, 0.5825756370870396, 0.5856097599271072, 0.592630876354025, 0.5959771420944279, 0.6011842731114749, 0.6058240724900483, 0.6099670899978136, 0.6146324837858744, 0.6153043875026414, 0.6202975302731227, 0.6232138324628965, 0.6272468812919626, 0.6305528386559507, 0.6378446781246041, 0.6386254115154051, 0.639351913207984, 0.6421798550747377, 0.6433333585421039, 0.6497211787723762, 0.6534857138832442, 0.6573438781082991, 0.659591258778558, 0.6647614135202482, 0.6669250580495021, 0.6678927240131308, 0.6717072973822745, 0.6717072973822745, 0.6738048160042376, 0.6752687742219794, 0.6773453332554058, 0.6791809080235343, 0.6840496084628553, 0.6886424493244621, 0.6886424493244621, 0.6899833500339857, 0.6899833500339857, 0.693406569920678, 0.6947780837895217, 0.6947780837895217, 0.6977177452105647, 0.6977177452105647, 0.6977177452105647, 0.6977177452105647, 0.6977177452105647, 0.6977177452105647, 0.6977177452105647, 0.701046374786626, 0.701046374786626, 0.7026815162351274, 0.7046846839183691, 0.7046846839183691, 0.7046846839183691, 0.7046846839183691, 0.7046846839183691, 0.7046846839183691, 0.707183136668617, 0.707183136668617, 0.707183136668617, 0.714053008883991, 0.714053008883991, 0.714053008883991, 0.7163205321548066, 0.7163205321548066, 0.7163205321548066, 0.7163205321548066, 0.7163205321548066, 0.7188575522514019, 0.7188575522514019, 0.7188575522514019, 0.7188575522514019, 0.7188575522514019, 0.7188575522514019, 0.7188575522514019, 0.7188575522514019, 0.7188575522514019, 0.7188575522514019, 0.7188575522514019, 0.7188575522514019]
[0.13343625103440399, 0.15216245929555305, 0.15932496627660042, 0.16622197338045314, 0.18123279846498003, 0.1836344088291708, 0.19198219038499714, 0.20188196947477022, 0.21128078799139416, 0.21350067163726855, 0.21603363721213648, 0.22312538028193393, 0.22538703965534596, 0.23302256295319573, 0.24606830623574505, 0.25208926281325794, 0.2622786621846557, 0.26984283396404096, 0.277266115564579, 0.2850301515761292, 0.28558850075650277, 0.29610668430988096, 0.30151142301579154, 0.30950055314836544, 0.3173511632141811, 0.3338336315509122, 0.33394740004634277, 0.3353970184191163, 0.3426293124154015, 0.3465103812370436, 0.36041214800265237, 0.36840715804093876, 0.3768596205129665, 0.38261674276968183, 0.39603435465598724, 0.40181576819266507, 0.4031260789983138, 0.4112104753699663, 0.4112104753699663, 0.416954843523821, 0.4201604701987728, 0.4257057757459128, 0.43164551823202035, 0.44549856323860043, 0.45922258282450024, 0.45922258282450024, 0.4623276078744474, 0.4623276078744474, 0.4728476052273623, 0.4766451702242822, 0.4766451702242822, 0.48345490018431647, 0.48345490018431647, 0.48345490018431647, 0.48345490018431647, 0.48345490018431647, 0.48345490018431647, 0.48345490018431647, 0.49347867499049436, 0.49347867499049436, 0.4981273761089564, 0.5049043126623121, 0.5049043126623121, 0.5049043126623121, 0.5049043126623121, 0.5049043126623121, 0.5049043126623121, 0.5136975555743866, 0.5136975555743866, 0.5136975555743866, 0.5350799053053149, 0.5350799053053149, 0.5350799053053149, 0.5417845939429695, 0.5417845939429695, 0.5417845939429695, 0.5417845939429695, 0.5417845939429695, 0.5501341377574364, 0.5501341377574364, 0.5501341377574364, 0.5501341377574364, 0.5501341377574364, 0.5501341377574364, 0.5501341377574364, 0.5501341377574364, 0.5501341377574364, 0.5501341377574364, 0.5501341377574364, 0.5501341377574364]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_4
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((647, 2666), (80, 2666), (647, 331), (80, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19436.0)
('VALIDATE SUM PROTEIN TEST: ', 2616.0)
((647, 331), (647, 331), 45595.117, 57914.0)
('Error: ', tensor(42971.7578, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.49949056451713914, 0.2632590471177615)
('Val: AUC, AUPR, Erros: ', 0.5135087337298, 0.2705796206991877, 5359.7793)
('Test: AUC, AUPR, Erros: ', 0.4981000970388955, 0.28544865784604756, 5666.322)
((647, 331), (647, 331), 42151.875, 57914.0)
('Error: ', tensor(43459.9453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4850472549158599, 0.2563420282703961)
('Val: AUC, AUPR, Erros: ', 0.44883456704328917, 0.2344841308403335, 5436.5996)
('Test: AUC, AUPR, Erros: ', 0.49039575194829865, 0.28510002463170947, 5742.2915)
((647, 331), (647, 331), 62074.516, 57914.0)
('Error: ', tensor(41831.8008, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6236903101071891, 0.3803534834499192)
('Val: AUC, AUPR, Erros: ', 0.6233451367588514, 0.3616386867587362, 5225.49)
('Test: AUC, AUPR, Erros: ', 0.6130703983236079, 0.3929400570788014, 5432.3394)
((647, 331), (647, 331), 58747.375, 57914.0)
('Error: ', tensor(40142.9141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6968345485327686, 0.4966219364526445)
('Val: AUC, AUPR, Erros: ', 0.7056958596170861, 0.5074159289328367, 4997.1875)
('Test: AUC, AUPR, Erros: ', 0.6835807644670897, 0.5046905246436628, 5246.0547)
((647, 331), (647, 331), 49504.85, 57914.0)
('Error: ', tensor(36481.3125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7207215135336, 0.5370587319978501)
('Val: AUC, AUPR, Erros: ', 0.7248112004351295, 0.5377964942588438, 4532.4224)
('Test: AUC, AUPR, Erros: ', 0.715942708373623, 0.5549476882678618, 4789.5684)
((647, 331), (647, 331), 62249.617, 57914.0)
('Error: ', tensor(35530.2539, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7386946393982164, 0.551570347382671)
('Val: AUC, AUPR, Erros: ', 0.7498421355706276, 0.5636473766955711, 4377.7466)
('Test: AUC, AUPR, Erros: ', 0.7174804336409526, 0.5522433678633334, 4704.706)
((647, 331), (647, 331), 52621.06, 57914.0)
('Error: ', tensor(34840.8984, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7502227132133844, 0.5707957924373964)
('Val: AUC, AUPR, Erros: ', 0.7504618175314439, 0.567301557861096, 4361.969)
('Test: AUC, AUPR, Erros: ', 0.7193633113899941, 0.5531510669639091, 4755.9917)
((647, 331), (647, 331), 59574.145, 57914.0)
('Error: ', tensor(33727.0547, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7682624267487687, 0.5930936877509165)
('Val: AUC, AUPR, Erros: ', 0.7504552455915894, 0.5701639856746656, 4321.665)
('Test: AUC, AUPR, Erros: ', 0.706218960660999, 0.5457369823396888, 4786.1934)
((647, 331), (647, 331), 45353.13, 57914.0)
('Error: ', tensor(35077.1523, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7759953986926976, 0.6048726053746156)
('Val: AUC, AUPR, Erros: ', 0.7490348687402255, 0.5633274781145898, 4531.572)
('Test: AUC, AUPR, Erros: ', 0.7147731326888713, 0.5599848537039904, 4953.927)
((647, 331), (647, 331), 52356.887, 57914.0)
('Error: ', tensor(33209.5430, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7806122004489237, 0.6108329728329653)
('Val: AUC, AUPR, Erros: ', 0.7505855460537505, 0.5666612603841054, 4362.6855)
('Test: AUC, AUPR, Erros: ', 0.701702486825831, 0.5475677442576157, 4867.203)
((647, 331), (647, 331), 61120.457, 57914.0)
('Error: ', tensor(32607.3594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7878289852451522, 0.6219730672091565)
('Val: AUC, AUPR, Erros: ', 0.7486235939866729, 0.5608830906496003, 4377.624)
('Test: AUC, AUPR, Erros: ', 0.7030255679010117, 0.5506757156097188, 4793.809)
((647, 331), (647, 331), 57406.04, 57914.0)
('Error: ', tensor(32246.0176, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7944436740686209, 0.63194404157709)
('Val: AUC, AUPR, Erros: ', 0.745943660141891, 0.5537666652094884, 4405.1987)
('Test: AUC, AUPR, Erros: ', 0.6966445995576952, 0.5451260335562211, 4843.0977)
((647, 331), (647, 331), 58558.83, 57914.0)
('Error: ', tensor(31873.1680, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7997189118151645, 0.6401391819358335)
('Val: AUC, AUPR, Erros: ', 0.7397167948549637, 0.5389149841727128, 4492.868)
('Test: AUC, AUPR, Erros: ', 0.6945689676660212, 0.5402456101393602, 4865.7812)
((647, 331), (647, 331), 61596.52, 57914.0)
('Error: ', tensor(31585.7305, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8050482982043716, 0.6482677062213241)
('Val: AUC, AUPR, Erros: ', 0.7328632337671601, 0.5233620140708133, 4627.3975)
('Test: AUC, AUPR, Erros: ', 0.6934350754780391, 0.5359410182151798, 4875.25)
((647, 331), (647, 331), 50947.24, 57914.0)
('Error: ', tensor(31857.2305, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8094502897983723, 0.6548170087559095)
('Val: AUC, AUPR, Erros: ', 0.7299675995941248, 0.5104165982723191, 4608.263)
('Test: AUC, AUPR, Erros: ', 0.6928456565854514, 0.5305034938825853, 4945.548)
((647, 331), (647, 331), 51753.17, 57914.0)
('Error: ', tensor(31570.9961, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8116368175645342, 0.6576401612411509)
('Val: AUC, AUPR, Erros: ', 0.7302115956763297, 0.5020487587718482, 4664.0967)
('Test: AUC, AUPR, Erros: ', 0.6945331260190588, 0.5277892799007284, 4941.815)
((647, 331), (647, 331), 51783.89, 57914.0)
('Error: ', tensor(31422.7246, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8136602899200015, 0.6607090961070353)
('Val: AUC, AUPR, Erros: ', 0.7333921423553866, 0.4977244274346108, 4705.3115)
('Test: AUC, AUPR, Erros: ', 0.6966130073376533, 0.524231685260124, 4947.8594)
Train: 0.7683 0.5931
Test: 0.7062 0.5457
[0.5357051789620604, 0.5334071894900072, 0.5398196104688946, 0.5409630247796904, 0.5477734572905055, 0.5471940320850709, 0.5514341306976418, 0.5641490234992681, 0.5709093184195532, 0.5742262094421636, 0.5794229215249148, 0.5816490450991467, 0.5847768592086614, 0.5859860380494082, 0.5934309567702751, 0.6003279756842256, 0.6069794761291378, 0.6101833071883975, 0.6148709741238, 0.6172743155255389, 0.6177262266747752, 0.6209374104616046, 0.6244033993023859, 0.6279590473794262, 0.629501311711187, 0.6323283178244832, 0.6347793765219445, 0.6360068266606883, 0.6380305720629016, 0.6386524993255162, 0.6430899274885433, 0.646218459355881, 0.649667687346041, 0.6536767042999203, 0.6584929640814665, 0.6601607773424429, 0.6612406705590346, 0.6638133420720314, 0.6638133420720314, 0.666696016553853, 0.6680842116914282, 0.6705024240925795, 0.6719575808863767, 0.6775459589061765, 0.6811344398915873, 0.6811344398915873, 0.6817233600873283, 0.6817233600873283, 0.6840823428349261, 0.6854020072190035, 0.6854020072190035, 0.6880027930992554, 0.6880027930992554, 0.6880027930992554, 0.6880027930992554, 0.6880027930992554, 0.6880027930992554, 0.6880027930992554, 0.6910429768245756, 0.6910429768245756, 0.6926946050289884, 0.694153199927005, 0.694153199927005, 0.694153199927005, 0.694153199927005, 0.694153199927005, 0.694153199927005, 0.6960013383197118, 0.6960013383197118, 0.6960013383197118, 0.7022721516191262, 0.7022721516191262, 0.7022721516191262, 0.7041344727059844, 0.7041344727059844, 0.7041344727059844, 0.7041344727059844, 0.7041344727059844, 0.706218960660999, 0.706218960660999, 0.706218960660999, 0.706218960660999, 0.706218960660999, 0.706218960660999, 0.706218960660999, 0.706218960660999, 0.706218960660999, 0.706218960660999, 0.706218960660999, 0.706218960660999]
[0.14097426566480437, 0.15476212460341093, 0.15915845054618916, 0.16148489010005596, 0.1660212929209556, 0.16816571736376906, 0.1751463237661925, 0.19228321202262552, 0.20311353060948611, 0.2099860432310753, 0.21757704101174588, 0.22219632977199755, 0.22682038835868934, 0.22849147350877572, 0.244506357484007, 0.258118337448901, 0.2689680107081876, 0.27438997181685687, 0.284859617590997, 0.2919836024298315, 0.29291395602333087, 0.30101977863625007, 0.3082654953831382, 0.31527495466938266, 0.3187594222837631, 0.3259889521188197, 0.33234979800754594, 0.33502122495670095, 0.3381911011662575, 0.3408637005392482, 0.35322496709287576, 0.3615246179082441, 0.37174542029582563, 0.3819924947878807, 0.3959509250641889, 0.40120131877794013, 0.40359022419936724, 0.40954043279590435, 0.40954043279590435, 0.4200793573552887, 0.42359540701296816, 0.431158205834196, 0.4354167780593984, 0.45310303529644635, 0.46248582468858995, 0.46248582468858995, 0.4647933423067736, 0.4647933423067736, 0.4718344422875127, 0.4761439447830149, 0.4761439447830149, 0.48411223085498123, 0.48411223085498123, 0.48411223085498123, 0.48411223085498123, 0.48411223085498123, 0.48411223085498123, 0.48411223085498123, 0.4936680505241665, 0.4936680505241665, 0.49872618611575603, 0.5036691346340663, 0.5036691346340663, 0.5036691346340663, 0.5036691346340663, 0.5036691346340663, 0.5036691346340663, 0.5100036138976356, 0.5100036138976356, 0.5100036138976356, 0.5325055641996582, 0.5325055641996582, 0.5325055641996582, 0.5385124990937975, 0.5385124990937975, 0.5385124990937975, 0.5385124990937975, 0.5385124990937975, 0.5457369823396888, 0.5457369823396888, 0.5457369823396888, 0.5457369823396888, 0.5457369823396888, 0.5457369823396888, 0.5457369823396888, 0.5457369823396888, 0.5457369823396888, 0.5457369823396888, 0.5457369823396888, 0.5457369823396888]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_5
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19621.0)
('VALIDATE SUM PROTEIN TEST: ', 2591.0)
((646, 331), (646, 331), 43048.6, 58297.0)
('Error: ', tensor(43521.7656, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4780507456572426, 0.2508859529952902)
('Val: AUC, AUPR, Erros: ', 0.4776875163432787, 0.2527111206050744, 5506.4214)
('Test: AUC, AUPR, Erros: ', 0.4722837363020128, 0.2445922591080202, 5403.903)
