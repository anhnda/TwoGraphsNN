class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = XSAGE(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = XSAGE(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD3 = XSAGE(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.L1C = Linear(config.CHEM_FINGERPRINT_SIZE + config.EMBED_DIM, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        # self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=1)
        # self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=1)
        # self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=1)

        # self.conv4= EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv4g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool4 = TopKPooling(config.EMBED_DIM, ratio=1)

        # self.conv5 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv5g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool5 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, drugId2ProteinIdList, drugGraphBatch,
                nDrug, drugFeatures=None):

        if config.INNER_FEATURE and drugFeatures is not None:
            nDrug = drugFeatures.shape[0]

            xDrug = self.L1(drugFeatures)
            xDrug = self.actL1(xDrug)
            xDrug = self.L2(xDrug)
            xDrug = self.actL2(xDrug)

            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)
            x = torch.cat((xDrug, x), dim=0)

        elif config.INNER_GRAPH:
            xAtom, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
            # xDrug = self.mact1(self.mlinear1(xDrug))
            # xDrug = self.mact2(self.mlinear2(xDrug))

            xAtom = self.nodesEmbedding(xAtom)
            xAtom = xAtom.squeeze(1)

            xAtom = F.relu(self.conv1g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool1(xAtom, edge_index, None, batch)
            x1 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xAtom = F.relu(self.conv2g(xAtom, edge_index))

            xAtom, edge_index, _, batch, _, _ = self.pool2(xAtom, edge_index, None, batch)
            x2 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xAtom = F.relu(self.conv3g(xAtom, edge_index))
            xAtom, edge_index, _, batch, _, _ = self.pool3(xAtom, edge_index, None, batch)
            x3 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)

            xsum = 0
            #            if config.N_INNER_LAYER >= 4:
            #                if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
            #                    xAtom = F.relu(self.conv4(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch))
            #                else:
            #                    xAtom = F.relu(self.conv4g(xAtom, edge_index))
            #
            #                xAtom, edge_index, _, batch, _, _ = self.pool4(xAtom, edge_index, None, batch)
            #                x4 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            #                xsum += x4
            #                iLevel += 1
            #                if config.N_INNER_LAYER == 5:
            #                    if config.BOTH_GRAPH and config.EXT_MODE and iLevel >= config.INTER_LEVELS:
            #                        xAtom = F.relu(self.conv5(xAtom, edge_index, xProtein, drugId2ProteinIdList, batch))
            #                    else:
            #                        xAtom = F.relu(self.conv5g(xAtom, edge_index))
            #                    xAtom, edge_index, _, batch, _, _ = self.pool5(xAtom, edge_index, None, batch)
            #                    x5 = torch.cat([gmp(xAtom, batch), gap(xAtom, batch)], dim=1)
            #                    xsum += x5

            xDrug = x1 + x2 + x3 + xsum
            xDrug = self.lin1(xDrug)
            xDrug = self.act1(xDrug)

            # xDrug = self.lin2(xDrug)
            # xDrug = self.act2(xDrug)


            x = self.nodesEmbedding(x[nDrug:])
            x = x.squeeze(1)

            x = torch.cat((xDrug, x), dim=0)
        else:
            x = self.nodesEmbedding(x)

        if config.OUTER_GRAPH:
            # Conv Drug:
            x0 = x
            x = self.convD1(x, drugEdges, x0)
            x = F.relu(x)
            x = self.convD2(x, drugEdges, x0)
            x = F.relu(x)
            x = self.convD3(x, drugEdges, x0)
            x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', True, True, False)
('Drug Features: ', False)
('Combine Features: ', False)
('Inner mode: ', False)
('Cross Prob: ', 0.0)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7f9a5f87f150>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
KFold: 5 x 10
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19463.0)
('VALIDATE SUM PROTEIN TEST: ', 2334.0)
((646, 331), (646, 331), 43857.934, 59640.0)
('Error: ', tensor(44191.0625, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5029661663920282, 0.276312687174665)
('Val: AUC, AUPR, Erros: ', 0.49027304516943143, 0.22635484885144116, 4834.2627)
('Test: AUC, AUPR, Erros: ', 0.5054253384172269, 0.2608665904641284, 5254.984)
((646, 331), (646, 331), 57767.793, 59640.0)
('Error: ', tensor(41882.1875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6769421234057348, 0.43461882855229295)
('Val: AUC, AUPR, Erros: ', 0.6691385866531759, 0.3731040956201566, 4724.524)
('Test: AUC, AUPR, Erros: ', 0.6633415918227537, 0.3955881816488798, 5047.9272)
((646, 331), (646, 331), 62190.89, 59640.0)
('Error: ', tensor(40871.4062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6884672874195349, 0.4687022702780108)
('Val: AUC, AUPR, Erros: ', 0.6819956683467552, 0.41006108055548435, 4686.25)
('Test: AUC, AUPR, Erros: ', 0.6735321173524085, 0.42481872432445467, 4963.6675)
((646, 331), (646, 331), 62943.492, 59640.0)
('Error: ', tensor(39693.4102, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7080511175419467, 0.4987955158215486)
('Val: AUC, AUPR, Erros: ', 0.7029768430557086, 0.4427222954298424, 4560.172)
('Test: AUC, AUPR, Erros: ', 0.6911300440103274, 0.45618370606962366, 4846.4907)
((646, 331), (646, 331), 62221.383, 59640.0)
('Error: ', tensor(38760.3477, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7254397359254868, 0.5321495164756018)
('Val: AUC, AUPR, Erros: ', 0.7228474256124161, 0.48339919064593556, 4448.078)
('Test: AUC, AUPR, Erros: ', 0.7093218042012245, 0.48864596201318655, 4735.6885)
((646, 331), (646, 331), 40646.723, 59640.0)
('Error: ', tensor(39918.2422, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7238493831863844, 0.5302328243302848)
('Val: AUC, AUPR, Erros: ', 0.7142830519630888, 0.4771526236982489, 4351.1787)
('Test: AUC, AUPR, Erros: ', 0.70260401050638, 0.4795877740940905, 4810.7583)
((646, 331), (646, 331), 66771.39, 59640.0)
('Error: ', tensor(36635.8984, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7340542126956978, 0.5501869986984776)
('Val: AUC, AUPR, Erros: ', 0.7372116186491555, 0.5136538538115394, 4244.313)
('Test: AUC, AUPR, Erros: ', 0.7165264572739685, 0.5072749704886079, 4567.457)
((646, 331), (646, 331), 66960.02, 59640.0)
('Error: ', tensor(36429.3242, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7355016297461349, 0.5519826832455513)
('Val: AUC, AUPR, Erros: ', 0.7384506193563709, 0.5157448825090631, 4229.003)
('Test: AUC, AUPR, Erros: ', 0.7184396050526892, 0.5093420510752557, 4561.394)
((646, 331), (646, 331), 63951.45, 59640.0)
('Error: ', tensor(36144.9961, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.737108126635017, 0.5552356083397054)
('Val: AUC, AUPR, Erros: ', 0.7385635507354942, 0.5175188265486201, 4168.635)
('Test: AUC, AUPR, Erros: ', 0.7196414374648482, 0.5121055721291141, 4513.766)
((646, 331), (646, 331), 62261.957, 59640.0)
('Error: ', tensor(36007.2812, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.73837898716544, 0.5575274895647551)
('Val: AUC, AUPR, Erros: ', 0.7386157997872532, 0.5181584572431945, 4140.624)
('Test: AUC, AUPR, Erros: ', 0.7208973954231683, 0.5140463642042356, 4487.63)
((646, 331), (646, 331), 62932.105, 59640.0)
('Error: ', tensor(35958.4180, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7395362452692105, 0.5591962423721777)
('Val: AUC, AUPR, Erros: ', 0.7383231150596693, 0.5177515406927727, 4156.8125)
('Test: AUC, AUPR, Erros: ', 0.7224881850840456, 0.5162697725090004, 4487.997)
((646, 331), (646, 331), 62022.89, 59640.0)
('Error: ', tensor(35862.2891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7406885095460278, 0.5612361145211525)
('Val: AUC, AUPR, Erros: ', 0.737380163852219, 0.5170408232369785, 4147.579)
('Test: AUC, AUPR, Erros: ', 0.72474893393776, 0.5190649728219311, 4466.157)
((646, 331), (646, 331), 65369.797, 59640.0)
('Error: ', tensor(35967.3047, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.741352754540204, 0.5618243994932629)
('Val: AUC, AUPR, Erros: ', 0.7380573873189025, 0.5171163007717858, 4206.8276)
('Test: AUC, AUPR, Erros: ', 0.7272555869972294, 0.5207892946576048, 4493.8076)
((646, 331), (646, 331), 61231.2, 59640.0)
('Error: ', tensor(35746.1953, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7422451849053235, 0.5640613452088272)
('Val: AUC, AUPR, Erros: ', 0.7359886151633137, 0.5155158845284522, 4141.0)
('Test: AUC, AUPR, Erros: ', 0.7284755887113552, 0.5226748293836185, 4438.3525)
((646, 331), (646, 331), 62850.6, 59640.0)
('Error: ', tensor(35750.1602, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7428053082024504, 0.5648016217234098)
('Val: AUC, AUPR, Erros: ', 0.7362495654709144, 0.5153703959840433, 4166.7437)
('Test: AUC, AUPR, Erros: ', 0.728882668368865, 0.5229429795193936, 4450.676)
((646, 331), (646, 331), 62478.89, 59640.0)
('Error: ', tensor(35696.2227, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7434814843231623, 0.5658540102661229)
('Val: AUC, AUPR, Erros: ', 0.7362267028723914, 0.5150969346491183, 4159.7275)
('Test: AUC, AUPR, Erros: ', 0.7284372120578659, 0.5226370057554017, 4446.9688)
((646, 331), (646, 331), 62414.844, 59640.0)
('Error: ', tensor(35663.1797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7439945768658536, 0.5666842652307397)
('Val: AUC, AUPR, Erros: ', 0.7356360863907081, 0.5144532158064212, 4163.4985)
('Test: AUC, AUPR, Erros: ', 0.7283450561462813, 0.5224630245991523, 4447.2646)
Train: 0.7384 0.5575
Test: 0.7209 0.5140
[0.5593868692349431, 0.5681039264630136, 0.575898443927498, 0.576753058616853, 0.5808163113351724, 0.5785540885727798, 0.5812609213621796, 0.5870507642899865, 0.5913916003282823, 0.5926721669735144, 0.597583283495192, 0.6008709662156715, 0.6040047577583031, 0.6055662658625904, 0.610304166216839, 0.6129118121785198, 0.6169041753237896, 0.622208582496874, 0.6252578943658901, 0.6289440182391464, 0.6290853887567297, 0.6330072443498544, 0.6355493621449166, 0.6408409181834875, 0.6425628823762551, 0.6456117765001315, 0.6484731036012041, 0.6494766549273002, 0.6519285622534929, 0.6527777697930686, 0.6584364470518245, 0.6604935784500476, 0.6649499462370575, 0.666875554567879, 0.6708767670198241, 0.6725529637066545, 0.6735035869281847, 0.6778030496801433, 0.6778030496801433, 0.6796473706898288, 0.6802688115114839, 0.6821842153627851, 0.6833057111310674, 0.6878641052639489, 0.6914049600796626, 0.6914049600796626, 0.6926425362898586, 0.6926425362898586, 0.6952722864547429, 0.6967766168144977, 0.6967766168144977, 0.6995278695989233, 0.6995278695989233, 0.6995278695989233, 0.6995278695989233, 0.6995278695989233, 0.6995278695989233, 0.6995278695989233, 0.7027333004051491, 0.7027333004051491, 0.7042483873397376, 0.7061076445820129, 0.7061076445820129, 0.7061076445820129, 0.7061076445820129, 0.7061076445820129, 0.7061076445820129, 0.7083324221077243, 0.7083324221077243, 0.7083324221077243, 0.7156259532388092, 0.7156259532388092, 0.7156259532388092, 0.717951709352096, 0.717951709352096, 0.717951709352096, 0.717951709352096, 0.717951709352096, 0.7208973954231683, 0.7208973954231683, 0.7208973954231683, 0.7208973954231683, 0.7208973954231683, 0.7208973954231683, 0.7208973954231683, 0.7208973954231683, 0.7208973954231683, 0.7208973954231683, 0.7208973954231683, 0.7208973954231683]
[0.13953759353887032, 0.1459934077288317, 0.15417748699706316, 0.15730368141768414, 0.16098144127033714, 0.16038079767018823, 0.16815725342765275, 0.18023255416607764, 0.1910808208991226, 0.19092714111669595, 0.20088890567384304, 0.20757301291716618, 0.21454806872474125, 0.2187312984329279, 0.22814295522842729, 0.234896280812099, 0.24325557723816754, 0.2557587265364846, 0.26193656752578676, 0.26877153076340493, 0.2680922222770796, 0.2779089023020097, 0.2837075302282396, 0.2951184169106136, 0.2989849041976015, 0.30214719863159994, 0.30892297670921626, 0.31176193928396734, 0.31907324580588603, 0.3214789108260766, 0.33464714501787096, 0.3385315512491681, 0.3486121733245483, 0.35259558688315795, 0.3648579388920286, 0.3693420106776067, 0.37185384165027613, 0.38331946414051465, 0.38331946414051465, 0.3881747024242875, 0.3884502846333164, 0.392158371671674, 0.3951078205995841, 0.40872199785523033, 0.418342165747025, 0.418342165747025, 0.42163266322553294, 0.42163266322553294, 0.4280782018613408, 0.4322567975337386, 0.4322567975337386, 0.44002804037044874, 0.44002804037044874, 0.44002804037044874, 0.44002804037044874, 0.44002804037044874, 0.44002804037044874, 0.44002804037044874, 0.4500347753949694, 0.4500347753949694, 0.4548818139294592, 0.4610538806094405, 0.4610538806094405, 0.4610538806094405, 0.4610538806094405, 0.4610538806094405, 0.4610538806094405, 0.46890575277446356, 0.46890575277446356, 0.46890575277446356, 0.4953361516992963, 0.4953361516992963, 0.4953361516992963, 0.5026968199749555, 0.5026968199749555, 0.5026968199749555, 0.5026968199749555, 0.5026968199749555, 0.5140463642042356, 0.5140463642042356, 0.5140463642042356, 0.5140463642042356, 0.5140463642042356, 0.5140463642042356, 0.5140463642042356, 0.5140463642042356, 0.5140463642042356, 0.5140463642042356, 0.5140463642042356, 0.5140463642042356]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19245.0)
('VALIDATE SUM PROTEIN TEST: ', 2846.0)
((646, 331), (646, 331), 37775.465, 59364.0)
('Error: ', tensor(45059.8516, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.503101435498642, 0.2826396723107287)
('Val: AUC, AUPR, Erros: ', 0.5072856063550508, 0.27734913347998136, 5537.4053)
('Test: AUC, AUPR, Erros: ', 0.49519569910861255, 0.2348876792190761, 4894.602)
((646, 331), (646, 331), 60220.64, 59364.0)
('Error: ', tensor(42097.3008, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6476041306043794, 0.3849234519716939)
('Val: AUC, AUPR, Erros: ', 0.650826730381219, 0.3811678318672142, 5203.095)
('Test: AUC, AUPR, Erros: ', 0.6415655981469738, 0.32669599707844454, 4786.384)
((646, 331), (646, 331), 61077.176, 59364.0)
('Error: ', tensor(41609.6641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6823628347667887, 0.43364387974731206)
('Val: AUC, AUPR, Erros: ', 0.6845803641926882, 0.4327015742854203, 5143.9453)
('Test: AUC, AUPR, Erros: ', 0.6781758058769087, 0.3767046445194716, 4742.959)
((646, 331), (646, 331), 63196.41, 59364.0)
('Error: ', tensor(40937.0156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7009833759131424, 0.47324215382661794)
('Val: AUC, AUPR, Erros: ', 0.7033354169696162, 0.47785870242667283, 5062.6313)
('Test: AUC, AUPR, Erros: ', 0.697519822932415, 0.419630691397316, 4696.616)
((646, 331), (646, 331), 62713.02, 59364.0)
('Error: ', tensor(39804.3047, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7073151066408181, 0.492640560254756)
('Val: AUC, AUPR, Erros: ', 0.7101616543729545, 0.5065747655379497, 4913.355)
('Test: AUC, AUPR, Erros: ', 0.7083985971065567, 0.4466682364142024, 4558.743)
((646, 331), (646, 331), 62684.83, 59364.0)
('Error: ', tensor(39196.4531, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7240854389979332, 0.5268621397675344)
('Val: AUC, AUPR, Erros: ', 0.7222015762904386, 0.5280014088755469, 4850.701)
('Test: AUC, AUPR, Erros: ', 0.7246327923602425, 0.48047045342683503, 4492.9785)
((646, 331), (646, 331), 63644.434, 59364.0)
('Error: ', tensor(37632.2812, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7288571856133196, 0.5343355956207582)
('Val: AUC, AUPR, Erros: ', 0.7278723563146146, 0.540195524925789, 4651.5093)
('Test: AUC, AUPR, Erros: ', 0.7330120530874271, 0.49381524430593204, 4315.291)
((646, 331), (646, 331), 63175.195, 59364.0)
('Error: ', tensor(36981.6406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7333764096262758, 0.5456462464375508)
('Val: AUC, AUPR, Erros: ', 0.7297737172404444, 0.5444784709813042, 4586.4834)
('Test: AUC, AUPR, Erros: ', 0.7368188368003527, 0.5045852310147427, 4252.319)
((646, 331), (646, 331), 61756.426, 59364.0)
('Error: ', tensor(36073.4688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7366845051592885, 0.5545815552069694)
('Val: AUC, AUPR, Erros: ', 0.7331229684194316, 0.5477378427474096, 4483.866)
('Test: AUC, AUPR, Erros: ', 0.7420668374309893, 0.5162677993363307, 4120.3066)
((646, 331), (646, 331), 68850.02, 59364.0)
('Error: ', tensor(36280.2188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7376625211296228, 0.558077566331363)
('Val: AUC, AUPR, Erros: ', 0.731377366402924, 0.5428819637190634, 4562.136)
('Test: AUC, AUPR, Erros: ', 0.7429862391141082, 0.5162627814945651, 4251.5684)
((646, 331), (646, 331), 64125.97, 59364.0)
('Error: ', tensor(35860.6953, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7395191863903301, 0.560202845685891)
('Val: AUC, AUPR, Erros: ', 0.7338914515355023, 0.5469537547997348, 4491.9067)
('Test: AUC, AUPR, Erros: ', 0.7434149351517976, 0.5161396192111549, 4153.702)
((646, 331), (646, 331), 63309.76, 59364.0)
('Error: ', tensor(35759.2656, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7407966403714152, 0.5617957443005711)
('Val: AUC, AUPR, Erros: ', 0.7347479583719455, 0.5482198277856538, 4480.413)
('Test: AUC, AUPR, Erros: ', 0.7434565349130547, 0.5148346228799416, 4142.711)
((646, 331), (646, 331), 62862.01, 59364.0)
('Error: ', tensor(35681.7695, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7419305199961866, 0.5633892856626256)
('Val: AUC, AUPR, Erros: ', 0.7352239804599447, 0.5487971520829846, 4475.05)
('Test: AUC, AUPR, Erros: ', 0.743393939283862, 0.5138370684094581, 4139.2397)
((646, 331), (646, 331), 64002.03, 59364.0)
('Error: ', tensor(35668.9141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7429540112171795, 0.5649569276559401)
('Val: AUC, AUPR, Erros: ', 0.7355232195819486, 0.5491451835783973, 4484.62)
('Test: AUC, AUPR, Erros: ', 0.7434903184676535, 0.5133455511736168, 4163.207)
((646, 331), (646, 331), 63514.773, 59364.0)
('Error: ', tensor(35582.5234, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7440774961982564, 0.566674717374599)
('Val: AUC, AUPR, Erros: ', 0.7359061678120917, 0.549558418340603, 4478.6514)
('Test: AUC, AUPR, Erros: ', 0.7435846562787028, 0.5131727574349707, 4155.228)
((646, 331), (646, 331), 63362.43, 59364.0)
('Error: ', tensor(35509.1016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7452164146571904, 0.5684470586621968)
('Val: AUC, AUPR, Erros: ', 0.7362876731458112, 0.5499857758014729, 4475.6094)
('Test: AUC, AUPR, Erros: ', 0.7437892282178193, 0.513347797877235, 4152.132)
((646, 331), (646, 331), 63414.277, 59364.0)
('Error: ', tensor(35431.6133, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.746545929320793, 0.5705256505312729)
('Val: AUC, AUPR, Erros: ', 0.7364312694940587, 0.5501236606600893, 4475.75)
('Test: AUC, AUPR, Erros: ', 0.744108621552267, 0.5137912457120455, 4151.1987)
Train: 0.7419 0.5634
Test: 0.7434 0.5138
[0.5555326116531271, 0.5594397324674065, 0.5580750700858041, 0.5588590309200495, 0.5667990252064421, 0.571838143509724, 0.5755235380616338, 0.5926379823598424, 0.5982231280293764, 0.6001323826823743, 0.607619248760066, 0.6117086130030995, 0.6145870694290496, 0.6162636531197813, 0.6227431783332978, 0.6278063265433744, 0.6303100688692006, 0.634265646604936, 0.6384957983230162, 0.6407254625697122, 0.6414473818829663, 0.6447724524516393, 0.6499096289746071, 0.65371632590834, 0.6557491770526207, 0.6605901783327606, 0.6619677458245408, 0.6629691823212466, 0.6653947398326779, 0.6667990768545535, 0.6737743835117141, 0.6778242280077824, 0.6812179268237609, 0.6834550507872579, 0.6868686283728771, 0.6890647403492582, 0.6909450645114955, 0.6954063444411002, 0.6954063444411002, 0.698552355506879, 0.7003868207431679, 0.7017007291699846, 0.7036326252258569, 0.7083841197655114, 0.7120273589240216, 0.7120273589240216, 0.7128345614508372, 0.7128345614508372, 0.7162304626831231, 0.7177392211848458, 0.7177392211848458, 0.7208578093702596, 0.7208578093702596, 0.7208578093702596, 0.7208578093702596, 0.7208578093702596, 0.7208578093702596, 0.7208578093702596, 0.7241661964230978, 0.7241661964230978, 0.725704031372855, 0.727777772865502, 0.727777772865502, 0.727777772865502, 0.727777772865502, 0.727777772865502, 0.727777772865502, 0.7304377608803632, 0.7304377608803632, 0.7304377608803632, 0.7377863793246372, 0.7377863793246372, 0.7377863793246372, 0.7402802357360305, 0.7402802357360305, 0.7402802357360305, 0.7402802357360305, 0.7402802357360305, 0.743393939283862, 0.743393939283862, 0.743393939283862, 0.743393939283862, 0.743393939283862, 0.743393939283862, 0.743393939283862, 0.743393939283862, 0.743393939283862, 0.743393939283862, 0.743393939283862, 0.743393939283862]
[0.1289982693539719, 0.12395831787673105, 0.12432556997860567, 0.1269593961743151, 0.1344870101259204, 0.13589172504282923, 0.13971549605003475, 0.16110410525997104, 0.1667941351828457, 0.16906759181959444, 0.18204676569449046, 0.18897683347260835, 0.1907100905152826, 0.19237420100538566, 0.2027613666518962, 0.21333117800248919, 0.2127679683952438, 0.22046847837946162, 0.22747910796111728, 0.23298459726707005, 0.23481287361849956, 0.24300424779119645, 0.2540262584116944, 0.26087667688173555, 0.26461209844668254, 0.27592963475021526, 0.2789160306921786, 0.281184383133248, 0.2877413531326103, 0.2921415034199479, 0.31087258113034516, 0.3204097846616589, 0.3259147205173927, 0.33077095919195654, 0.3382317239558735, 0.3432036913347662, 0.34894329606531777, 0.3597045069293975, 0.3597045069293975, 0.36926925077535133, 0.37386506262536423, 0.3745859666556065, 0.38161776808371384, 0.3935419092127561, 0.40342761698216784, 0.40342761698216784, 0.4045452238606435, 0.4045452238606435, 0.41630329870098276, 0.4207706121181384, 0.4207706121181384, 0.43090694441687033, 0.43090694441687033, 0.43090694441687033, 0.43090694441687033, 0.43090694441687033, 0.43090694441687033, 0.43090694441687033, 0.44235502156180306, 0.44235502156180306, 0.4464171036965264, 0.4538995794586513, 0.4538995794586513, 0.4538995794586513, 0.4538995794586513, 0.4538995794586513, 0.4538995794586513, 0.46461468056311017, 0.46461468056311017, 0.46461468056311017, 0.4911262622493461, 0.4911262622493461, 0.4911262622493461, 0.5000330709681369, 0.5000330709681369, 0.5000330709681369, 0.5000330709681369, 0.5000330709681369, 0.5138370684094581, 0.5138370684094581, 0.5138370684094581, 0.5138370684094581, 0.5138370684094581, 0.5138370684094581, 0.5138370684094581, 0.5138370684094581, 0.5138370684094581, 0.5138370684094581, 0.5138370684094581, 0.5138370684094581]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_2
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19732.0)
('VALIDATE SUM PROTEIN TEST: ', 2552.0)
((646, 331), (646, 331), 41813.906, 58006.0)
('Error: ', tensor(43422.4336, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5325315243967631, 0.2951606627174065)
('Val: AUC, AUPR, Erros: ', 0.5254897802430102, 0.30399403402852204, 5666.4487)
('Test: AUC, AUPR, Erros: ', 0.5322991519851369, 0.2962776701474623, 5443.4185)
((646, 331), (646, 331), 58646.145, 58006.0)
('Error: ', tensor(41135.9297, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6792132930689306, 0.44286583462523293)
('Val: AUC, AUPR, Erros: ', 0.6632539819945782, 0.44184898733769895, 5329.478)
('Test: AUC, AUPR, Erros: ', 0.6772881134755686, 0.44436526642575036, 5158.4546)
((646, 331), (646, 331), 59638.5, 58006.0)
('Error: ', tensor(40460.7148, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7044763626973416, 0.4865498995271533)
('Val: AUC, AUPR, Erros: ', 0.6873540969283269, 0.4833461957891022, 5246.975)
('Test: AUC, AUPR, Erros: ', 0.7036589812137701, 0.4908738856265301, 5072.7236)
((646, 331), (646, 331), 62394.508, 58006.0)
('Error: ', tensor(39478.6523, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7154857303941484, 0.5045212644515695)
('Val: AUC, AUPR, Erros: ', 0.6976716760527177, 0.5006078768927098, 5125.622)
('Test: AUC, AUPR, Erros: ', 0.718089360194387, 0.5160400952355628, 4942.45)
((646, 331), (646, 331), 50368.332, 58006.0)
('Error: ', tensor(38500.9453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7162331489145761, 0.5056969591292105)
('Val: AUC, AUPR, Erros: ', 0.7012452704782874, 0.5016668883112249, 5059.8994)
('Test: AUC, AUPR, Erros: ', 0.7213772917946211, 0.5302670514835643, 4788.6245)
