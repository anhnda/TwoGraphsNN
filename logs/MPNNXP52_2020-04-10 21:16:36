class Net52(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net52, self).__init__()

        self.convD1 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD3 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.L1C = Linear(config.CHEM_FINGERPRINT_SIZE + config.EMBED_DIM, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv1g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=1)
        self.conv2 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv2g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=1)
        self.conv3 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv3g = GATConv(config.EMBED_DIM, config.EMBED_DIM)

        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.conv4 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv4g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool4 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.conv5 = EATConv(config.EMBED_DIM, config.EMBED_DIM, extProb=config.CROSS_PROB)
        self.conv5g = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool5 = TopKPooling(config.EMBED_DIM, ratio=1)

        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, proteinNodes, proteinWeight, drugGraphBatch, nDrug,
                drugFeatures=None):

        xAtomProtein, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
        xAtomProtein = self.nodesEmbedding(xAtomProtein)
        xAtomProtein = xAtomProtein.squeeze(1)

        xAtomProtein = F.relu(self.conv1g(xAtomProtein, edge_index))
        xAtomProtein, edge_index, _, batch, _, _ = self.pool1(xAtomProtein, edge_index, None, batch)
        x1 = torch.cat([gmp(xAtomProtein, batch), gap(xAtomProtein, batch)], dim=1)

        xAtomProtein = F.relu(self.conv2g(xAtomProtein, edge_index))
        xAtomProtein, edge_index, _, batch, _, _ = self.pool2(xAtomProtein, edge_index, None, batch)
        x2 = torch.cat([gmp(xAtomProtein, batch), gap(xAtomProtein, batch)], dim=1)

        xAtomProtein = F.relu(self.conv3g(xAtomProtein, edge_index))
        xAtomProtein, edge_index, _, batch, _, _ = self.pool3(xAtomProtein, edge_index, None, batch)
        x3 = torch.cat([gmp(xAtomProtein, batch), gap(xAtomProtein, batch)], dim=1)

        xDrugProtein = x1 + x2 + x3
        xDrugProtein = self.lin1(xDrugProtein)
        xDrugProtein = self.act1(xDrugProtein)

        # xDrug = self.lin2(xDrug)
        # xDrug = self.act2(xDrug)

        nProtein = len(proteinNodes)
        x = self.nodesEmbedding(x[nDrug + nProtein:])

        x = x.squeeze(1)

        x = torch.cat((xDrugProtein, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)

        # x = self.convD3(x, drugEdges)
        # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', True)
('Protein Test: ', True)
('Inner Graph, Outer Graph, Se Graph: ', False, True, False)
('Drug Features: ', True)
('Combine Features: ', False)
('Inner mode: ', False)
('Cross Prob: ', 0)
('Inner Level: ', 0)
MPNNX
<models.MPNNXP5.MPNNXP5 object at 0x7fc0ebe80e10>
('Manual torch seed: ', 1772727637)
('Config: ', 'Protein Test: ', True, 'KNN: ', 2)
KFold: 5 x 10
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/NTimeKFold/ATCInchikeySideEffectByDrug.txt_P3_0_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 808, 331)
((646, 2666), (81, 2666), (646, 331), (81, 331))
('VALIDATE SUM PROTEIN TRAIN: ', 19463.0)
('VALIDATE SUM PROTEIN TEST: ', 2334.0)
((646, 331), (646, 331), 25153.643, 59640.0)
('Error: ', tensor(48441.1875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5487789819329677, 0.30976055411788417)
('Val: AUC, AUPR, Erros: ', 0.484438871729715, 0.23311959243161015, 5240.0625)
('Test: AUC, AUPR, Erros: ', 0.547772047511877, 0.27612588871595944, 5742.7563)
((646, 331), (646, 331), 62988.6, 59640.0)
('Error: ', tensor(41696.0703, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6167665135177828, 0.37396638754925643)
('Val: AUC, AUPR, Erros: ', 0.5688021435873023, 0.2987764928029944, 5032.2007)
('Test: AUC, AUPR, Erros: ', 0.6076733070770026, 0.32553606422056686, 5165.315)
((646, 331), (646, 331), 66349.36, 59640.0)
('Error: ', tensor(40260.9648, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6645800522721766, 0.42952313044963364)
('Val: AUC, AUPR, Erros: ', 0.6223106485903809, 0.3458166626886985, 4923.309)
('Test: AUC, AUPR, Erros: ', 0.6514257870045591, 0.370518717226301, 5041.1494)
((646, 331), (646, 331), 72041.57, 59640.0)
('Error: ', tensor(38858.2305, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7080276396008957, 0.4919972286207048)
('Val: AUC, AUPR, Erros: ', 0.6696631689956867, 0.3968212977500861, 4897.7866)
('Test: AUC, AUPR, Erros: ', 0.6914666360105537, 0.42576717685522597, 4954.5923)
((646, 331), (646, 331), 71491.63, 59640.0)
('Error: ', tensor(36904.2578, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7415072768991728, 0.5477692390185283)
('Val: AUC, AUPR, Erros: ', 0.7078598726304495, 0.44503800257798287, 4732.6533)
('Test: AUC, AUPR, Erros: ', 0.7223159139855073, 0.48117001499401313, 4750.4067)
((646, 331), (646, 331), 73377.51, 59640.0)
('Error: ', tensor(36029.6445, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7596017067103262, 0.5784525362266792)
('Val: AUC, AUPR, Erros: ', 0.7265841700594204, 0.4776741319836105, 4797.47)
('Test: AUC, AUPR, Erros: ', 0.7355754499652702, 0.5100397969853941, 4784.8164)
((646, 331), (646, 331), 61241.906, 59640.0)
('Error: ', tensor(35003.4492, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7620780230090108, 0.5836210128990764)
('Val: AUC, AUPR, Erros: ', 0.7313136309661001, 0.48451068928604896, 4333.953)
('Test: AUC, AUPR, Erros: ', 0.740871413718144, 0.5168704871018006, 4460.956)
((646, 331), (646, 331), 61037.773, 59640.0)
('Error: ', tensor(34337.8125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7717536375752603, 0.6017765977223868)
('Val: AUC, AUPR, Erros: ', 0.733365140714928, 0.4894331696542873, 4405.8477)
('Test: AUC, AUPR, Erros: ', 0.743370949836422, 0.5209067612267302, 4509.506)
((646, 331), (646, 331), 64823.234, 59640.0)
('Error: ', tensor(34195.4609, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7754406797953742, 0.6074294005563939)
('Val: AUC, AUPR, Erros: ', 0.7305704626217897, 0.47966943652351135, 4674.267)
('Test: AUC, AUPR, Erros: ', 0.742348040139404, 0.5107759128250323, 4677.814)
((646, 331), (646, 331), 67618.484, 59640.0)
('Error: ', tensor(33952.0859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7817393714976442, 0.6205216707863052)
('Val: AUC, AUPR, Erros: ', 0.7256917835771703, 0.4661088120597416, 5084.0967)
('Test: AUC, AUPR, Erros: ', 0.738754219303655, 0.49743349373017265, 5019.7163)
((646, 331), (646, 331), 66739.93, 59640.0)
('Error: ', tensor(33703.9688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7841713886042834, 0.6249450910133523)
('Val: AUC, AUPR, Erros: ', 0.723281298819759, 0.45621954355033584, 5253.957)
('Test: AUC, AUPR, Erros: ', 0.7362980160868121, 0.491150769951887, 5106.368)
((646, 331), (646, 331), 66676.2, 59640.0)
('Error: ', tensor(33551.1172, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7861259890466681, 0.628299675527256)
('Val: AUC, AUPR, Erros: ', 0.7211881970715475, 0.44680085424591437, 5498.1685)
('Test: AUC, AUPR, Erros: ', 0.7334194099655357, 0.4846878108182122, 5228.5728)
((646, 331), (646, 331), 66603.21, 59640.0)
('Error: ', tensor(33410.9453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7878496278063141, 0.631242973683286)
('Val: AUC, AUPR, Erros: ', 0.7190725315569447, 0.4377619419083731, 5773.3765)
('Test: AUC, AUPR, Erros: ', 0.7300310461679906, 0.4774026121281438, 5369.88)
((646, 331), (646, 331), 66862.01, 59640.0)
('Error: ', tensor(33298.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7893815736005629, 0.6339878035503715)
('Val: AUC, AUPR, Erros: ', 0.7165324467969751, 0.4282182534116851, 6122.818)
('Test: AUC, AUPR, Erros: ', 0.7260993455732698, 0.4687808571962172, 5546.0176)
((646, 331), (646, 331), 66200.83, 59640.0)
('Error: ', tensor(33137.3594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7907255985921801, 0.6363103226066804)
('Val: AUC, AUPR, Erros: ', 0.714976028152129, 0.4220982455167652, 6382.548)
('Test: AUC, AUPR, Erros: ', 0.723021212596921, 0.46220654558419044, 5671.989)
((646, 331), (646, 331), 66272.96, 59640.0)
('Error: ', tensor(33028.2031, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7919680425437191, 0.638539670335578)
('Val: AUC, AUPR, Erros: ', 0.7129247396166973, 0.41557951475616683, 6752.11)
('Test: AUC, AUPR, Erros: ', 0.7199345053837694, 0.45471281668811403, 5868.1743)
