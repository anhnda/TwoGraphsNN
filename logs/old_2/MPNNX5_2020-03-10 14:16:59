    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net5, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        # self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):




        xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch

        # xDrug = self.mact1(self.mlinear1(xDrug))
        # xDrug = self.mact2(self.mlinear2(xDrug))

        xDrug = self.nodesEmbedding(xDrug)
        xDrug = xDrug.squeeze(1)

        xDrug = F.relu(self.conv1(xDrug, edge_index))

        v = self.pool1(xDrug, edge_index, None, batch)
        xDrug, edge_index, _, batch, _, _ = v
        x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv2(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv3(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = x1 + x2 + x3

        xDrug = self.lin1(xDrug)
        xDrug = self.act1(xDrug)
        xDrug = self.lin2(xDrug)
        xDrug = self.act2(xDrug)


        x = self.nodesEmbedding(x[nDrug:])
        x = x.squeeze(1)

        x = torch.cat((xDrug, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        x = self.convS1(x, seEdges)
        x = F.relu(x)
        x = self.convS2(x, seEdges)
        x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', False)
MPNNX
<models.MPNNX5.MPNNX5 object at 0x7f7b744aca10>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 598)
((872, 598), (872, 598), 47956.46, 88676.0)
('Error: ', tensor(76785.8359, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4919286818003568, 0.161435664611495)
('Test: AUC, AUPR: ', 0.4954175557547208, 0.17270526776629133)
((872, 598), (872, 598), 83871.766, 88676.0)
('Error: ', tensor(72737.0703, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6419809022994447, 0.27692063994748034)
('Test: AUC, AUPR: ', 0.6390566653197446, 0.28448125928822454)
((872, 598), (872, 598), 92943.83, 88676.0)
('Error: ', tensor(65177.9102, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7281013297539413, 0.3977021363141494)
('Test: AUC, AUPR: ', 0.7003160377027552, 0.38381705897067203)
((872, 598), (872, 598), 85658.625, 88676.0)
('Error: ', tensor(59396.2266, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7837222492073423, 0.4917186300892965)
('Test: AUC, AUPR: ', 0.7259766761945418, 0.4235925909041641)
((872, 598), (872, 598), 94995.945, 88676.0)
('Error: ', tensor(55509.9062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8147997835995291, 0.5531811990468218)
('Test: AUC, AUPR: ', 0.7477725569450115, 0.45205747091721393)
((872, 598), (872, 598), 87470.555, 88676.0)
('Error: ', tensor(52891.0195, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8307299268217991, 0.5907465026144515)
('Test: AUC, AUPR: ', 0.7567212020605683, 0.4582966114354613)
((872, 598), (872, 598), 86830.44, 88676.0)
('Error: ', tensor(51726.6875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8374996989879351, 0.6085445458431493)
('Test: AUC, AUPR: ', 0.7562864721428035, 0.4556542995940166)
((872, 598), (872, 598), 85723.89, 88676.0)
('Error: ', tensor(51067.3672, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8415208011370026, 0.6172650058810466)
('Test: AUC, AUPR: ', 0.7479788392531742, 0.44741559094060646)
((872, 598), (872, 598), 83549.164, 88676.0)
('Error: ', tensor(50776.9375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.843878779420925, 0.6221426833632694)
('Test: AUC, AUPR: ', 0.7445270076387013, 0.44188751300756207)
