    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net4, self).__init__()

        self.convD1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()
        self.isFirst = True

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):
        # x = self.nodesEmbedding(x[nDrug:])
        # x = x.squeeze(1)
        #
        #
        # xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
        #
        # xDrug = self.mact1(self.mlinear1(xDrug))
        # xDrug = self.mact2(self.mlinear2(xDrug))
        #
        # xDrug = F.relu(self.conv1(xDrug, edge_index))
        #
        # v  = self.pool1(xDrug, edge_index, None, batch)
        # xDrug, edge_index, _, batch, _, _ = v
        # x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)
        #
        # xDrug = F.relu(self.conv2(xDrug, edge_index))
        #
        # xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        # x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)
        #
        # xDrug = F.relu(self.conv3(xDrug, edge_index))
        #
        # xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        # x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)
        #
        # xDrug = x1 + x2 + x3
        #
        # xDrug = self.lin1(xDrug)
        # xDrug = self.act1(xDrug)
        # xDrug = self.lin2(xDrug)
        # xDrug = self.act2(xDrug)
        #
        #
        #
        # x = torch.cat((xDrug, x), dim=0)

        # # Conv Drug:
        if self.isFirst:
            self.nodesEmbedding.weight.data[:nDrug, :].zero_()
            self.isFirst = False
            print (self.nodesEmbedding.weight.data[0, :])

        x = self.nodesEmbedding(x)
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        # x = self.convS1(x, seEdges)
        # x = F.relu(x)
        # x = self.convS2(x, seEdges)
        # x = F.relu(x)

        # x = self.nodesEmbedding(x)
        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', False)
MPNNX
<models.MPNNX4.MPNNX4 object at 0x7f248d4aa690>
('Manual torch seed: ', 443181909)
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 2936, 1448, 330, 969, 598)
((872, 2936), (97, 2936), (872, 598), (97, 598))
((872, 598), (872, 598), 67517.61, 88676.0)
('Error: ', tensor(74644.4219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5296709046481518, 0.17740137406571957)
('Test: AUC, AUPR: ', 0.5118946353899944, 0.18117406383372794)
((872, 598), (872, 598), 90932.46, 88676.0)
('Error: ', tensor(66299.4531, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7670843899711485, 0.4703814113117865)
('Test: AUC, AUPR: ', 0.7066315243192762, 0.4095789683510512)
((872, 598), (872, 598), 96158.36, 88676.0)
('Error: ', tensor(59348.6406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7988571237655986, 0.5305324643267603)
('Test: AUC, AUPR: ', 0.7250034237850076, 0.43900961010870465)
((872, 598), (872, 598), 70526.39, 88676.0)
('Error: ', tensor(57596.5898, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8120722117739697, 0.5551911235291156)
('Test: AUC, AUPR: ', 0.7382770455547456, 0.44526157427673513)
((872, 598), (872, 598), 91649.64, 88676.0)
('Error: ', tensor(54661.7227, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.82188995653046, 0.5710034736793629)
('Test: AUC, AUPR: ', 0.7418735534784984, 0.44817426727762355)
((872, 598), (872, 598), 73535.49, 88676.0)
('Error: ', tensor(55128.6914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8272257529627627, 0.5820811726925398)
('Test: AUC, AUPR: ', 0.7424561802535428, 0.443951946501532)
((872, 598), (872, 598), 90436.45, 88676.0)
('Error: ', tensor(53488.4766, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8320430086371847, 0.5908887945575129)
('Test: AUC, AUPR: ', 0.7420367289119082, 0.4420729454387085)
((872, 598), (872, 598), 83039.12, 88676.0)
('Error: ', tensor(53372.8398, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8354580540537037, 0.5978616596044407)
('Test: AUC, AUPR: ', 0.7422968091925992, 0.4385474604218198)
((872, 598), (872, 598), 86816.36, 88676.0)
('Error: ', tensor(52919.1484, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8379886723067822, 0.6027511035428841)
('Test: AUC, AUPR: ', 0.7421867207276506, 0.4379279959172416)
((872, 598), (872, 598), 90364.11, 88676.0)
('Error: ', tensor(52560.1094, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8402308702554179, 0.607116330051697)
('Test: AUC, AUPR: ', 0.7423619712132319, 0.43787870697838194)
((872, 598), (872, 598), 86272.91, 88676.0)
('Error: ', tensor(52500.9141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.841816255214234, 0.6102741536829294)
('Test: AUC, AUPR: ', 0.7428550034645026, 0.43800246307442237)
((872, 598), (872, 598), 85611.59, 88676.0)
('Error: ', tensor(52396.2891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8430000528949491, 0.6125388633470338)
('Test: AUC, AUPR: ', 0.7431704349111137, 0.43876987521213395)
((872, 598), (872, 598), 89983.38, 88676.0)
('Error: ', tensor(52117.4688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8441554997704876, 0.6147569161788952)
('Test: AUC, AUPR: ', 0.7432389256324776, 0.4395600124162974)
((872, 598), (872, 598), 89976.78, 88676.0)
('Error: ', tensor(52017.0312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8450325371033695, 0.6164117955534167)
('Test: AUC, AUPR: ', 0.7433265193307215, 0.4395491970332975)
((872, 598), (872, 598), 87926.36, 88676.0)
('Error: ', tensor(51991.6016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8457092765472906, 0.6176589615618646)
('Test: AUC, AUPR: ', 0.7434478827179123, 0.43916055426443157)
((872, 598), (872, 598), 87715.47, 88676.0)
('Error: ', tensor(51919.1250, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8463405195627918, 0.6188636005379905)
('Test: AUC, AUPR: ', 0.7434251756514018, 0.4388875843777435)
