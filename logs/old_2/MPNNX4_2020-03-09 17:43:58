    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net4, self).__init__()

        self.convD1 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):

        x = self.nodesEmbedding(x[nDrug:])
        x = x.squeeze(1)


        xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch

        xDrug = self.mact1(self.mlinear1(xDrug))
        xDrug = self.mact2(self.mlinear2(xDrug))

        xDrug = F.relu(self.conv1(xDrug, edge_index))

        v  = self.pool1(xDrug, edge_index, None, batch)
        xDrug, edge_index, _, batch, _, _ = v
        x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv2(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv3(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = x1 + x2 + x3

        xDrug = self.lin1(xDrug)
        xDrug = self.act1(xDrug)
        xDrug = self.lin2(xDrug)
        xDrug = self.act2(xDrug)



        x = torch.cat((xDrug, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        x = self.convS1(x, seEdges)
        x = F.relu(x)
        x = self.convS2(x, seEdges)
        x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', False)
MPNNX
<models.MPNNX4.MPNNX4 object at 0x7fcbf54b66d0>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 598)
((872, 598), (872, 598), 44069.043, 88676.0)
('Error: ', tensor(77624.0938, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5356556275255113, 0.184318875438387)
('Test: AUC, AUPR: ', 0.5349414066254912, 0.19206379377898344)
((872, 598), (872, 598), 167405.69, 88676.0)
('Error: ', tensor(85310.5312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5765712692335896, 0.21568459081360733)
('Test: AUC, AUPR: ', 0.556273112877089, 0.20501628199136926)
((872, 598), (872, 598), 88028.49, 88676.0)
('Error: ', tensor(72089.2578, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6311310568883182, 0.2563993484443163)
('Test: AUC, AUPR: ', 0.6039434560776906, 0.23516581889576535)
((872, 598), (872, 598), 79115.03, 88676.0)
('Error: ', tensor(70700.5703, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7056214109952632, 0.3547326113875453)
('Test: AUC, AUPR: ', 0.661724158946229, 0.2914435217421576)
((872, 598), (872, 598), 92129.04, 88676.0)
('Error: ', tensor(65977.7188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7482626127296698, 0.42643816278263846)
('Test: AUC, AUPR: ', 0.7020431647204413, 0.36062248364515387)
((872, 598), (872, 598), 87004.77, 88676.0)
('Error: ', tensor(61103.1133, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7736901481232843, 0.47375072926051087)
('Test: AUC, AUPR: ', 0.7260538491768382, 0.4102434215126928)
((872, 598), (872, 598), 89320.96, 88676.0)
('Error: ', tensor(58423.1016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7894603334899742, 0.5223839769223162)
('Test: AUC, AUPR: ', 0.733455209244301, 0.41729156663808653)
((872, 598), (872, 598), 94794.01, 88676.0)
('Error: ', tensor(56663.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8031755458393627, 0.5471917428931107)
('Test: AUC, AUPR: ', 0.7362012791948559, 0.41965040175060275)
((872, 598), (872, 598), 90624.766, 88676.0)
('Error: ', tensor(55512.4102, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8148407166282406, 0.5638677814680888)
('Test: AUC, AUPR: ', 0.7381802518644384, 0.41858262314574024)
((872, 598), (872, 598), 109662.8, 88676.0)
('Error: ', tensor(55409.2695, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8222715867242931, 0.5770752124517237)
('Test: AUC, AUPR: ', 0.7408654348314913, 0.4227243542784806)
((872, 598), (872, 598), 107759.95, 88676.0)
('Error: ', tensor(54686.2891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8275598187945726, 0.5847137449535837)
('Test: AUC, AUPR: ', 0.7450196353186436, 0.43272941747233495)
((872, 598), (872, 598), 93933.1, 88676.0)
('Error: ', tensor(53694.6250, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8319753854247385, 0.5922762719346345)
('Test: AUC, AUPR: ', 0.7456332358342469, 0.427300736774451)
((872, 598), (872, 598), 90085.516, 88676.0)
('Error: ', tensor(53436.3711, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8348344251816388, 0.5974600491085909)
('Test: AUC, AUPR: ', 0.745186739299878, 0.4257499545490523)
((872, 598), (872, 598), 93946.625, 88676.0)
('Error: ', tensor(53122.5352, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.836425199616599, 0.6003638320546119)
('Test: AUC, AUPR: ', 0.7453362063745904, 0.42816011802591525)
((872, 598), (872, 598), 92435.805, 88676.0)
('Error: ', tensor(52901.0156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8383496288320079, 0.6038617288607042)
('Test: AUC, AUPR: ', 0.7455132874452911, 0.4282652870757966)
((872, 598), (872, 598), 88528.43, 88676.0)
('Error: ', tensor(52679.0156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8402192688877217, 0.6072054124640126)
('Test: AUC, AUPR: ', 0.7461953596553889, 0.4285258566968218)
((872, 598), (872, 598), 93808.98, 88676.0)
('Error: ', tensor(52275.9844, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8423750246112279, 0.6106110211457108)
('Test: AUC, AUPR: ', 0.7444210099506742, 0.4234516682585562)
((872, 598), (872, 598), 81657.99, 88676.0)
('Error: ', tensor(52124.7266, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8442809822728679, 0.6150079181231234)
('Test: AUC, AUPR: ', 0.7393454954003855, 0.4093330848396704)
((872, 598), (872, 598), 97774.48, 88676.0)
('Error: ', tensor(51504.8828, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8460887918655849, 0.6184686357218088)
('Test: AUC, AUPR: ', 0.7336031711935024, 0.3928396778232846)
Train: 0.8461 0.6185
Test: 0.7336 0.3928
[0.593582297237328, 0.5993083962798731, 0.6095084585298646, 0.6047574812458127, 0.6003201821488124, 0.6047720066286237, 0.6087578121319706, 0.6087268664534573, 0.609443997939455, 0.6134604900581259, 0.6146328045188539, 0.6162227087133628, 0.621480809085321, 0.6249752999630578, 0.6254408247630348, 0.6274082884257371, 0.6279353300586145, 0.6292802126598855, 0.6306211764907969, 0.6360451065117609, 0.6400738796613582, 0.642976597893619, 0.6459078528540542, 0.6492176097318015, 0.6518818281092918, 0.6523851337660839, 0.6548377226441982, 0.6573128874097955, 0.6607746748598615, 0.6619439611470936, 0.6663186675901989, 0.6685031617944317, 0.6693852491118611, 0.6709660315973832, 0.6720571150720482, 0.6775939404854006, 0.6799462004288471, 0.6836478421684061, 0.6860641419717136, 0.6897876966285266, 0.6914488417123565, 0.692506535943354, 0.6960551732752236, 0.6960551732752236, 0.6982940565506484, 0.6992716441854459, 0.7014180033783315, 0.7024294467772729, 0.7063746761464645, 0.7095767220368033, 0.7095767220368033, 0.7107540136311624, 0.7107540136311624, 0.7132324052002517, 0.71435702539947, 0.71435702539947, 0.7165267817679385, 0.7165267817679385, 0.7165267817679385, 0.7165267817679385, 0.7165267817679385, 0.7165267817679385, 0.7165267817679385, 0.7195544870478381, 0.7195544870478381, 0.7211059946982283, 0.722590682096832, 0.722590682096832, 0.722590682096832, 0.722590682096832, 0.722590682096832, 0.722590682096832, 0.7243599209441735, 0.7243599209441735, 0.7243599209441735, 0.7296136118441594, 0.7296136118441594, 0.7296136118441594, 0.7315254359810104, 0.7315254359810104, 0.7315254359810104, 0.7315254359810104, 0.7315254359810104, 0.7336031711935024, 0.7336031711935024, 0.7336031711935024, 0.7336031711935024, 0.7336031711935024, 0.7336031711935024, 0.7336031711935024, 0.7336031711935024, 0.7336031711935024, 0.7336031711935024, 0.7336031711935024, 0.7336031711935024]
[0.07601736684249277, 0.08677952278089493, 0.09506785353043777, 0.0999489155252874, 0.10260204526329872, 0.11115230832469697, 0.11858529722141525, 0.12380829305629089, 0.12716903408498753, 0.1327977804854495, 0.13539938162996662, 0.1386753435285107, 0.14792288238783122, 0.15350454557000334, 0.15616873723580477, 0.15969691905253222, 0.16188130461532652, 0.16518085647663633, 0.16737071848742316, 0.1762559244895488, 0.1827180922580174, 0.18755034320103464, 0.19343631992006702, 0.19845200724972994, 0.2039024890426197, 0.20454703988656922, 0.20898697768484129, 0.2136798727692543, 0.21987356634466992, 0.22188925240857338, 0.22992646583748738, 0.23374778330668494, 0.23532577966267262, 0.23842150527202452, 0.2406427447811542, 0.251904212402458, 0.25674805247683996, 0.2645706499909349, 0.27009016989311047, 0.27780991302367986, 0.28152562282593596, 0.28375403593855175, 0.29131675277285074, 0.29131675277285074, 0.2965460590622742, 0.29877644576966195, 0.303700165655902, 0.3057795074286278, 0.3153128901607457, 0.32294521152639044, 0.32294521152639044, 0.3258810369730672, 0.3258810369730672, 0.3324194944537664, 0.33558504517003285, 0.33558504517003285, 0.34144658624500707, 0.34144658624500707, 0.34144658624500707, 0.34144658624500707, 0.34144658624500707, 0.34144658624500707, 0.34144658624500707, 0.34995370344256393, 0.34995370344256393, 0.35421239438239915, 0.3583011377270056, 0.3583011377270056, 0.3583011377270056, 0.3583011377270056, 0.3583011377270056, 0.3583011377270056, 0.3637263764243582, 0.3637263764243582, 0.3637263764243582, 0.3799394317104204, 0.3799394317104204, 0.3799394317104204, 0.3860699873220222, 0.3860699873220222, 0.3860699873220222, 0.3860699873220222, 0.3860699873220222, 0.3928396778232846, 0.3928396778232846, 0.3928396778232846, 0.3928396778232846, 0.3928396778232846, 0.3928396778232846, 0.3928396778232846, 0.3928396778232846, 0.3928396778232846, 0.3928396778232846, 0.3928396778232846, 0.3928396778232846]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 598)
((872, 598), (872, 598), 8815.992, 89035.0)
('Error: ', tensor(86081.7422, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5355549224220496, 0.18513220100608857)
('Test: AUC, AUPR: ', 0.5370935692813329, 0.19151567177071022)
((872, 598), (872, 598), 102070.23, 89035.0)
('Error: ', tensor(73125.1875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5962815980631011, 0.22522198203286323)
('Test: AUC, AUPR: ', 0.586759987268538, 0.22842788657527863)
((872, 598), (872, 598), 123380.37, 89035.0)
('Error: ', tensor(70603.0312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7179247917188538, 0.3762248646097566)
('Test: AUC, AUPR: ', 0.691626386153446, 0.34536481800513624)
((872, 598), (872, 598), 104180.65, 89035.0)
('Error: ', tensor(62716.2109, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7660543762769128, 0.4578807681319741)
('Test: AUC, AUPR: ', 0.7408896669711585, 0.41147145157605375)
((872, 598), (872, 598), 82116.1, 89035.0)
('Error: ', tensor(59810.5352, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7830259727094641, 0.5032468167897574)
('Test: AUC, AUPR: ', 0.7493469396010952, 0.4288608515976879)
((872, 598), (872, 598), 90342.23, 89035.0)
('Error: ', tensor(57845.2031, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7938934474477795, 0.5368885501622025)
('Test: AUC, AUPR: ', 0.7471642197906153, 0.4217835110260168)
((872, 598), (872, 598), 89918.75, 89035.0)
('Error: ', tensor(56389.6445, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8059295392111595, 0.5564159308067426)
('Test: AUC, AUPR: ', 0.7378357516432018, 0.3982115225147258)
((872, 598), (872, 598), 91384.555, 89035.0)
('Error: ', tensor(55049.4570, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.822421106638784, 0.576094140723463)
('Test: AUC, AUPR: ', 0.7292757354265007, 0.3902617968552604)
((872, 598), (872, 598), 96507.92, 89035.0)
('Error: ', tensor(54063.3594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8311795215410795, 0.5911665658952315)
('Test: AUC, AUPR: ', 0.7241537786943397, 0.38276281173046833)
((872, 598), (872, 598), 96092.73, 89035.0)
('Error: ', tensor(53498.2227, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.83493418848072, 0.5983265029338145)
('Test: AUC, AUPR: ', 0.7216670842378536, 0.37802704026031514)
((872, 598), (872, 598), 102713.62, 89035.0)
('Error: ', tensor(53379.5391, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8371991596120875, 0.60292273392765)
('Test: AUC, AUPR: ', 0.7180451062827475, 0.37261055498607615)
