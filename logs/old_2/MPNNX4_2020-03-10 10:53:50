    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net4, self).__init__()

        self.convD1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        # self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):
        x = self.nodesEmbedding(x)
        # x = self.nodesEmbedding(x[nDrug:])
        # x = x.squeeze(1)
        #
        #
        # xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
        #
        # xDrug = self.mact1(self.mlinear1(xDrug))
        # xDrug = self.mact2(self.mlinear2(xDrug))
        #
        # xDrug = F.relu(self.conv1(xDrug, edge_index))
        #
        # v  = self.pool1(xDrug, edge_index, None, batch)
        # xDrug, edge_index, _, batch, _, _ = v
        # x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)
        #
        # xDrug = F.relu(self.conv2(xDrug, edge_index))
        #
        # xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        # x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)
        #
        # xDrug = F.relu(self.conv3(xDrug, edge_index))
        #
        # xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        # x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)
        #
        # xDrug = x1 + x2 + x3
        #
        # xDrug = self.lin1(xDrug)
        # xDrug = self.act1(xDrug)
        # xDrug = self.lin2(xDrug)
        # xDrug = self.act2(xDrug)
        #
        #
        #
        # x = torch.cat((xDrug, x), dim=0)
        #
        # # Conv Drug:
        # x = self.convD1(x, drugEdges)
        # x = F.relu(x)
        # x = self.convD2(x, drugEdges)
        # x = F.relu(x)
        # # Conv SE:
        # x = self.convS1(x, seEdges)
        # x = F.relu(x)
        # x = self.convS2(x, seEdges)
        # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', False)
MPNNX
<models.MPNNX4.MPNNX4 object at 0x7f18659d0e50>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 2936, 1448, 330, 969, 598)
((872, 598), (872, 598), 2521.7402, 88676.0)
('Error: ', tensor(26365788., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.49961479864926717, 0.1699043904878876)
('Test: AUC, AUPR: ', 0.49781684198354603, 0.18082495224105827)
((872, 598), (872, 598), 3169.6558, 88676.0)
('Error: ', tensor(18956216., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5000701047119246, 0.17014626361429155)
('Test: AUC, AUPR: ', 0.4977589352086408, 0.18078129375126267)
((872, 598), (872, 598), 3720.8906, 88676.0)
('Error: ', tensor(13711132., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5007111872938113, 0.17044952224865073)
('Test: AUC, AUPR: ', 0.4977125567137652, 0.1807153767080762)
((872, 598), (872, 598), 4169.051, 88676.0)
('Error: ', tensor(10079899., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5015091382666422, 0.17082885569624062)
('Test: AUC, AUPR: ', 0.4976884546773031, 0.1806367286228075)
((872, 598), (872, 598), 4565.083, 88676.0)
('Error: ', tensor(7563419.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5024227152513564, 0.171266239526637)
('Test: AUC, AUPR: ', 0.49766017574230015, 0.18062161668343873)
((872, 598), (872, 598), 5026.2627, 88676.0)
('Error: ', tensor(5788854., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5034516166756607, 0.17175614110690965)
('Test: AUC, AUPR: ', 0.4976711612558446, 0.18058734334432028)
((872, 598), (872, 598), 5584.798, 88676.0)
('Error: ', tensor(4504146., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5046021860066283, 0.17229760730559318)
('Test: AUC, AUPR: ', 0.49773494132491014, 0.18058796336336796)
((872, 598), (872, 598), 6201.0938, 88676.0)
('Error: ', tensor(3547290., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5058897755500829, 0.17290225221346542)
('Test: AUC, AUPR: ', 0.4978455365054333, 0.18061802475030098)
((872, 598), (872, 598), 6854.0464, 88676.0)
('Error: ', tensor(2816002.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5073412399624176, 0.17359459598549404)
('Test: AUC, AUPR: ', 0.4979720501657472, 0.18068705571575167)
((872, 598), (872, 598), 7549.073, 88676.0)
('Error: ', tensor(2245500.7500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5089922714261185, 0.17437877334580895)
('Test: AUC, AUPR: ', 0.4981372624755973, 0.18080041340272285)
((872, 598), (872, 598), 8297.862, 88676.0)
('Error: ', tensor(1794024.6250, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5108917088229998, 0.1753004343093698)
('Test: AUC, AUPR: ', 0.4983009155835706, 0.18083636136225942)
((872, 598), (872, 598), 9108.481, 88676.0)
('Error: ', tensor(1433809.2500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5131060636898045, 0.17638542580421096)
('Test: AUC, AUPR: ', 0.49847522373840936, 0.18091560055231215)
((872, 598), (872, 598), 9984.222, 88676.0)
('Error: ', tensor(1145564.3750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.51571659310257, 0.17768306250206017)
('Test: AUC, AUPR: ', 0.4986526372786174, 0.1810089635631148)
((872, 598), (872, 598), 10931.699, 88676.0)
('Error: ', tensor(915157.6250, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5188125714107609, 0.1792406305973235)
('Test: AUC, AUPR: ', 0.4988345912307134, 0.1811091359573714)
((872, 598), (872, 598), 11959.739, 88676.0)
('Error: ', tensor(731674.9375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5224951364402952, 0.1811318563839109)
('Test: AUC, AUPR: ', 0.49901619468784664, 0.181206619176871)
((872, 598), (872, 598), 13078.589, 88676.0)
('Error: ', tensor(586327.9375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5268833061910712, 0.1834294690306206)
('Test: AUC, AUPR: ', 0.49919122586372267, 0.1813012435028046)
((872, 598), (872, 598), 14300.942, 88676.0)
('Error: ', tensor(471856.9375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.532109947068029, 0.18624840425706787)
('Test: AUC, AUPR: ', 0.4993743184237403, 0.18140435737793084)
((872, 598), (872, 598), 15641.896, 88676.0)
('Error: ', tensor(382206.4062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5383244033330616, 0.18973177275327222)
('Test: AUC, AUPR: ', 0.49955509971983253, 0.18150260230436913)
((872, 598), (872, 598), 17119.861, 88676.0)
('Error: ', tensor(312334.0938, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5456928015696512, 0.19406205572687624)
('Test: AUC, AUPR: ', 0.4997171415523917, 0.1815942491241129)
Train: 0.5457 0.1941
Test: 0.4997 0.1816
[0.4985996344517905, 0.4970731397519029, 0.5017763100933939, 0.49865097450784657, 0.4992665943640896, 0.4993110202627763, 0.49936061734005777, 0.5008918913496941, 0.5005851142453812, 0.5027570977036704, 0.5015012437898184, 0.5010084953053187, 0.49965072492834495, 0.5003053069793659, 0.49967925242634187, 0.4991764717421697, 0.4981869295228813, 0.49913020650851325, 0.49916796029259675, 0.499197980171607, 0.4992258656899947, 0.4992483353794559, 0.5000653765290017, 0.5010251644924004, 0.5015273872631847, 0.5017257746528007, 0.5012725533116296, 0.501320971181551, 0.5014443603861057, 0.5018356574430566, 0.5010725952883995, 0.5011153226298624, 0.501419474503801, 0.502076660146499, 0.5021909497344432, 0.5019113927398804, 0.5020791781965427, 0.5017407546368214, 0.5016749911490481, 0.5018601326934411, 0.5016897533012454, 0.5019193544235707, 0.5022693780028498, 0.5022693780028498, 0.5023382448177325, 0.5024668583877181, 0.5022409352835361, 0.5022831187103399, 0.5021014343910374, 0.5022299596500137, 0.5022299596500137, 0.5023185573235148, 0.5023185573235148, 0.5025589057547246, 0.5027657412294598, 0.5027657412294598, 0.5022561010603099, 0.5022561010603099, 0.5022561010603099, 0.5022561010603099, 0.5022561010603099, 0.5022561010603099, 0.5022561010603099, 0.501398418032394, 0.501398418032394, 0.5014657836346221, 0.5008278297397077, 0.5008278297397077, 0.5008278297397077, 0.5008278297397077, 0.5008278297397077, 0.5008278297397077, 0.5009687540749336, 0.5009687540749336, 0.5009687540749336, 0.5003028579276295, 0.5003028579276295, 0.5003028579276295, 0.4999163139951276, 0.4999163139951276, 0.4999163139951276, 0.4999163139951276, 0.4999163139951276, 0.4997171415523917, 0.4997171415523917, 0.4997171415523917, 0.4997171415523917, 0.4997171415523917, 0.4997171415523917, 0.4997171415523917, 0.4997171415523917, 0.4997171415523917, 0.4997171415523917, 0.4997171415523917, 0.4997171415523917]
[0.06244006716011591, 0.0643966921870509, 0.07047497440709358, 0.07420970071180158, 0.07693079228315272, 0.0825240514391081, 0.08728710931671418, 0.09132291672020021, 0.09407587381442531, 0.09673208065186938, 0.09798914180783415, 0.09987912686593235, 0.10389838704652474, 0.10716692402605804, 0.1082070591307543, 0.10975765088316745, 0.11048800110850665, 0.11241628278832407, 0.11337930033017905, 0.11649249606446957, 0.11877661907116316, 0.12111660590282533, 0.1237259963894933, 0.12616145961101888, 0.12832668719720264, 0.12867747896567674, 0.13046436457564675, 0.13225135184857095, 0.1347664875594905, 0.1356930192272892, 0.13849918757702817, 0.14012359550923184, 0.14071032902076172, 0.14211474400173157, 0.14270033916341995, 0.14602035929746218, 0.14749986382451907, 0.1497849005808628, 0.1513474799490422, 0.15368329965988298, 0.15479804748452825, 0.15554910876644493, 0.15792819043713613, 0.15792819043713613, 0.15921393477136975, 0.1598247851263784, 0.16109320320138204, 0.1618150037326141, 0.1646743292021905, 0.16684119184335744, 0.16684119184335744, 0.1677107668270048, 0.1677107668270048, 0.16955525625774598, 0.1705402119224538, 0.1705402119224538, 0.17192849224578616, 0.17192849224578616, 0.17192849224578616, 0.17192849224578616, 0.17192849224578616, 0.17192849224578616, 0.17192849224578616, 0.17342179638182592, 0.17342179638182592, 0.17443520862897124, 0.1750828024849767, 0.1750828024849767, 0.1750828024849767, 0.1750828024849767, 0.1750828024849767, 0.1750828024849767, 0.17630855112254848, 0.17630855112254848, 0.17630855112254848, 0.17930783819194782, 0.17930783819194782, 0.17930783819194782, 0.18046509356202017, 0.18046509356202017, 0.18046509356202017, 0.18046509356202017, 0.18046509356202017, 0.1815942491241129, 0.1815942491241129, 0.1815942491241129, 0.1815942491241129, 0.1815942491241129, 0.1815942491241129, 0.1815942491241129, 0.1815942491241129, 0.1815942491241129, 0.1815942491241129, 0.1815942491241129, 0.1815942491241129]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_1
('Number of substructures, proteins, pathways, drugs, se: ', 2936, 1448, 330, 969, 598)
((872, 598), (872, 598), -658.97034, 89035.0)
('Error: ', tensor(26251180., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.49976392318254126, 0.1714144202460583)
('Test: AUC, AUPR: ', 0.4989066293483102, 0.17777999011757842)
((872, 598), (872, 598), 273.06653, 89035.0)
('Error: ', tensor(18855872., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5004076764512065, 0.17172446537031255)
('Test: AUC, AUPR: ', 0.49883722566647337, 0.17778872496257045)
((872, 598), (872, 598), 1234.1445, 89035.0)
('Error: ', tensor(13626722., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5012132554029934, 0.1720842138808906)
('Test: AUC, AUPR: ', 0.4988090875646697, 0.17783235518198864)
((872, 598), (872, 598), 2205.2595, 89035.0)
('Error: ', tensor(10011245., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5021430560951177, 0.17250060634150194)
('Test: AUC, AUPR: ', 0.49883679449822227, 0.17784298657392086)
((872, 598), (872, 598), 3152.6558, 89035.0)
('Error: ', tensor(7508727.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5031808169254415, 0.17298015113609388)
('Test: AUC, AUPR: ', 0.4989032149897019, 0.1778329791226667)
((872, 598), (872, 598), 3989.8354, 89035.0)
('Error: ', tensor(5745876., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.504312928289201, 0.17351119304969853)
('Test: AUC, AUPR: ', 0.49895101806830006, 0.17776913637398845)
((872, 598), (872, 598), 4716.1367, 89035.0)
('Error: ', tensor(4471100.5000, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5055435911984407, 0.17409690840695466)
('Test: AUC, AUPR: ', 0.4989841562811579, 0.1776805748172382)
