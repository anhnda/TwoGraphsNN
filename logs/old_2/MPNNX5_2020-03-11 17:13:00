class Net5(torch.nn.Module):
    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net5, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convD1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convD2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convD2.bias, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        # self.my_reset_params(self.convS1.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS1.bias, config.EMBED_DIM)
        #
        # self.my_reset_params(self.convS2.weight, config.EMBED_DIM)
        # self.my_reset_params(self.convS2.bias, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        # self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)

        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)

        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def my_reset_params(self, tensor, size=10):
        bound = 1.0 / math.sqrt(size)
        if tensor is not None:
            tensor.data.uniform_(0.0, bound)

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):

        # xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch
        #
        # # xDrug = self.mact1(self.mlinear1(xDrug))
        # # xDrug = self.mact2(self.mlinear2(xDrug))
        #
        # xDrug = self.nodesEmbedding(xDrug)
        # xDrug = xDrug.squeeze(1)
        #
        # xDrug = F.relu(self.conv1(xDrug, edge_index))
        #
        # v = self.pool1(xDrug, edge_index, None, batch)
        # xDrug, edge_index, _, batch, _, _ = v
        # x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)
        #
        # xDrug = F.relu(self.conv2(xDrug, edge_index))
        #
        # xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        # x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)
        #
        # xDrug = F.relu(self.conv3(xDrug, edge_index))
        #
        # xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        # x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)
        #
        # xDrug = x1 + x2 + x3
        #
        # xDrug = self.lin1(xDrug)
        # xDrug = self.act1(xDrug)
        # xDrug = self.lin2(xDrug)
        # xDrug = self.act2(xDrug)
        #
        # x = self.nodesEmbedding(x[nDrug:])
        # x = x.squeeze(1)
        #
        # x = torch.cat((xDrug, x), dim=0)

        x = self.nodesEmbedding(x)

        # Conv Drug:
        # x = self.convD1(x, drugEdges)
        # x = F.relu(x)
        # x = self.convD2(x, drugEdges)
        # x = F.relu(x)
        # # Conv SE:
        # x = self.convS1(x, seEdges)
        # x = F.relu(x)
        # x = self.convS2(x, seEdges)
        # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

    def cal(self, drugE, seE):
        return torch.matmul(drugE, seE.t())

    def cal2(self, drugE, seE):
        nDrug, nDim = drugE.shape
        nSe, _ = seE.shape
        preRe = list()
        for i in range(nDrug):
            dE = drugE[i]
            dE = dE.squeeze()
            de = dE.expand((nSe, nDim))
            v = torch.cat((de, seE), dim=1)
            v = self.linear1(v)
            v = self.act1(v)
            v = self.linear2(v)
            # v = self.act2(v)
            v = v.squeeze()
            preRe.append(v)
        return torch.stack(preRe)

('Undirected graph: ', False)
MPNNX
<models.MPNNX5.MPNNX5 object at 0x7f99592c75d0>
('Manual torch seed: ', 443181909)
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 2936, 1448, 330, 969, 598)
((872, 330), (97, 330), (872, 598), (97, 598))
((872, 598), (872, 598), -4310.666, 88676.0)
('Error: ', tensor(51953784., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5005089897482482, 0.1703299870229478)
('Test: AUC, AUPR: ', 0.5010783838742964, 0.18209182088984638)
((872, 598), (872, 598), -1295.0896, 88676.0)
('Error: ', tensor(36869864., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5011361807484144, 0.17061020639109784)
('Test: AUC, AUPR: ', 0.5010480139864875, 0.1820093348901281)
((872, 598), (872, 598), 1212.3125, 88676.0)
('Error: ', tensor(26298182., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5019284191626399, 0.1709519902788155)
('Test: AUC, AUPR: ', 0.5010214474697307, 0.18192214674713372)
((872, 598), (872, 598), 3379.8572, 88676.0)
('Error: ', tensor(19035312., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5029348487542888, 0.17139147543752029)
('Test: AUC, AUPR: ', 0.5010111068669175, 0.1818530854444794)
((872, 598), (872, 598), 5243.259, 88676.0)
('Error: ', tensor(14029120., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5041411576660525, 0.17192339984064808)
('Test: AUC, AUPR: ', 0.5010552221657485, 0.18185551726888374)
((872, 598), (872, 598), 6817.8315, 88676.0)
('Error: ', tensor(10513676., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5055312679919982, 0.17254389766587996)
('Test: AUC, AUPR: ', 0.50110401507021, 0.18189850524683057)
((872, 598), (872, 598), 8152.51, 88676.0)
('Error: ', tensor(7981383., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5071204215817388, 0.17326052937874747)
('Test: AUC, AUPR: ', 0.5012171368187069, 0.18200932048192284)
((872, 598), (872, 598), 9323.575, 88676.0)
('Error: ', tensor(6110547., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5089314673277534, 0.1740806766042422)
('Test: AUC, AUPR: ', 0.5013451085380655, 0.18214363321911378)
