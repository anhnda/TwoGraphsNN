    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net4, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        # self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):

        x = self.nodesEmbedding(x[nDrug:])
        x = x.squeeze(1)


        xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch

        xDrug = self.mact1(self.mlinear1(xDrug))
        xDrug = self.mact2(self.mlinear2(xDrug))

        xDrug = F.relu(self.conv1(xDrug, edge_index))

        v  = self.pool1(xDrug, edge_index, None, batch)
        xDrug, edge_index, _, batch, _, _ = v
        x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv2(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv3(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = x1 + x2 + x3

        xDrug = self.lin1(xDrug)
        xDrug = self.act1(xDrug)
        xDrug = self.lin2(xDrug)
        xDrug = self.act2(xDrug)



        x = torch.cat((xDrug, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        # x = self.convS1(x, seEdges)
        # x = F.relu(x)
        # x = self.convS2(x, seEdges)
        # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', True)
MPNNX
<models.MPNNX4.MPNNX4 object at 0x7f8fcaeb2dd0>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 598)
((872, 598), (872, 598), -5875.336, 88676.0)
('Error: ', tensor(90831.8750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5111765679504272, 0.1724533075113735)
('Test: AUC, AUPR: ', 0.4854028401536138, 0.1731121712452283)
((872, 598), (872, 598), 89047.21, 88676.0)
('Error: ', tensor(68337.6719, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6898232707225319, 0.35014049580155493)
('Test: AUC, AUPR: ', 0.6809363490552816, 0.35746650074199654)
((872, 598), (872, 598), 85544.14, 88676.0)
('Error: ', tensor(60708.4180, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.767324096989185, 0.4675937748142077)
('Test: AUC, AUPR: ', 0.7419962837960437, 0.46093907844494286)
((872, 598), (872, 598), 80028.43, 88676.0)
('Error: ', tensor(57756.0664, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8015551512387487, 0.5171938147728885)
('Test: AUC, AUPR: ', 0.7461941509484746, 0.46725965822669113)
((872, 598), (872, 598), 89381.27, 88676.0)
('Error: ', tensor(55399.6055, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8181719962265053, 0.5514606528689566)
('Test: AUC, AUPR: ', 0.7407716563992772, 0.4514824013653937)
((872, 598), (872, 598), 83877.49, 88676.0)
('Error: ', tensor(53900.4844, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8286610255082689, 0.5759092707830935)
('Test: AUC, AUPR: ', 0.7353063754278645, 0.43413666865877054)
((872, 598), (872, 598), 82945.86, 88676.0)
('Error: ', tensor(52654.5078, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8360147051486451, 0.5950077993435136)
('Test: AUC, AUPR: ', 0.7319429997292437, 0.4231693457924967)
((872, 598), (872, 598), 84970.84, 88676.0)
('Error: ', tensor(51644.0195, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8410511463722425, 0.6092128071356566)
('Test: AUC, AUPR: ', 0.7320270974905884, 0.4171621741191013)
((872, 598), (872, 598), 96724.82, 88676.0)
('Error: ', tensor(51235.4961, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8443399798949581, 0.6173567905926945)
('Test: AUC, AUPR: ', 0.7387970028290491, 0.4315608035245495)
((872, 598), (872, 598), 94785.38, 88676.0)
('Error: ', tensor(50696.3320, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8470320306943462, 0.6237678949345877)
('Test: AUC, AUPR: ', 0.7413915918609775, 0.4342167430402015)
((872, 598), (872, 598), 79251.266, 88676.0)
('Error: ', tensor(50603.5312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8490734217147906, 0.6283497695071332)
('Test: AUC, AUPR: ', 0.7408181630751678, 0.42351245068255505)
((872, 598), (872, 598), 89545.6, 88676.0)
('Error: ', tensor(49947.4961, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8511555244736972, 0.6321079635907322)
('Test: AUC, AUPR: ', 0.7421486359450061, 0.4284456770490637)
((872, 598), (872, 598), 84880.57, 88676.0)
('Error: ', tensor(49863.7969, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8525003813800973, 0.6340450312174536)
('Test: AUC, AUPR: ', 0.7402121983426799, 0.4209549141520106)
((872, 598), (872, 598), 93286.6, 88676.0)
('Error: ', tensor(49636.7500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8544630171615796, 0.6368650946268565)
('Test: AUC, AUPR: ', 0.7399444372152355, 0.4193198961150306)
((872, 598), (872, 598), 85094.3, 88676.0)
('Error: ', tensor(49429.0273, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.856274234545966, 0.6394033892454758)
('Test: AUC, AUPR: ', 0.7390973609894368, 0.41103930576710357)
((872, 598), (872, 598), 107768.47, 88676.0)
('Error: ', tensor(50648.6328, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8559603547364439, 0.6385148262536022)
('Test: AUC, AUPR: ', 0.7407318571955583, 0.4205432374361938)
((872, 598), (872, 598), 109637.13, 88676.0)
('Error: ', tensor(51267.9219, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8528775287689518, 0.6305072287829672)
('Test: AUC, AUPR: ', 0.7450817019680486, 0.43278779064027445)
((872, 598), (872, 598), 90680.23, 88676.0)
('Error: ', tensor(49576.3359, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8555681932764532, 0.6368504779465682)
('Test: AUC, AUPR: ', 0.7440654788760903, 0.42609251389421293)
((872, 598), (872, 598), 84161.42, 88676.0)
('Error: ', tensor(49418.1094, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8572535303701818, 0.63989362092332)
('Test: AUC, AUPR: ', 0.7437426479801099, 0.4190973201257136)
Train: 0.8573 0.6399
Test: 0.7437 0.4191
[0.5914002903325285, 0.6036097992291336, 0.6144824561733715, 0.6146284315829764, 0.6114735990746611, 0.615975295633357, 0.6192807514073917, 0.6237894208075032, 0.6243268150450143, 0.6275072377536524, 0.6291181253010186, 0.6313955395422541, 0.6372419640054813, 0.6411813067805856, 0.6425795138330339, 0.6445823637033296, 0.6451737998553702, 0.6467524227097217, 0.6476388441683694, 0.6517778525032085, 0.6558436430222316, 0.6592440899419971, 0.662575366136434, 0.6658356802299056, 0.6684154638637747, 0.6689991107674778, 0.6714086448739016, 0.673860767696927, 0.6768905411506634, 0.6778972280071519, 0.6817635154087522, 0.6834335963140373, 0.684286164790751, 0.6856317045221921, 0.6866621673472497, 0.6918481078341391, 0.6941530401810044, 0.6975963047408377, 0.6997112871744805, 0.7029653734098096, 0.7044062388554914, 0.7052463846337531, 0.7083598227050649, 0.7083598227050649, 0.7105518303684395, 0.7113986278072847, 0.7132039584401932, 0.7141058331984608, 0.7176332210247593, 0.720879263619392, 0.720879263619392, 0.7219147870671079, 0.7219147870671079, 0.7241486936548541, 0.7252262479253203, 0.7252262479253203, 0.727239338565641, 0.727239338565641, 0.727239338565641, 0.727239338565641, 0.727239338565641, 0.727239338565641, 0.727239338565641, 0.7301831987287439, 0.7301831987287439, 0.7316726933084681, 0.733087449338132, 0.733087449338132, 0.733087449338132, 0.733087449338132, 0.733087449338132, 0.733087449338132, 0.7348254250666824, 0.7348254250666824, 0.7348254250666824, 0.7399053647637379, 0.7399053647637379, 0.7399053647637379, 0.7416821249469857, 0.7416821249469857, 0.7416821249469857, 0.7416821249469857, 0.7416821249469857, 0.7437426479801099, 0.7437426479801099, 0.7437426479801099, 0.7437426479801099, 0.7437426479801099, 0.7437426479801099, 0.7437426479801099, 0.7437426479801099, 0.7437426479801099, 0.7437426479801099, 0.7437426479801099, 0.7437426479801099]
[0.07904245708260685, 0.09157410997277313, 0.10166676888646774, 0.10759421256005254, 0.1098163740553128, 0.11739045424873444, 0.12532298279521703, 0.13278436779724448, 0.13689835632136296, 0.14201243997543017, 0.14477628529274048, 0.14901489470090012, 0.15804950309997423, 0.16459226607855618, 0.16705879542060947, 0.17099488755556197, 0.17302933499773385, 0.17591329267562617, 0.1781013135948607, 0.18628684129509324, 0.1928084749211578, 0.1991674725792395, 0.20523731065624715, 0.21104588906304403, 0.21673155726644813, 0.2179722959532126, 0.22242861634087863, 0.22709249968406106, 0.23338205735481798, 0.23599291407215153, 0.24482219613589082, 0.24814786434827002, 0.24968580320335715, 0.25248379694810386, 0.2554311469924373, 0.2676742444252237, 0.27258097404559356, 0.2810620781464337, 0.2870359140384131, 0.2957949558516578, 0.3001495619512691, 0.30208212841943943, 0.3091742686898274, 0.3091742686898274, 0.3148347052419391, 0.31655812543932677, 0.32278675546994584, 0.32554638765583865, 0.33632172421988016, 0.3452394742823929, 0.3452394742823929, 0.34779566246012716, 0.34779566246012716, 0.35511880854877254, 0.35832661458425774, 0.35832661458425774, 0.364556841129354, 0.364556841129354, 0.364556841129354, 0.364556841129354, 0.364556841129354, 0.364556841129354, 0.364556841129354, 0.37332585420868136, 0.37332585420868136, 0.37790398548532017, 0.3823552913386338, 0.3823552913386338, 0.3823552913386338, 0.3823552913386338, 0.3823552913386338, 0.3823552913386338, 0.3879146402414778, 0.3879146402414778, 0.3879146402414778, 0.4045461735696574, 0.4045461735696574, 0.4045461735696574, 0.4114477378980906, 0.4114477378980906, 0.4114477378980906, 0.4114477378980906, 0.4114477378980906, 0.4190973201257136, 0.4190973201257136, 0.4190973201257136, 0.4190973201257136, 0.4190973201257136, 0.4190973201257136, 0.4190973201257136, 0.4190973201257136, 0.4190973201257136, 0.4190973201257136, 0.4190973201257136, 0.4190973201257136]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 598)
((872, 598), (872, 598), 79101.29, 89035.0)
('Error: ', tensor(74385.6797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4866238572375468, 0.1655651796848504)
('Test: AUC, AUPR: ', 0.4958938489121578, 0.17231912375684505)
((872, 598), (872, 598), 84205.516, 89035.0)
('Error: ', tensor(72314.5469, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6601919613637975, 0.30412163003225423)
('Test: AUC, AUPR: ', 0.6573838135133061, 0.3057429568635739)
((872, 598), (872, 598), 79611.56, 89035.0)
('Error: ', tensor(64069.5820, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7394682623799641, 0.42128695292494156)
('Test: AUC, AUPR: ', 0.7258105102840646, 0.413957640041122)
((872, 598), (872, 598), 96709.45, 89035.0)
('Error: ', tensor(58028.3281, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7998990632062097, 0.5186794612491651)
('Test: AUC, AUPR: ', 0.7433279553309198, 0.45993636373652885)
