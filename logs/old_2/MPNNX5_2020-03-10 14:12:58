    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net5, self).__init__()

        self.convD1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        # self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = GATConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):




        xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch

        # xDrug = self.mact1(self.mlinear1(xDrug))
        # xDrug = self.mact2(self.mlinear2(xDrug))

        xDrug = self.nodesEmbedding(xDrug)
        xDrug = xDrug.squeeze(1)

        xDrug = F.relu(self.conv1(xDrug, edge_index))

        v = self.pool1(xDrug, edge_index, None, batch)
        xDrug, edge_index, _, batch, _, _ = v
        x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv2(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv3(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = x1 + x2 + x3

        xDrug = self.lin1(xDrug)
        xDrug = self.act1(xDrug)
        xDrug = self.lin2(xDrug)
        xDrug = self.act2(xDrug)


        x = self.nodesEmbedding(x[nDrug:])
        x = x.squeeze(1)

        x = torch.cat((xDrug, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        x = self.convS1(x, seEdges)
        x = F.relu(x)
        x = self.convS2(x, seEdges)
        x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', False)
MPNNX
<models.MPNNX5.MPNNX5 object at 0x7f6d8bb22810>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 598)
((872, 598), (872, 598), 75979.27, 88676.0)
('Error: ', tensor(74006.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4815425140372568, 0.15905750198073645)
('Test: AUC, AUPR: ', 0.4932075197817004, 0.1739924126782559)
((872, 598), (872, 598), 88178.58, 88676.0)
('Error: ', tensor(73546.1406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5528816498226756, 0.1897082735945047)
('Test: AUC, AUPR: ', 0.5192523408091485, 0.18425327710518744)
((872, 598), (872, 598), 91931.66, 88676.0)
('Error: ', tensor(72740.7891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6454078258235004, 0.27558219812963636)
('Test: AUC, AUPR: ', 0.6110983560987122, 0.2626296346283429)
((872, 598), (872, 598), 97223.08, 88676.0)
('Error: ', tensor(64444.7812, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7491316615431767, 0.4013248352252768)
('Test: AUC, AUPR: ', 0.6954465611155694, 0.3638183853108351)
((872, 598), (872, 598), 83537.56, 88676.0)
('Error: ', tensor(56813.6680, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8099220623610864, 0.5321874815551136)
('Test: AUC, AUPR: ', 0.7140368059246643, 0.42065226019058855)
((872, 598), (872, 598), 78720.83, 88676.0)
('Error: ', tensor(53072.3203, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8343101947824058, 0.5913021977286523)
('Test: AUC, AUPR: ', 0.7358199316627353, 0.44888615103533935)
((872, 598), (872, 598), 91861.46, 88676.0)
('Error: ', tensor(51108.8047, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8428194906697215, 0.6162078834345861)
('Test: AUC, AUPR: ', 0.7459308711494816, 0.4651422269688235)
((872, 598), (872, 598), 81579.66, 88676.0)
('Error: ', tensor(50486.2852, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8479934894170318, 0.6261089730031983)
('Test: AUC, AUPR: ', 0.7513336188124817, 0.4725276058175126)
((872, 598), (872, 598), 101200.29, 88676.0)
('Error: ', tensor(50295.7109, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8505658699412001, 0.6315200817488322)
('Test: AUC, AUPR: ', 0.7560665726046338, 0.48136577427011873)
((872, 598), (872, 598), 95907.13, 88676.0)
('Error: ', tensor(50144.1641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8507453726701445, 0.6306763683911982)
('Test: AUC, AUPR: ', 0.7530907552088724, 0.47339170409238557)
Train: 0.8524 0.6344
Test: 0.7531 0.4734
[0.6170899053034575, 0.6315117852759498, 0.6377517890148279, 0.6377837045713851, 0.6312763900212378, 0.6324233148994824, 0.634715884861367, 0.6359169613273551, 0.6369803587060816, 0.6396407572975067, 0.6406642462432508, 0.6423238307157223, 0.6473514253846872, 0.6507341169799196, 0.6514642897063154, 0.6536881231969337, 0.6547986758980691, 0.6563175770544611, 0.6576160865021932, 0.6622977038743267, 0.6656576788405726, 0.668082898111308, 0.6711906316619465, 0.6745058976544058, 0.6771233078136226, 0.6775560608661798, 0.679609563942764, 0.6821922596910374, 0.685379195648692, 0.6865133067931214, 0.6904281052462355, 0.6921435763359387, 0.6928957727404306, 0.6943283304153365, 0.6953953083012607, 0.7005966520347107, 0.7026393721457324, 0.7061780201319101, 0.70827073474121, 0.7117306525053608, 0.7134265140368303, 0.7143467764140097, 0.7174629526700351, 0.7174629526700351, 0.7196144160600753, 0.7204421710451092, 0.7224557942423124, 0.7234698803129804, 0.7272143407207982, 0.7302519731003057, 0.7302519731003057, 0.7313006487303312, 0.7313006487303312, 0.7336627014230054, 0.734734898665799, 0.734734898665799, 0.7368084805576738, 0.7368084805576738, 0.7368084805576738, 0.7368084805576738, 0.7368084805576738, 0.7368084805576738, 0.7368084805576738, 0.7396773415465236, 0.7396773415465236, 0.7411234741640385, 0.7425483839671108, 0.7425483839671108, 0.7425483839671108, 0.7425483839671108, 0.7425483839671108, 0.7425483839671108, 0.7442628631927027, 0.7442628631927027, 0.7442628631927027, 0.749232131985475, 0.749232131985475, 0.749232131985475, 0.7510801216886689, 0.7510801216886689, 0.7510801216886689, 0.7510801216886689, 0.7510801216886689, 0.7530907552088724, 0.7530907552088724, 0.7530907552088724, 0.7530907552088724, 0.7530907552088724, 0.7530907552088724, 0.7530907552088724, 0.7530907552088724, 0.7530907552088724, 0.7530907552088724, 0.7530907552088724, 0.7530907552088724]
[0.10916429794809285, 0.1263741952738954, 0.1371911394958908, 0.14501367813465804, 0.1475329770423432, 0.15705193562558986, 0.16553756146312937, 0.1727506681713444, 0.17836180196895354, 0.18414034001953972, 0.18534696084876737, 0.190672429507483, 0.20057555378600508, 0.20755224446820694, 0.20992957435492526, 0.2157310509752125, 0.21622885162384406, 0.2192466114624878, 0.22145241201690116, 0.2324272238680791, 0.23816634047580554, 0.24332850979282145, 0.2481612439133803, 0.254337507797582, 0.26027857431093715, 0.26129025869282846, 0.2650348240151979, 0.2712598073123591, 0.279789858883696, 0.2824174238387687, 0.29054116895522275, 0.29425551741575484, 0.2958192720982259, 0.2991736127236104, 0.3019321897767371, 0.3152427302596865, 0.32033549637610276, 0.3302681720761097, 0.3354417592926037, 0.3440282253562496, 0.3486656139750516, 0.3508352887527476, 0.35789888186240076, 0.35789888186240076, 0.36447986359724366, 0.3661046053835265, 0.3723300086244171, 0.3755793150064779, 0.3861427692409729, 0.3941696740829814, 0.3941696740829814, 0.3970748850046558, 0.3970748850046558, 0.4051496402988324, 0.4088151515223735, 0.4088151515223735, 0.4158700834431003, 0.4158700834431003, 0.4158700834431003, 0.4158700834431003, 0.4158700834431003, 0.4158700834431003, 0.4158700834431003, 0.4254085116304447, 0.4254085116304447, 0.4302119625821301, 0.43527233598995996, 0.43527233598995996, 0.43527233598995996, 0.43527233598995996, 0.43527233598995996, 0.43527233598995996, 0.4415193530054746, 0.4415193530054746, 0.4415193530054746, 0.45863776099136266, 0.45863776099136266, 0.45863776099136266, 0.4656584142693131, 0.4656584142693131, 0.4656584142693131, 0.4656584142693131, 0.4656584142693131, 0.47339170409238557, 0.47339170409238557, 0.47339170409238557, 0.47339170409238557, 0.47339170409238557, 0.47339170409238557, 0.47339170409238557, 0.47339170409238557, 0.47339170409238557, 0.47339170409238557, 0.47339170409238557, 0.47339170409238557]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 598)
((872, 598), (872, 598), 54261.355, 89035.0)
('Error: ', tensor(76156.6797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5067566620329, 0.16733500582257851)
('Test: AUC, AUPR: ', 0.5494203814462988, 0.18606050632838483)
((872, 598), (872, 598), 91612.65, 89035.0)
('Error: ', tensor(73597.7891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6202754681555904, 0.24245801896003932)
('Test: AUC, AUPR: ', 0.6371506001837357, 0.25604728135861105)
((872, 598), (872, 598), 66292.04, 89035.0)
('Error: ', tensor(68333.3750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7127545957040042, 0.36510956919985965)
('Test: AUC, AUPR: ', 0.7225276878345486, 0.38449316788191723)
((872, 598), (872, 598), 108573.2, 89035.0)
('Error: ', tensor(61481.4961, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7769936976677905, 0.4749362752964235)
('Test: AUC, AUPR: ', 0.7499780937715332, 0.45163550351167064)
((872, 598), (872, 598), 79808.11, 89035.0)
('Error: ', tensor(56557.7695, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.812650883499191, 0.5455168447765825)
('Test: AUC, AUPR: ', 0.7432560521080764, 0.45370534432213955)
((872, 598), (872, 598), 87046.58, 89035.0)
('Error: ', tensor(53417.9883, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8316570442995938, 0.5861087142555177)
('Test: AUC, AUPR: ', 0.7330151290373998, 0.4336279794868833)
((872, 598), (872, 598), 97079.5, 89035.0)
('Error: ', tensor(51831.7188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8407526306678057, 0.6110822642549737)
('Test: AUC, AUPR: ', 0.7238112849791881, 0.4190447867176745)
((872, 598), (872, 598), 85495.27, 89035.0)
('Error: ', tensor(50667.4570, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8460726176194339, 0.6252223289519949)
('Test: AUC, AUPR: ', 0.7183613141702049, 0.41057031568085145)
