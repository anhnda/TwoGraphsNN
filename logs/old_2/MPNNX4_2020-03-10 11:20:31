    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net4, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):
        x = self.nodesEmbedding(x[nDrug:])
        x = x.squeeze(1)


        xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch

        xDrug = self.mact1(self.mlinear1(xDrug))
        xDrug = self.mact2(self.mlinear2(xDrug))

        xDrug = F.relu(self.conv1(xDrug, edge_index))

        v  = self.pool1(xDrug, edge_index, None, batch)
        xDrug, edge_index, _, batch, _, _ = v
        x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv2(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv3(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = x1 + x2 + x3

        xDrug = self.lin1(xDrug)
        xDrug = self.act1(xDrug)
        xDrug = self.lin2(xDrug)
        xDrug = self.act2(xDrug)



        x = torch.cat((xDrug, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        # x = self.convS1(x, seEdges)
        # x = F.relu(x)
        # x = self.convS2(x, seEdges)
        # x = F.relu(x)

        # x = self.nodesEmbedding(x)
        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', False)
MPNNX
<models.MPNNX4.MPNNX4 object at 0x7fb374ec2710>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 2936, 1448, 330, 969, 598)
((872, 598), (872, 598), 135863.44, 88676.0)
('Error: ', tensor(77902.4531, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5024873819166307, 0.16938724606588618)
('Test: AUC, AUPR: ', 0.5150256509538153, 0.18818300415592765)
((872, 598), (872, 598), 72961.83, 88676.0)
('Error: ', tensor(71734.7266, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7684806592144835, 0.44560057605858877)
('Test: AUC, AUPR: ', 0.7207391188102796, 0.38432577742342644)
((872, 598), (872, 598), 97031.91, 88676.0)
('Error: ', tensor(58908.5586, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7997440376660024, 0.503691860376107)
('Test: AUC, AUPR: ', 0.755182750486948, 0.4291503899233911)
((872, 598), (872, 598), 90394.9, 88676.0)
('Error: ', tensor(56142.6641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8076232889186488, 0.5486971912556421)
('Test: AUC, AUPR: ', 0.7598373175828188, 0.456871458640031)
((872, 598), (872, 598), 90642.0, 88676.0)
('Error: ', tensor(55355.6133, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8155524051832269, 0.5643454359697287)
('Test: AUC, AUPR: ', 0.7639167014152379, 0.45667001083948044)
((872, 598), (872, 598), 90703.5, 88676.0)
('Error: ', tensor(54514.6172, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8224480537705355, 0.5754432973847947)
('Test: AUC, AUPR: ', 0.7650016475566499, 0.44552227870772576)
((872, 598), (872, 598), 93612.09, 88676.0)
('Error: ', tensor(53744.7852, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8314610979214739, 0.5870878406125446)
('Test: AUC, AUPR: ', 0.7603293934835483, 0.43392469138401674)
((872, 598), (872, 598), 88609.95, 88676.0)
('Error: ', tensor(53176.9766, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8357691855647055, 0.5971335375528598)
('Test: AUC, AUPR: ', 0.7517477676660382, 0.4224480823653181)
((872, 598), (872, 598), 85906.695, 88676.0)
('Error: ', tensor(52692.4922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.840161423681671, 0.6054921969689689)
('Test: AUC, AUPR: ', 0.7467544962580346, 0.4211047420222021)
((872, 598), (872, 598), 89217.89, 88676.0)
('Error: ', tensor(52046.2617, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8429033418641904, 0.6119529264910675)
('Test: AUC, AUPR: ', 0.7412875259009017, 0.412410527981233)
((872, 598), (872, 598), 83434.5, 88676.0)
('Error: ', tensor(51766.2383, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8450430290753619, 0.6153714273014121)
('Test: AUC, AUPR: ', 0.7235915489607946, 0.37780663653737406)
((872, 598), (872, 598), 78236.664, 88676.0)
('Error: ', tensor(51132.4414, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8487871430856536, 0.6258287015150432)
('Test: AUC, AUPR: ', 0.7344372921240663, 0.3873729007581658)
((872, 598), (872, 598), 90978.984, 88676.0)
('Error: ', tensor(50092.2422, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8526256655355388, 0.6320775817501453)
('Test: AUC, AUPR: ', 0.7401727506353378, 0.38222476982848275)
((872, 598), (872, 598), 85325.86, 88676.0)
('Error: ', tensor(49621.6602, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8551179378689668, 0.6380054428869499)
('Test: AUC, AUPR: ', 0.7448809184251435, 0.38015350179864554)
((872, 598), (872, 598), 87699.055, 88676.0)
('Error: ', tensor(49273.0625, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8565893128535773, 0.6421640916456811)
('Test: AUC, AUPR: ', 0.7422328458647389, 0.37261117907837993)
((872, 598), (872, 598), 88460.0, 88676.0)
('Error: ', tensor(48935.2500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8586710554767717, 0.6469678419609213)
('Test: AUC, AUPR: ', 0.7436996542651594, 0.3667358160877131)
((872, 598), (872, 598), 90155.68, 88676.0)
('Error: ', tensor(48663.1406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8603731653812337, 0.6506349835202546)
('Test: AUC, AUPR: ', 0.7418557713669205, 0.3631595822313645)
((872, 598), (872, 598), 91431.26, 88676.0)
('Error: ', tensor(48561.6523, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8610682195410065, 0.6521385956632715)
('Test: AUC, AUPR: ', 0.7370700951210682, 0.35652570929964184)
((872, 598), (872, 598), 85460.16, 88676.0)
('Error: ', tensor(48272.3438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.863334899695682, 0.6567030940984343)
('Test: AUC, AUPR: ', 0.7410252004496214, 0.35998499033349307)
Train: 0.8633 0.6567
Test: 0.7410 0.3600
[0.6215733616144294, 0.6297879945116754, 0.6365654020907288, 0.6336176909222547, 0.6289968772332437, 0.6331311521821102, 0.6368115817246982, 0.6377166452805053, 0.6392258018663388, 0.6423524010423738, 0.6430057118780929, 0.6441991171049289, 0.6483699242223441, 0.6513718930371537, 0.6524463808041389, 0.6538743601390248, 0.6544867913966632, 0.6551569585599135, 0.6554674972343104, 0.6591676154928235, 0.6625026357082775, 0.6649832564579359, 0.6672701244022624, 0.6702506968958686, 0.6723787361501301, 0.6726740758312678, 0.67455770472854, 0.676848142875453, 0.6798159954522565, 0.6807607166675531, 0.6840034097632561, 0.6855434833218395, 0.6863422889145248, 0.6877181808183026, 0.6884677749461412, 0.6928855602709257, 0.6950356388471917, 0.6978386079598341, 0.6994498282222367, 0.7025210369431557, 0.7038668098929056, 0.7048007329121225, 0.7077424906876352, 0.7077424906876352, 0.7098014043970945, 0.710637424747772, 0.71250976264378, 0.7134453769803486, 0.7168148053662794, 0.7196493956743565, 0.7196493956743565, 0.7206116689565776, 0.7206116689565776, 0.7227281310678834, 0.723751240876777, 0.723751240876777, 0.7256451242577484, 0.7256451242577484, 0.7256451242577484, 0.7256451242577484, 0.7256451242577484, 0.7256451242577484, 0.7256451242577484, 0.7282942226991429, 0.7282942226991429, 0.7296680836805585, 0.7309902765923252, 0.7309902765923252, 0.7309902765923252, 0.7309902765923252, 0.7309902765923252, 0.7309902765923252, 0.7326496102569804, 0.7326496102569804, 0.7326496102569804, 0.7373917536010373, 0.7373917536010373, 0.7373917536010373, 0.7391238128430887, 0.7391238128430887, 0.7391238128430887, 0.7391238128430887, 0.7391238128430887, 0.7410252004496214, 0.7410252004496214, 0.7410252004496214, 0.7410252004496214, 0.7410252004496214, 0.7410252004496214, 0.7410252004496214, 0.7410252004496214, 0.7410252004496214, 0.7410252004496214, 0.7410252004496214, 0.7410252004496214]
[0.08740967583226755, 0.09807410208724703, 0.10788540187973641, 0.11357186345584225, 0.11652752371027357, 0.12515573986555037, 0.13249545733014848, 0.13841255193889312, 0.14348227755319037, 0.14810800762724474, 0.15043078775519134, 0.15369995924699234, 0.1612684626227234, 0.16736736290750132, 0.1693759874283782, 0.17245398556138664, 0.17414397295997772, 0.17620265525508597, 0.17763397478171536, 0.1838315129505432, 0.1889783307285306, 0.19380680058525332, 0.1984915472032423, 0.2034072507775364, 0.20741429062947608, 0.20809235620702754, 0.21165250998093027, 0.21561612847805808, 0.22100441945205537, 0.22279904094372402, 0.2294107716311845, 0.2324280473045592, 0.23381931927402494, 0.23646399486963407, 0.23816871219457086, 0.24704956580126333, 0.25132714573957765, 0.25743805258667096, 0.2613650701222717, 0.26791631905461233, 0.27100543764709956, 0.27280218304170756, 0.2789077941413832, 0.2789077941413832, 0.28328686298875794, 0.28500870060887573, 0.2892589751648144, 0.2912930443011231, 0.29906864691303836, 0.30574849036200913, 0.30574849036200913, 0.30804444461715963, 0.30804444461715963, 0.31312684107244937, 0.3155264992437378, 0.3155264992437378, 0.3201643500509056, 0.3201643500509056, 0.3201643500509056, 0.3201643500509056, 0.3201643500509056, 0.3201643500509056, 0.3201643500509056, 0.32661086591876043, 0.32661086591876043, 0.32997127690477623, 0.3333263087545845, 0.3333263087545845, 0.3333263087545845, 0.3333263087545845, 0.3333263087545845, 0.3333263087545845, 0.33764689134218584, 0.33764689134218584, 0.33764689134218584, 0.3500737885496481, 0.3500737885496481, 0.3500737885496481, 0.3547344904764073, 0.3547344904764073, 0.3547344904764073, 0.3547344904764073, 0.3547344904764073, 0.35998499033349307, 0.35998499033349307, 0.35998499033349307, 0.35998499033349307, 0.35998499033349307, 0.35998499033349307, 0.35998499033349307, 0.35998499033349307, 0.35998499033349307, 0.35998499033349307, 0.35998499033349307, 0.35998499033349307]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_1
('Number of substructures, proteins, pathways, drugs, se: ', 2936, 1448, 330, 969, 598)
((872, 598), (872, 598), 113975.96, 89035.0)
('Error: ', tensor(75109.7656, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4880465332915903, 0.16332971704662747)
('Test: AUC, AUPR: ', 0.4893320299882025, 0.1678882628872359)
((872, 598), (872, 598), 102045.266, 89035.0)
('Error: ', tensor(69292.0938, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7650985629147823, 0.4383718921164892)
('Test: AUC, AUPR: ', 0.7514451627828704, 0.41327369411711906)
((872, 598), (872, 598), 97430.16, 89035.0)
('Error: ', tensor(57821.6914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8016323725059633, 0.5250256876665622)
('Test: AUC, AUPR: ', 0.7681526783364985, 0.4668138503039876)
((872, 598), (872, 598), 92281.02, 89035.0)
('Error: ', tensor(55960.4453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8086877723217605, 0.5598414306072019)
('Test: AUC, AUPR: ', 0.7620602668335041, 0.4443811656863143)
((872, 598), (872, 598), 90124.61, 89035.0)
('Error: ', tensor(54878.4688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8198985485597348, 0.5734664772994795)
('Test: AUC, AUPR: ', 0.7611567902944656, 0.4283732563922759)
((872, 598), (872, 598), 91386.98, 89035.0)
('Error: ', tensor(54049.0078, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.827409489400829, 0.587355573608034)
('Test: AUC, AUPR: ', 0.7461661589322642, 0.3956657633171371)
((872, 598), (872, 598), 95700.72, 89035.0)
('Error: ', tensor(53137.0820, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8355940066792825, 0.6004031998422685)
('Test: AUC, AUPR: ', 0.728433297493613, 0.3680974664350675)
((872, 598), (872, 598), 100956.9, 89035.0)
('Error: ', tensor(52192.7188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8409852499810416, 0.6134223385494034)
('Test: AUC, AUPR: ', 0.722807057077094, 0.3582506034710182)
((872, 598), (872, 598), 98240.44, 89035.0)
('Error: ', tensor(50544.5547, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8497809106629064, 0.6323833149986389)
('Test: AUC, AUPR: ', 0.7215475847736877, 0.34615517079759706)
((872, 598), (872, 598), 98326.34, 89035.0)
('Error: ', tensor(49474.1992, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8572804197482022, 0.6460089983436027)
('Test: AUC, AUPR: ', 0.715937691705225, 0.3236838229965083)
((872, 598), (872, 598), 96700.82, 89035.0)
('Error: ', tensor(48616.6289, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8631446691000831, 0.6556137890715044)
('Test: AUC, AUPR: ', 0.7170803832712416, 0.3174552080894999)
((872, 598), (872, 598), 95757.03, 89035.0)
('Error: ', tensor(48134.9922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8662823234686089, 0.6616612546091)
('Test: AUC, AUPR: ', 0.7145577330871691, 0.30851094785725286)
((872, 598), (872, 598), 84784.86, 89035.0)
('Error: ', tensor(47768.5977, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.868830577053807, 0.6662395515035962)
('Test: AUC, AUPR: ', 0.7161583376842566, 0.3080180169115514)
((872, 598), (872, 598), 93004.65, 89035.0)
('Error: ', tensor(47420.8125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8706649973134506, 0.6696919953422825)
('Test: AUC, AUPR: ', 0.7153906246051055, 0.30408655488384634)
((872, 598), (872, 598), 92487.58, 89035.0)
('Error: ', tensor(47184.3906, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8723064366382722, 0.6725785713463384)
('Test: AUC, AUPR: ', 0.7165495791378023, 0.30479178886468955)
((872, 598), (872, 598), 92807.55, 89035.0)
('Error: ', tensor(47040.7344, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.873236843216999, 0.67455127898113)
('Test: AUC, AUPR: ', 0.7143523251498107, 0.30117856341501714)
((872, 598), (872, 598), 83899.36, 89035.0)
('Error: ', tensor(46935.5234, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8746515686554597, 0.6770092375002813)
('Test: AUC, AUPR: ', 0.7157546859941784, 0.3038690574444177)
