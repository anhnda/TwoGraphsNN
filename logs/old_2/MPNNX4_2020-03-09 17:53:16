    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net4, self).__init__()

        self.convD1 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = GCNConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):

        x = self.nodesEmbedding(x[nDrug:])
        x = x.squeeze(1)


        xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch

        xDrug = self.mact1(self.mlinear1(xDrug))
        xDrug = self.mact2(self.mlinear2(xDrug))

        xDrug = F.relu(self.conv1(xDrug, edge_index))

        v  = self.pool1(xDrug, edge_index, None, batch)
        xDrug, edge_index, _, batch, _, _ = v
        x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv2(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv3(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = x1 + x2 + x3

        xDrug = self.lin1(xDrug)
        xDrug = self.act1(xDrug)
        xDrug = self.lin2(xDrug)
        xDrug = self.act2(xDrug)



        x = torch.cat((xDrug, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        x = self.convS1(x, seEdges)
        x = F.relu(x)
        x = self.convS2(x, seEdges)
        x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', False)
MPNNX
<models.MPNNX4.MPNNX4 object at 0x7f165349a9d0>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 598)
((872, 598), (872, 598), 528231.3, 88676.0)
('Error: ', tensor(1757005., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5657228237943475, 0.20064323780184576)
('Test: AUC, AUPR: ', 0.56136906328653, 0.2049371128994376)
((872, 598), (872, 598), 27578.621, 88676.0)
('Error: ', tensor(80179.7500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5784115426856652, 0.20085870843257259)
('Test: AUC, AUPR: ', 0.5728079761133238, 0.21288181539284842)
((872, 598), (872, 598), 22347.988, 88676.0)
('Error: ', tensor(81412.4062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5932918318994121, 0.2176555311219967)
('Test: AUC, AUPR: ', 0.5800327027422238, 0.21871815594937188)
((872, 598), (872, 598), 82488.27, 88676.0)
('Error: ', tensor(70724.0469, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6600134146370673, 0.27360143822773314)
('Test: AUC, AUPR: ', 0.6317105082089035, 0.25138458381796247)
((872, 598), (872, 598), 79696.57, 88676.0)
('Error: ', tensor(66361.8438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7562387235257362, 0.46089609086739386)
('Test: AUC, AUPR: ', 0.7075011213485483, 0.39392003381681495)
((872, 598), (872, 598), 76975.19, 88676.0)
('Error: ', tensor(60149.9766, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7610676752334388, 0.49766329668038006)
('Test: AUC, AUPR: ', 0.7219373419193864, 0.4327281011054827)
((872, 598), (872, 598), 86560.83, 88676.0)
('Error: ', tensor(56979.9062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8058932528100837, 0.5431912977747086)
('Test: AUC, AUPR: ', 0.7581891220307276, 0.4465019748627429)
((872, 598), (872, 598), 92419.19, 88676.0)
('Error: ', tensor(55719.6797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8119584432061244, 0.5614348428395143)
('Test: AUC, AUPR: ', 0.7588588648294525, 0.4663355135338116)
((872, 598), (872, 598), 96781.0, 88676.0)
('Error: ', tensor(55000.3398, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8201641294054327, 0.5756019745573302)
('Test: AUC, AUPR: ', 0.7656614973846998, 0.4762928570931305)
((872, 598), (872, 598), 93485.94, 88676.0)
('Error: ', tensor(54501.6211, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8237063500221113, 0.5821153382081355)
('Test: AUC, AUPR: ', 0.762241888274267, 0.4698965472867343)
((872, 598), (872, 598), 95024.47, 88676.0)
('Error: ', tensor(54152.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8266928334849557, 0.5880144580210153)
('Test: AUC, AUPR: ', 0.7590791298837976, 0.46826223094564345)
((872, 598), (872, 598), 94302.25, 88676.0)
('Error: ', tensor(53882.2578, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8289194349723792, 0.5920979853166272)
('Test: AUC, AUPR: ', 0.7581735961052952, 0.46626440012704623)
((872, 598), (872, 598), 93859.04, 88676.0)
('Error: ', tensor(53673.6133, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8305476125927447, 0.5952806646007083)
('Test: AUC, AUPR: ', 0.7556198988199554, 0.46319675057549914)
((872, 598), (872, 598), 93432.02, 88676.0)
('Error: ', tensor(53482.4570, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8320684696796352, 0.5979666587217114)
('Test: AUC, AUPR: ', 0.7528218965314876, 0.46153608176101263)
((872, 598), (872, 598), 93914.89, 88676.0)
('Error: ', tensor(53313.6289, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.83358333755928, 0.600788520454037)
('Test: AUC, AUPR: ', 0.7469428973146155, 0.45771638110426793)
((872, 598), (872, 598), 94833.41, 88676.0)
('Error: ', tensor(53171.7969, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8343998242255264, 0.6024137142540683)
('Test: AUC, AUPR: ', 0.7430930556374964, 0.452193142942167)
((872, 598), (872, 598), 91612.63, 88676.0)
('Error: ', tensor(53084.9062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8351873311975568, 0.6042026750191293)
('Test: AUC, AUPR: ', 0.7394980928958219, 0.44484876506054216)
((872, 598), (872, 598), 89044.4, 88676.0)
('Error: ', tensor(53031.2656, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8356436837539855, 0.6050279966682259)
('Test: AUC, AUPR: ', 0.7377383668423643, 0.4401072727304986)
((872, 598), (872, 598), 88837.0, 88676.0)
('Error: ', tensor(52957.2461, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8362467886687327, 0.6060696479886936)
('Test: AUC, AUPR: ', 0.7356825736882762, 0.434520547787613)
Train: 0.8362 0.6061
Test: 0.7357 0.4345
[0.5519067927281479, 0.5674754741113842, 0.5797202323366547, 0.5887158796155414, 0.5878762019674353, 0.5927486681244706, 0.6003551380946822, 0.6056907088628029, 0.6085071187151335, 0.6133549522474081, 0.6157156678201663, 0.617768567098693, 0.6247480136390371, 0.6293914640439168, 0.6306997139780264, 0.6328504502933919, 0.6340289539159133, 0.6358463654279318, 0.6371546991890281, 0.6418623086795455, 0.6454110675463652, 0.6485812735343117, 0.6522015096662972, 0.6556383926208252, 0.6588943884846303, 0.6593712209242932, 0.6618748892980362, 0.6644000937382462, 0.668184066437773, 0.6695045174277543, 0.6734217242379554, 0.6752808743356122, 0.676132766664998, 0.6776992948360477, 0.6786887211682581, 0.6836806822810587, 0.6859955394792042, 0.6895901889252471, 0.6915734451684873, 0.695144444436794, 0.6966521445740811, 0.6976259654130841, 0.7007906199206639, 0.7007906199206639, 0.7030379736818019, 0.704006738593873, 0.7060187608094124, 0.7071142374545021, 0.7109039608540316, 0.7141436070377785, 0.7141436070377785, 0.7151578508654148, 0.7151578508654148, 0.7173612820604974, 0.7185386902355897, 0.7185386902355897, 0.7204352131153823, 0.7204352131153823, 0.7204352131153823, 0.7204352131153823, 0.7204352131153823, 0.7204352131153823, 0.7204352131153823, 0.7230822589782031, 0.7230822589782031, 0.7244793072921529, 0.7257984292729208, 0.7257984292729208, 0.7257984292729208, 0.7257984292729208, 0.7257984292729208, 0.7257984292729208, 0.7274849405910582, 0.7274849405910582, 0.7274849405910582, 0.732094358511793, 0.732094358511793, 0.732094358511793, 0.7338105819885288, 0.7338105819885288, 0.7338105819885288, 0.7338105819885288, 0.7338105819885288, 0.7356825736882762, 0.7356825736882762, 0.7356825736882762, 0.7356825736882762, 0.7356825736882762, 0.7356825736882762, 0.7356825736882762, 0.7356825736882762, 0.7356825736882762, 0.7356825736882762, 0.7356825736882762, 0.7356825736882762]
[0.0718137121994399, 0.08800389970386285, 0.09747797582262988, 0.1068160257499628, 0.10940212691986617, 0.1180058447934467, 0.12637766994761762, 0.13305213644655112, 0.1367967685393143, 0.14427989641480132, 0.14696427680651136, 0.15232817305495644, 0.16362253584811765, 0.17215881548223555, 0.17444903588262978, 0.1788343652835848, 0.1805611009677567, 0.1838747555799559, 0.18589730852047007, 0.19633556556875315, 0.20268701110576037, 0.20856603943350288, 0.21543987611940368, 0.22235483938439518, 0.22871253431817817, 0.22977950585689402, 0.23410042214140966, 0.23987282508108262, 0.24865523219284152, 0.25179462228447547, 0.26120584926106805, 0.2646277320584814, 0.2663266435422096, 0.2704025732808557, 0.27288870059868314, 0.28576650661295566, 0.2907868719496121, 0.30062651585068945, 0.3060620944273382, 0.31544835112946074, 0.3192513978473903, 0.32150817430993056, 0.3290077024161452, 0.3290077024161452, 0.3350448753706922, 0.3367188978956679, 0.3435400337075729, 0.34643043251818695, 0.35640662531488165, 0.36497503479002347, 0.36497503479002347, 0.36773337686025254, 0.36773337686025254, 0.37436173387498217, 0.37776185089157777, 0.37776185089157777, 0.3836432143397915, 0.3836432143397915, 0.3836432143397915, 0.3836432143397915, 0.3836432143397915, 0.3836432143397915, 0.3836432143397915, 0.39191526589567627, 0.39191526589567627, 0.39689081892147604, 0.40091019686868223, 0.40091019686868223, 0.40091019686868223, 0.40091019686868223, 0.40091019686868223, 0.40091019686868223, 0.40651343297184067, 0.40651343297184067, 0.40651343297184067, 0.4221143324631226, 0.4221143324631226, 0.4221143324631226, 0.42789081173404264, 0.42789081173404264, 0.42789081173404264, 0.42789081173404264, 0.42789081173404264, 0.434520547787613, 0.434520547787613, 0.434520547787613, 0.434520547787613, 0.434520547787613, 0.434520547787613, 0.434520547787613, 0.434520547787613, 0.434520547787613, 0.434520547787613, 0.434520547787613, 0.434520547787613]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 598)
((872, 598), (872, 598), 302953.25, 89035.0)
('Error: ', tensor(579720.9375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5669385935929402, 0.20175297727798697)
('Test: AUC, AUPR: ', 0.5569923586366214, 0.19883486253085592)
((872, 598), (872, 598), 77057.11, 89035.0)
('Error: ', tensor(74148.3203, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5515247361224269, 0.18762216238554313)
('Test: AUC, AUPR: ', 0.516682847378656, 0.1762340168936406)
((872, 598), (872, 598), 70763.555, 89035.0)
('Error: ', tensor(72128.7656, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6611001759528643, 0.2723617001734265)
('Test: AUC, AUPR: ', 0.6055031500102798, 0.22570068615018152)
((872, 598), (872, 598), 92672.04, 89035.0)
('Error: ', tensor(63065.4414, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7746970637212529, 0.4766919858107532)
('Test: AUC, AUPR: ', 0.7127378243807383, 0.37484041218764763)
((872, 598), (872, 598), 82180.35, 89035.0)
('Error: ', tensor(57272.3398, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8067708464598184, 0.5479607443576501)
('Test: AUC, AUPR: ', 0.7557375888455624, 0.44308817585079296)
