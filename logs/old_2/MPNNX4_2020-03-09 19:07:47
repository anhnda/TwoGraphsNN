    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net4, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        # self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):

        x = self.nodesEmbedding(x[nDrug:])
        x = x.squeeze(1)


        xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch

        xDrug = self.mact1(self.mlinear1(xDrug))
        xDrug = self.mact2(self.mlinear2(xDrug))

        xDrug = F.relu(self.conv1(xDrug, edge_index))

        v  = self.pool1(xDrug, edge_index, None, batch)
        xDrug, edge_index, _, batch, _, _ = v
        x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv2(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv3(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = x1 + x2 + x3

        xDrug = self.lin1(xDrug)
        xDrug = self.act1(xDrug)
        xDrug = self.lin2(xDrug)
        xDrug = self.act2(xDrug)



        x = torch.cat((xDrug, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        x = self.convS1(x, seEdges)
        x = F.relu(x)
        x = self.convS2(x, seEdges)
        x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', True)
MPNNX
<models.MPNNX4.MPNNX4 object at 0x7fc60ac39350>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 2936, 1448, 330, 969, 598)
((872, 598), (872, 598), -60638.66, 88676.0)
('Error: ', tensor(116391.0156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.4758807183206205, 0.1572209002095561)
('Test: AUC, AUPR: ', 0.4786003257652398, 0.16847577042492554)
((872, 598), (872, 598), 84204.375, 88676.0)
('Error: ', tensor(73465.9609, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6132856370075372, 0.26824717728868297)
('Test: AUC, AUPR: ', 0.605394868736522, 0.2740776700219991)
((872, 598), (872, 598), 72681.58, 88676.0)
('Error: ', tensor(73828.8281, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6678369200291471, 0.33617650216409595)
('Test: AUC, AUPR: ', 0.6533549280690303, 0.3389925740597898)
((872, 598), (872, 598), 97191.47, 88676.0)
('Error: ', tensor(72412.8750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6801296499795021, 0.34831329596216304)
('Test: AUC, AUPR: ', 0.6721873348549101, 0.35683695190823905)
((872, 598), (872, 598), 71014.31, 88676.0)
('Error: ', tensor(66536.3438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7077200800751087, 0.37604867260403124)
('Test: AUC, AUPR: ', 0.6968943005871918, 0.38517238770533213)
((872, 598), (872, 598), 93395.12, 88676.0)
('Error: ', tensor(63231.3398, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7441299936491874, 0.43209760759422156)
('Test: AUC, AUPR: ', 0.7230739029504163, 0.4346100082139282)
((872, 598), (872, 598), 83688.92, 88676.0)
('Error: ', tensor(59754.4023, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7869044496620703, 0.48753426332667904)
('Test: AUC, AUPR: ', 0.734091975474109, 0.45472204831446705)
((872, 598), (872, 598), 110090.625, 88676.0)
('Error: ', tensor(57181.9688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8136574639846935, 0.5468958188345143)
('Test: AUC, AUPR: ', 0.7459826072102154, 0.4658373124454348)
((872, 598), (872, 598), 83916.43, 88676.0)
('Error: ', tensor(53691.8086, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8285677589706593, 0.5821419708143433)
('Test: AUC, AUPR: ', 0.7399092184799715, 0.4485378667768152)
