    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net4, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        # self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):

        x = self.nodesEmbedding(x[nDrug:])
        x = x.squeeze(1)


        xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch

        xDrug = self.mact1(self.mlinear1(xDrug))
        xDrug = self.mact2(self.mlinear2(xDrug))

        xDrug = F.relu(self.conv1(xDrug, edge_index))

        v  = self.pool1(xDrug, edge_index, None, batch)
        xDrug, edge_index, _, batch, _, _ = v
        x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv2(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv3(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = x1 + x2 + x3

        xDrug = self.lin1(xDrug)
        xDrug = self.act1(xDrug)
        xDrug = self.lin2(xDrug)
        xDrug = self.act2(xDrug)



        x = torch.cat((xDrug, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        x = self.convS1(x, seEdges)
        x = F.relu(x)
        x = self.convS2(x, seEdges)
        x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', True)
MPNNX
<models.MPNNX4.MPNNX4 object at 0x7f058fc5a290>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 331)
((872, 331), (872, 331), -25921.977, 72655.0)
('Error: ', tensor(87989.6250, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.549925233779301, 0.29016966109234615)
('Test: AUC, AUPR: ', 0.5488269382009361, 0.30288245231880906)
((872, 331), (872, 331), 79138.65, 72655.0)
('Error: ', tensor(53941.5820, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6617146914362426, 0.42911533443297983)
('Test: AUC, AUPR: ', 0.6528245612269623, 0.43765826436963345)
((872, 331), (872, 331), 85365.945, 72655.0)
('Error: ', tensor(50423.9922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6674873590984111, 0.4393896274583062)
('Test: AUC, AUPR: ', 0.662259422137644, 0.4510990956900252)
((872, 331), (872, 331), 67139.84, 72655.0)
('Error: ', tensor(47869.9375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7056154768621645, 0.48683957569409575)
('Test: AUC, AUPR: ', 0.6947185508393818, 0.49327312036079024)
((872, 331), (872, 331), 72656.58, 72655.0)
('Error: ', tensor(44971.7188, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7576261619514805, 0.5465597490042025)
('Test: AUC, AUPR: ', 0.7162336968619223, 0.5140216743339228)
((872, 331), (872, 331), 65965.06, 72655.0)
('Error: ', tensor(41801.5156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7964829128223131, 0.6050799718035471)
('Test: AUC, AUPR: ', 0.7178530803061042, 0.5051708854903052)
((872, 331), (872, 331), 68268.58, 72655.0)
('Error: ', tensor(40023.1211, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8126144255146068, 0.6376765568442975)
('Test: AUC, AUPR: ', 0.7111621873252852, 0.4971941917060587)
((872, 331), (872, 331), 76420.2, 72655.0)
('Error: ', tensor(38867.2109, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8216109782119265, 0.6575117833322496)
('Test: AUC, AUPR: ', 0.7201083832208315, 0.5059461211751884)
((872, 331), (872, 331), 77089.1, 72655.0)
('Error: ', tensor(38087.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8280299558082787, 0.6720084688584769)
('Test: AUC, AUPR: ', 0.7167465542492273, 0.500155830175252)
((872, 331), (872, 331), 82688.34, 72655.0)
('Error: ', tensor(38097.3633, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8313539918207016, 0.6793682976893276)
('Test: AUC, AUPR: ', 0.7127081849180322, 0.5000840640265602)
((872, 331), (872, 331), 64581.383, 72655.0)
('Error: ', tensor(37702.7773, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8342983324439771, 0.6842185817628096)
('Test: AUC, AUPR: ', 0.7120964155165983, 0.4934602307279028)
((872, 331), (872, 331), 78146.625, 72655.0)
('Error: ', tensor(37253.4805, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8362343563355401, 0.6874733436455862)
('Test: AUC, AUPR: ', 0.7109569776808371, 0.5000044984747611)
((872, 331), (872, 331), 76555.94, 72655.0)
('Error: ', tensor(37022.5195, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8379902371020044, 0.6901644039958736)
('Test: AUC, AUPR: ', 0.7133897593414881, 0.5040471791895378)
((872, 331), (872, 331), 75352.766, 72655.0)
('Error: ', tensor(36857.3125, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8395738608641172, 0.692051645092407)
('Test: AUC, AUPR: ', 0.7131283886553312, 0.5058613198245614)
((872, 331), (872, 331), 72824.51, 72655.0)
('Error: ', tensor(36723.0352, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8408632089618291, 0.6936654174392546)
('Test: AUC, AUPR: ', 0.7119961572698685, 0.5059726464718538)
((872, 331), (872, 331), 73446.59, 72655.0)
('Error: ', tensor(36644.5664, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8419510806068835, 0.6949111476776337)
('Test: AUC, AUPR: ', 0.7125482594526356, 0.5075878011837592)
((872, 331), (872, 331), 70485.805, 72655.0)
('Error: ', tensor(36621.7227, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8427286358301558, 0.6958781992076178)
('Test: AUC, AUPR: ', 0.711777520137226, 0.5062783120413642)
((872, 331), (872, 331), 70971.914, 72655.0)
('Error: ', tensor(36558.0742, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8434214357198966, 0.696585985912053)
('Test: AUC, AUPR: ', 0.7103319475150243, 0.5044429996188462)
((872, 331), (872, 331), 75740.87, 72655.0)
('Error: ', tensor(36568.6797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8434662633432072, 0.6966350514502687)
('Test: AUC, AUPR: ', 0.7095186911382191, 0.5054377462211763)
((872, 331), (872, 331), 70442.26, 72655.0)
('Error: ', tensor(36510.2500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8442249435597018, 0.6974955309395838)
('Test: AUC, AUPR: ', 0.7085398182905502, 0.5026099535604518)
((872, 331), (872, 331), 76524.68, 72655.0)
('Error: ', tensor(36541.9141, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8442478213873306, 0.6974527065589278)
('Test: AUC, AUPR: ', 0.7068390736243512, 0.5031899646829657)
((872, 331), (872, 331), 75294.734, 72655.0)
('Error: ', tensor(36467.9414, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8446705895033254, 0.6979778771718451)
('Test: AUC, AUPR: ', 0.705419171492923, 0.5011063284701772)
((872, 331), (872, 331), 70129.96, 72655.0)
('Error: ', tensor(36440.2539, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8452489115780838, 0.6986515754612732)
('Test: AUC, AUPR: ', 0.7049522179000443, 0.4979218269892816)
((872, 331), (872, 331), 77540.445, 72655.0)
('Error: ', tensor(36519.0859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8449870801017371, 0.6983494619958607)
('Test: AUC, AUPR: ', 0.7043297284061081, 0.4997777354568601)
((872, 331), (872, 331), 75409.92, 72655.0)
('Error: ', tensor(36390.4688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8456666386564056, 0.6992077327592905)
('Test: AUC, AUPR: ', 0.7027619273197436, 0.49785909831722175)
((872, 331), (872, 331), 74094.55, 72655.0)
('Error: ', tensor(36302.8750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8463211896417346, 0.7001674278978475)
('Test: AUC, AUPR: ', 0.7001933180060895, 0.4952930376450562)
((872, 331), (872, 331), 67498.54, 72655.0)
('Error: ', tensor(36430.1680, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8466802013416179, 0.7005559282657474)
('Test: AUC, AUPR: ', 0.7013740784639702, 0.4945414814672834)
((872, 331), (872, 331), 67862.17, 72655.0)
('Error: ', tensor(36367.1875, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8470492284897299, 0.7010588304006409)
('Test: AUC, AUPR: ', 0.7001099984013426, 0.4938392922030166)
((872, 331), (872, 331), 69616.25, 72655.0)
('Error: ', tensor(36261.4102, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8474003813442429, 0.7016804400196984)
('Test: AUC, AUPR: ', 0.6991618798766156, 0.4939564605869031)
((872, 331), (872, 331), 71596.26, 72655.0)
('Error: ', tensor(36185.9062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8477132893729056, 0.702168891403336)
('Test: AUC, AUPR: ', 0.6985402687932305, 0.4939382424010511)
((872, 331), (872, 331), 73694.08, 72655.0)
('Error: ', tensor(36166.3672, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8477908092436253, 0.7024134339825316)
('Test: AUC, AUPR: ', 0.6975939469042478, 0.4929763448208429)
((872, 331), (872, 331), 71095.04, 72655.0)
('Error: ', tensor(36160.6016, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8480843274427748, 0.7028155843822909)
('Test: AUC, AUPR: ', 0.6975985430070453, 0.49152840053996083)
((872, 331), (872, 331), 73564.41, 72655.0)
('Error: ', tensor(36134.5039, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8481748542269005, 0.7029322347279187)
('Test: AUC, AUPR: ', 0.6965011718295359, 0.49094418579975985)
((872, 331), (872, 331), 75780.305, 72655.0)
('Error: ', tensor(36174.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8481508106318273, 0.702923385470827)
('Test: AUC, AUPR: ', 0.6968183800634309, 0.4916307433297466)
((872, 331), (872, 331), 73984.93, 72655.0)
('Error: ', tensor(36112.4531, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8484906455751464, 0.7034070676672238)
('Test: AUC, AUPR: ', 0.6952997351301045, 0.48937154073333455)
((872, 331), (872, 331), 72598.305, 72655.0)
('Error: ', tensor(36080.1289, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8488204966790849, 0.7038941478749142)
('Test: AUC, AUPR: ', 0.6948230642760322, 0.48823700539766307)
((872, 331), (872, 331), 70347.69, 72655.0)
('Error: ', tensor(36123.3594, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8487052155150396, 0.703762064043294)
('Test: AUC, AUPR: ', 0.6951135668384479, 0.4894806078032439)
((872, 331), (872, 331), 72881.086, 72655.0)
('Error: ', tensor(36079.1172, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8487508780962607, 0.703652243271876)
('Test: AUC, AUPR: ', 0.6967717596054394, 0.49254111778626575)
((872, 331), (872, 331), 80589.07, 72655.0)
('Error: ', tensor(36406.8164, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8483538081328288, 0.7034083298277649)
('Test: AUC, AUPR: ', 0.6947473218954425, 0.4912643851404156)
((872, 331), (872, 331), 73445.94, 72655.0)
('Error: ', tensor(36018.3320, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8492330535440591, 0.7046893428387146)
('Test: AUC, AUPR: ', 0.694697638198391, 0.48899136025720136)
((872, 331), (872, 331), 70778.836, 72655.0)
('Error: ', tensor(35984.4961, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8496807930321641, 0.7054682686063053)
('Test: AUC, AUPR: ', 0.6940451956511939, 0.48815687337840796)
((872, 331), (872, 331), 72475.055, 72655.0)
('Error: ', tensor(35913.4023, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8499687181540361, 0.7059652963539585)
('Test: AUC, AUPR: ', 0.6943128495856257, 0.4899245149161579)
((872, 331), (872, 331), 72756.69, 72655.0)
('Error: ', tensor(35869.1914, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8501601473584346, 0.7064176551448615)
('Test: AUC, AUPR: ', 0.6942570742482664, 0.4898316595262161)
((872, 331), (872, 331), 73028.414, 72655.0)
('Error: ', tensor(35828.1406, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8503468009502628, 0.7068307775073219)
('Test: AUC, AUPR: ', 0.6944852171268139, 0.4901462415649127)
((872, 331), (872, 331), 72181.04, 72655.0)
('Error: ', tensor(35784.9102, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8506640611540176, 0.7074018434156021)
('Test: AUC, AUPR: ', 0.6953219293049018, 0.4914792319366467)
((872, 331), (872, 331), 73671.66, 72655.0)
('Error: ', tensor(35752.5156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8506681563797668, 0.7076638061497807)
('Test: AUC, AUPR: ', 0.695241787406312, 0.49127271005442985)
((872, 331), (872, 331), 69144.734, 72655.0)
('Error: ', tensor(35752.7930, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8508015442197965, 0.7080522269903732)
('Test: AUC, AUPR: ', 0.6974030556006208, 0.49380192191547717)
((872, 331), (872, 331), 73437.62, 72655.0)
('Error: ', tensor(35635.2500, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8512504990234895, 0.7088195480516847)
('Test: AUC, AUPR: ', 0.6972511303899582, 0.49512728274786905)
((872, 331), (872, 331), 71058.914, 72655.0)
('Error: ', tensor(35619.2031, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.851335671198701, 0.7091932477262415)
('Test: AUC, AUPR: ', 0.6975218500518651, 0.4971224779163179)
((872, 331), (872, 331), 75976.36, 72655.0)
('Error: ', tensor(35586.5859, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.851614673862966, 0.7094801196107712)
('Test: AUC, AUPR: ', 0.6984956913240838, 0.4973695095889835)
((872, 331), (872, 331), 74893.64, 72655.0)
('Error: ', tensor(35569.9727, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8515262414199156, 0.7093240353370612)
('Test: AUC, AUPR: ', 0.6969047828145589, 0.49733385663507235)
((872, 331), (872, 331), 71994.23, 72655.0)
('Error: ', tensor(35486.7773, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8518611060949679, 0.7104595687128428)
('Test: AUC, AUPR: ', 0.6974343051181793, 0.49914499079585384)
((872, 331), (872, 331), 76028.875, 72655.0)
('Error: ', tensor(35384.6797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8527321915483163, 0.7118647516162673)
('Test: AUC, AUPR: ', 0.6961613140408696, 0.4969470053985766)
((872, 331), (872, 331), 67395.02, 72655.0)
('Error: ', tensor(35422.9688, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.852680293293413, 0.7117482677637423)
('Test: AUC, AUPR: ', 0.6997898389070698, 0.49914515045911734)
((872, 331), (872, 331), 71168.67, 72655.0)
('Error: ', tensor(35182.5156, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8538685635290013, 0.7138025446541566)
('Test: AUC, AUPR: ', 0.6988794746171252, 0.4991662417776208)
((872, 331), (872, 331), 73009.77, 72655.0)
('Error: ', tensor(35070.8320, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8547362785615003, 0.7152799703226858)
('Test: AUC, AUPR: ', 0.6971227182141269, 0.49604009093685314)
((872, 331), (872, 331), 83451.21, 72655.0)
('Error: ', tensor(35821.7578, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8538008246848438, 0.7128839727849706)
('Test: AUC, AUPR: ', 0.6973904169400315, 0.4913701531246272)
((872, 331), (872, 331), 83246.08, 72655.0)
('Error: ', tensor(36498.5508, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8476238027811547, 0.7004456403845665)
('Test: AUC, AUPR: ', 0.6946258474210727, 0.4952119201244764)
((872, 331), (872, 331), 77394.98, 72655.0)
('Error: ', tensor(35472.0547, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8518166400297176, 0.7106306065050395)
('Test: AUC, AUPR: ', 0.7000876698521267, 0.4967763903468596)
((872, 331), (872, 331), 72779.836, 72655.0)
('Error: ', tensor(35093.0703, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8540187375152998, 0.7152949202982904)
('Test: AUC, AUPR: ', 0.6954506525326278, 0.49502685500227245)
((872, 331), (872, 331), 73305.17, 72655.0)
('Error: ', tensor(34899.6719, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8555158969312291, 0.7180787890906489)
('Test: AUC, AUPR: ', 0.6970639493133322, 0.4915778594328187)
((872, 331), (872, 331), 73224.67, 72655.0)
('Error: ', tensor(34767.9102, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8566320008216439, 0.719878876571312)
('Test: AUC, AUPR: ', 0.6969477676980043, 0.4907161981959314)
((872, 331), (872, 331), 72803.83, 72655.0)
('Error: ', tensor(34659.2148, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8575480887984697, 0.7215418465111106)
('Test: AUC, AUPR: ', 0.6965499671623758, 0.4914249796199396)
((872, 331), (872, 331), 73755.08, 72655.0)
('Error: ', tensor(34579.9453, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8581873660507963, 0.7227967550814749)
('Test: AUC, AUPR: ', 0.6958396092407835, 0.4894200973477983)
