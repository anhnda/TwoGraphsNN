    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net4, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        # self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):

        x = self.nodesEmbedding(x[nDrug:])
        x = x.squeeze(1)


        xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch

        xDrug = self.mact1(self.mlinear1(xDrug))
        xDrug = self.mact2(self.mlinear2(xDrug))

        xDrug = F.relu(self.conv1(xDrug, edge_index))

        v  = self.pool1(xDrug, edge_index, None, batch)
        xDrug, edge_index, _, batch, _, _ = v
        x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv2(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv3(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = x1 + x2 + x3

        xDrug = self.lin1(xDrug)
        xDrug = self.act1(xDrug)
        xDrug = self.lin2(xDrug)
        xDrug = self.act2(xDrug)



        x = torch.cat((xDrug, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        # x = self.convS1(x, seEdges)
        # x = F.relu(x)
        # x = self.convS2(x, seEdges)
        # x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', True)
MPNNX
<models.MPNNX4.MPNNX4 object at 0x7fd8861889d0>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 331)
((872, 331), (872, 331), 6745.549, 72655.0)
('Error: ', tensor(69585.8672, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.49415194163527454, 0.24344653119582227)
('Test: AUC, AUPR: ', 0.49891085552300407, 0.2619210160219116)
((872, 331), (872, 331), 71854.21, 72655.0)
('Error: ', tensor(50036.1797, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.6853488939387217, 0.4509765604584647)
('Test: AUC, AUPR: ', 0.676520375128386, 0.46083175170662755)
((872, 331), (872, 331), 72063.83, 72655.0)
('Error: ', tensor(45102.3438, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7508334801171856, 0.5393833156484549)
('Test: AUC, AUPR: ', 0.7215342948748671, 0.5252908357264816)
((872, 331), (872, 331), 66998.73, 72655.0)
('Error: ', tensor(42157.9766, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7890334756360581, 0.5980496267160291)
('Test: AUC, AUPR: ', 0.7218149532669162, 0.5163201128528181)
((872, 331), (872, 331), 72284.87, 72655.0)
('Error: ', tensor(40213.5586, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.808746579955729, 0.6331818946413306)
('Test: AUC, AUPR: ', 0.7242661890143817, 0.5074021599722617)
((872, 331), (872, 331), 72279.81, 72655.0)
('Error: ', tensor(38943.1172, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8207903546908691, 0.655429712711272)
('Test: AUC, AUPR: ', 0.7162203564682584, 0.4709767085526607)
((872, 331), (872, 331), 77386.234, 72655.0)
('Error: ', tensor(38266.1250, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8276539237635065, 0.6692078860357247)
('Test: AUC, AUPR: ', 0.7158369315069999, 0.4578198036114821)
((872, 331), (872, 331), 74364.08, 72655.0)
('Error: ', tensor(37613.0703, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8324788125200303, 0.6789140991844622)
('Test: AUC, AUPR: ', 0.7197969207375372, 0.4603862848137743)
((872, 331), (872, 331), 67475.41, 72655.0)
('Error: ', tensor(37392.0039, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8357816464198491, 0.6851974848885254)
('Test: AUC, AUPR: ', 0.7241565419772595, 0.46645819731563054)
((872, 331), (872, 331), 72781.59, 72655.0)
('Error: ', tensor(36933.5625, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8383012881745874, 0.6900095451520779)
('Test: AUC, AUPR: ', 0.7261785684129678, 0.46996771840060503)
((872, 331), (872, 331), 76572.78, 72655.0)
('Error: ', tensor(36773.2773, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8402990133017447, 0.6936463906420575)
('Test: AUC, AUPR: ', 0.7286836659065354, 0.46930671098547105)
((872, 331), (872, 331), 67976.79, 72655.0)
('Error: ', tensor(36636.4414, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8421976436396115, 0.6967623914561358)
('Test: AUC, AUPR: ', 0.7306005543133884, 0.4716545790338167)
((872, 331), (872, 331), 76871.266, 72655.0)
('Error: ', tensor(36425.8945, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8435272948982029, 0.6990969977269033)
('Test: AUC, AUPR: ', 0.7301559317581406, 0.4722046499474434)
((872, 331), (872, 331), 68955.31, 72655.0)
('Error: ', tensor(36285.7578, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.845123679585511, 0.7013912283366588)
('Test: AUC, AUPR: ', 0.7311717028257776, 0.47363304756576124)
((872, 331), (872, 331), 73929.8, 72655.0)
('Error: ', tensor(36078.8164, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8461014125265347, 0.7030995923685354)
('Test: AUC, AUPR: ', 0.7306024131595118, 0.4756634836752542)
((872, 331), (872, 331), 76175.35, 72655.0)
('Error: ', tensor(36037.8906, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8468785029213077, 0.7043868578090147)
('Test: AUC, AUPR: ', 0.7293509518501521, 0.4734232624057345)
((872, 331), (872, 331), 70318.73, 72655.0)
('Error: ', tensor(35930.2422, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8479271423782475, 0.7059767906108639)
('Test: AUC, AUPR: ', 0.730737989482584, 0.4764474279767027)
((872, 331), (872, 331), 76688.43, 72655.0)
('Error: ', tensor(35889.9180, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8484245058136759, 0.7068802382000445)
('Test: AUC, AUPR: ', 0.7289882130841048, 0.4709645288123294)
((872, 331), (872, 331), 76083.266, 72655.0)
('Error: ', tensor(35744.3711, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.8495492363067063, 0.7087121978722367)
('Test: AUC, AUPR: ', 0.7284669025505071, 0.47282271799159503)
Train: 0.8495 0.7087
Test: 0.7285 0.4728
[0.6380830581417368, 0.6363565028573428, 0.6435437618593771, 0.6446268401809098, 0.6476954449789907, 0.6481264639465196, 0.6496203079744982, 0.6524943060181687, 0.6530341536417854, 0.6532174259742842, 0.6537093420784021, 0.6534611524403324, 0.6530455516858408, 0.6522021703455883, 0.6550886876697148, 0.6567391914912029, 0.6586323239168637, 0.659486281985541, 0.6620704608101324, 0.6634690210251386, 0.6640274706255167, 0.6648107806547774, 0.6663334982094233, 0.6676310538497608, 0.668328093789269, 0.6708308960682737, 0.6716868926561983, 0.67220080590489, 0.6728348557451014, 0.6740979185684322, 0.6782058658781729, 0.679720833232126, 0.6820475056676165, 0.6836754194561069, 0.6865981087380661, 0.6878821905271346, 0.6885115363830034, 0.6910436998748294, 0.6910436998748294, 0.6932545986832882, 0.6939428392739417, 0.6960447330989248, 0.6968250529511553, 0.6999979411509459, 0.7028629190436864, 0.7028629190436864, 0.7038445091943398, 0.7038445091943398, 0.7060159551732333, 0.7071312161518561, 0.7071312161518561, 0.7091321086122334, 0.7091321086122334, 0.7091321086122334, 0.7091321086122334, 0.7091321086122334, 0.7091321086122334, 0.7091321086122334, 0.7123692343922563, 0.7123692343922563, 0.7140190706157314, 0.7156979679072899, 0.7156979679072899, 0.7156979679072899, 0.7156979679072899, 0.7156979679072899, 0.7156979679072899, 0.7177368940660753, 0.7177368940660753, 0.7177368940660753, 0.723658614695556, 0.723658614695556, 0.723658614695556, 0.7259363185476204, 0.7259363185476204, 0.7259363185476204, 0.7259363185476204, 0.7259363185476204, 0.7284669025505071, 0.7284669025505071, 0.7284669025505071, 0.7284669025505071, 0.7284669025505071, 0.7284669025505071, 0.7284669025505071, 0.7284669025505071, 0.7284669025505071, 0.7284669025505071, 0.7284669025505071, 0.7284669025505071]
[0.1892203532533135, 0.18604624597632832, 0.1925042453510724, 0.194162341174339, 0.19947576907423703, 0.20239307859206812, 0.20708808852165742, 0.21754078754679548, 0.22379712200062074, 0.22621039077980187, 0.23016392863219193, 0.2314548540252287, 0.23384056599280023, 0.23564861262627135, 0.24479739769018538, 0.2516490677642574, 0.2579103926879791, 0.26288439519539986, 0.26908762323848223, 0.2751599114258825, 0.27648164428283717, 0.28005597140062277, 0.2848575076791529, 0.2907715234459893, 0.2934142477951546, 0.30231119634641596, 0.30550697357829926, 0.30696123563522537, 0.30966230845287834, 0.31289765681194903, 0.32565146552923274, 0.33002787652493343, 0.3378305187913966, 0.34357951568770717, 0.3521686801012148, 0.35622617520901523, 0.35820203652400856, 0.3652931390050629, 0.3652931390050629, 0.37105679798512115, 0.37267512281464943, 0.37887452061141746, 0.38133525018785264, 0.3910975501033769, 0.39917100541121775, 0.39917100541121775, 0.40182045328811317, 0.40182045328811317, 0.40857998014891067, 0.4117391797758169, 0.4117391797758169, 0.41758954853588603, 0.41758954853588603, 0.41758954853588603, 0.41758954853588603, 0.41758954853588603, 0.41758954853588603, 0.41758954853588603, 0.4267148728142326, 0.4267148728142326, 0.43105875875984423, 0.43585602696833714, 0.43585602696833714, 0.43585602696833714, 0.43585602696833714, 0.43585602696833714, 0.43585602696833714, 0.44144514692447845, 0.44144514692447845, 0.44144514692447845, 0.4585116985635169, 0.4585116985635169, 0.4585116985635169, 0.4651061867586162, 0.4651061867586162, 0.4651061867586162, 0.4651061867586162, 0.4651061867586162, 0.47282271799159503, 0.47282271799159503, 0.47282271799159503, 0.47282271799159503, 0.47282271799159503, 0.47282271799159503, 0.47282271799159503, 0.47282271799159503, 0.47282271799159503, 0.47282271799159503, 0.47282271799159503, 0.47282271799159503]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 969, 331)
((872, 331), (872, 331), 19575.24, 72805.0)
('Error: ', tensor(64287.5391, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5078923973625811, 0.25492758924941195)
('Test: AUC, AUPR: ', 0.47654319134385037, 0.24847768440828077)
