    def __init__(self, numNode=10000, numAtomFeature=0):
        super(Net4, self).__init__()

        self.convD1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convD2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.convS1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.convS2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)  # SAGEConv(config.EMBED_DIM, config.EMBED_DIM)

        self.L1 = Linear(config.CHEM_FINGERPRINT_SIZE, config.EMBED_DIM * 2)
        self.actL1 = F.relu
        self.L2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.actL2 = F.relu

        self.linear1 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.act1 = F.relu
        self.linear2 = Linear(config.EMBED_DIM, 1)
        self.act2 = F.relu

        self.nodesEmbedding = torch.nn.Embedding(num_embeddings=numNode + 1, embedding_dim=config.EMBED_DIM)
        self.nodesEmbedding.weight.data.uniform_(0.001, 0.3)



        # Molecule graph neural net

        self.mlinear1 = Linear(numAtomFeature, config.EMBED_DIM * 2)
        self.mact1 = F.relu
        self.mlinear2 = Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.mact2 = F.relu

        self.conv1 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool1 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv2 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool2 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.conv3 = SAGEConv(config.EMBED_DIM, config.EMBED_DIM)
        self.pool3 = TopKPooling(config.EMBED_DIM, ratio=0.8)
        self.lin1 = torch.nn.Linear(config.EMBED_DIM * 2, config.EMBED_DIM)
        self.lin2 = torch.nn.Linear(config.EMBED_DIM, config.EMBED_DIM)


        self.bn1 = torch.nn.BatchNorm1d(128)
        self.bn2 = torch.nn.BatchNorm1d(64)
        self.act1 = torch.nn.ReLU()
        self.act2 = torch.nn.ReLU()

    def forward(self, x, drugEdges, seEdges, drugNodes, seNodes, drugGraphBatch, nDrug):

        x = self.nodesEmbedding(x[nDrug:])
        x = x.squeeze(1)


        xDrug, edge_index, batch = drugGraphBatch.x, drugGraphBatch.edge_index, drugGraphBatch.batch

        xDrug = self.mact1(self.mlinear1(xDrug))
        xDrug = self.mact2(self.mlinear2(xDrug))

        xDrug = F.relu(self.conv1(xDrug, edge_index))

        v  = self.pool1(xDrug, edge_index, None, batch)
        xDrug, edge_index, _, batch, _, _ = v
        x1 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv2(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool2(xDrug, edge_index, None, batch)
        x2 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = F.relu(self.conv3(xDrug, edge_index))

        xDrug, edge_index, _, batch, _, _ = self.pool3(xDrug, edge_index, None, batch)
        x3 = torch.cat([gmp(xDrug, batch), gap(xDrug, batch)], dim=1)

        xDrug = x1 + x2 + x3

        xDrug = self.lin1(xDrug)
        xDrug = self.act1(xDrug)
        xDrug = self.lin2(xDrug)
        xDrug = self.act2(xDrug)



        x = torch.cat((xDrug, x), dim=0)

        # Conv Drug:
        x = self.convD1(x, drugEdges)
        x = F.relu(x)
        x = self.convD2(x, drugEdges)
        x = F.relu(x)
        # Conv SE:
        x = self.convS1(x, seEdges)
        x = F.relu(x)
        x = self.convS2(x, seEdges)
        x = F.relu(x)

        drugEmbedding = x[drugNodes]
        seEmbedding = x[seNodes]
        # re = torch.sigmoid(re)
        return drugEmbedding, seEmbedding, x

('Undirected graph: ', False)
MPNNX
<models.MPNNX4.MPNNX4 object at 0x7f30cb7568d0>
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_0
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 1030, 598)
((928, 598), (928, 598), 123113.61, 88960.0)
('Error: ', tensor(76791.7812, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5169854704419213, 0.16591086161571075)
('Test: AUC, AUPR: ', 0.514710399730037, 0.18101477027361973)
((928, 598), (928, 598), 78509.33, 88960.0)
('Error: ', tensor(74853.1641, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7026349356503481, 0.33057453663515246)
('Test: AUC, AUPR: ', 0.6875878531881019, 0.3384582125837371)
((928, 598), (928, 598), 91759.78, 88960.0)
('Error: ', tensor(73028.6250, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7169631817143627, 0.3555625903879246)
('Test: AUC, AUPR: ', 0.7022720469671067, 0.363246474309436)
((928, 598), (928, 598), 60722.277, 88960.0)
('Error: ', tensor(68018.2422, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7334831492495859, 0.39427234321077104)
('Test: AUC, AUPR: ', 0.7220194670626274, 0.3983980019959863)
((928, 598), (928, 598), 110134.0, 88960.0)
('Error: ', tensor(65393.7031, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7314204573937421, 0.41012857646932355)
('Test: AUC, AUPR: ', 0.7212090452808095, 0.4126926214187525)
((928, 598), (928, 598), 79995.734, 88960.0)
('Error: ', tensor(63993.9258, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7396399832848299, 0.4240700157396409)
('Test: AUC, AUPR: ', 0.7257541732184949, 0.42477191078932053)
((928, 598), (928, 598), 85641.64, 88960.0)
('Error: ', tensor(63333.2969, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7492695095579708, 0.43310435396191327)
('Test: AUC, AUPR: ', 0.734015361660326, 0.43343666121295804)
((928, 598), (928, 598), 90544.39, 88960.0)
('Error: ', tensor(62806.2969, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7563959764015309, 0.44077329819436173)
('Test: AUC, AUPR: ', 0.7419505948057312, 0.44245754480382293)
((928, 598), (928, 598), 88760.31, 88960.0)
('Error: ', tensor(62216.5312, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7630957096117181, 0.4494555995345322)
('Test: AUC, AUPR: ', 0.7502767130371379, 0.4531285334814372)
((928, 598), (928, 598), 107093.82, 88960.0)
('Error: ', tensor(62653.1172, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.770706318930679, 0.4567835544964798)
('Test: AUC, AUPR: ', 0.7634554249954443, 0.46593816520211984)
((928, 598), (928, 598), 81684.37, 88960.0)
('Error: ', tensor(61877.5352, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7724377939682208, 0.4584762234826839)
('Test: AUC, AUPR: ', 0.7641062979535564, 0.4678057253018279)
((928, 598), (928, 598), 92824.164, 88960.0)
('Error: ', tensor(61433.9180, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7750277391749301, 0.46264567790826594)
('Test: AUC, AUPR: ', 0.769557441702562, 0.47451507450802993)
((928, 598), (928, 598), 87080.03, 88960.0)
('Error: ', tensor(61190.7891, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7770381967998298, 0.46668043252186636)
('Test: AUC, AUPR: ', 0.7738692988200948, 0.48220805003171363)
((928, 598), (928, 598), 87920.84, 88960.0)
('Error: ', tensor(61082., grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7785250278464265, 0.4680124796862009)
('Test: AUC, AUPR: ', 0.7773693415646545, 0.48428009994403665)
((928, 598), (928, 598), 87080.03, 88960.0)
('Error: ', tensor(60903.9961, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7803628899935522, 0.4711113966612058)
('Test: AUC, AUPR: ', 0.7775441453438855, 0.48556247214681786)
((928, 598), (928, 598), 92145.86, 88960.0)
('Error: ', tensor(60840.9062, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7814194603352392, 0.4720909835356791)
('Test: AUC, AUPR: ', 0.7763271813576454, 0.4827750365814393)
((928, 598), (928, 598), 91074.805, 88960.0)
('Error: ', tensor(60804.0898, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7816304354852219, 0.4723736099586697)
('Test: AUC, AUPR: ', 0.7711312785060753, 0.4758345928478358)
((928, 598), (928, 598), 92673.234, 88960.0)
('Error: ', tensor(60667.1094, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7834244490223643, 0.4747596634451414)
('Test: AUC, AUPR: ', 0.7710033198955549, 0.47447604372058994)
((928, 598), (928, 598), 91666.55, 88960.0)
('Error: ', tensor(60550.7344, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7842046997083459, 0.47661315978236646)
('Test: AUC, AUPR: ', 0.7716592611955317, 0.47518120453450996)
Train: 0.7842 0.4766
Test: 0.7717 0.4752
[0.6165657916953489, 0.63498318681372, 0.6360286833768367, 0.6432039842928704, 0.6449131773946708, 0.6472978776718249, 0.6510512338985706, 0.6558721740265208, 0.6594962140719514, 0.6641969091714508, 0.6652115752301553, 0.6679916158796285, 0.6748197703767104, 0.6800180328868676, 0.6812666101603048, 0.6828748070485209, 0.6855536564157594, 0.6877164848181978, 0.689928230299033, 0.6940380993482966, 0.6955103107610576, 0.6988852653790203, 0.7027727570927644, 0.7057078389493054, 0.7073324374091741, 0.7076489746541379, 0.7102735875658073, 0.7117889638783558, 0.7138646950950293, 0.7148970382715117, 0.7188449032186428, 0.7206593917724605, 0.7215610434011746, 0.7229968398045368, 0.7237158891363085, 0.7274410505694191, 0.729442267767914, 0.7315775025070947, 0.7335320138469932, 0.7362159731330569, 0.7374277960903586, 0.7379581981439034, 0.7406984358868527, 0.7406984358868527, 0.7426776498652184, 0.7433947581770104, 0.7448640332979282, 0.7455890639776306, 0.7493290638720521, 0.7520547539940434, 0.7520547539940434, 0.7526886307099525, 0.7526886307099525, 0.7545530070595511, 0.7554412745411182, 0.7554412745411182, 0.7576151050942287, 0.7576151050942287, 0.7576151050942287, 0.7576151050942287, 0.7576151050942287, 0.7576151050942287, 0.7576151050942287, 0.76003365504038, 0.76003365504038, 0.7614656852316758, 0.762803355346913, 0.762803355346913, 0.762803355346913, 0.762803355346913, 0.762803355346913, 0.762803355346913, 0.7642475263502428, 0.7642475263502428, 0.7642475263502428, 0.7687383268948086, 0.7687383268948086, 0.7687383268948086, 0.7700513227321344, 0.7700513227321344, 0.7700513227321344, 0.7700513227321344, 0.7700513227321344, 0.7716592611955317, 0.7716592611955317, 0.7716592611955317, 0.7716592611955317, 0.7716592611955317, 0.7716592611955317, 0.7716592611955317, 0.7716592611955317, 0.7716592611955317, 0.7716592611955317, 0.7716592611955317, 0.7716592611955317]
[0.09257973978160983, 0.1100436417752739, 0.11405161799078742, 0.12398835607612688, 0.1319269089602583, 0.13692482327238262, 0.14560904710400246, 0.1529600112598143, 0.16114310369974816, 0.1707177400214715, 0.17510699547882508, 0.181357881775993, 0.19375897546325027, 0.20373109565292408, 0.2062410223088742, 0.21042434421122708, 0.21605837922644155, 0.2211426158716288, 0.22559008848445727, 0.23360523616285933, 0.2362456627719708, 0.24522391940888644, 0.2537829266752126, 0.26136704321677434, 0.26512187038877155, 0.2655857213886142, 0.27159555831018656, 0.27461210930388225, 0.2789850582028544, 0.28159246356397755, 0.2926150574769564, 0.2974939954746769, 0.30059549207813646, 0.3053072460602972, 0.30746019905269784, 0.32024169119432355, 0.3280407415839788, 0.33342828115778916, 0.3390526784017547, 0.3480221854549222, 0.3509870651727042, 0.3533722095738126, 0.3615506130045512, 0.3615506130045512, 0.3683558727301587, 0.3713728044618247, 0.37577104702729114, 0.3786979547088102, 0.3918683756027729, 0.4013246549290792, 0.4013246549290792, 0.4021941802797412, 0.4021941802797412, 0.40811579528030784, 0.41095440505818226, 0.41095440505818226, 0.4176257125455401, 0.4176257125455401, 0.4176257125455401, 0.4176257125455401, 0.4176257125455401, 0.4176257125455401, 0.4176257125455401, 0.42753392329245954, 0.42753392329245954, 0.4331729147655276, 0.4384030900618252, 0.4384030900618252, 0.4384030900618252, 0.4384030900618252, 0.4384030900618252, 0.4384030900618252, 0.44418463530846547, 0.44418463530846547, 0.44418463530846547, 0.462976788208403, 0.462976788208403, 0.462976788208403, 0.46808919761679446, 0.46808919761679446, 0.46808919761679446, 0.46808919761679446, 0.46808919761679446, 0.47518120453450996, 0.47518120453450996, 0.47518120453450996, 0.47518120453450996, 0.47518120453450996, 0.47518120453450996, 0.47518120453450996, 0.47518120453450996, 0.47518120453450996, 0.47518120453450996, 0.47518120453450996, 0.47518120453450996]
Training raw path: /home/anhnd/DTI Project/Codes/MPNN/data/KFold/ATCInchikeySideEffectByDrug.txt_train_1
('Number of substructures, proteins, pathways, drugs, se: ', 888, 1448, 330, 1030, 598)
((928, 598), (928, 598), 120743.77, 91071.0)
('Error: ', tensor(77716.4922, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.49313613594328154, 0.15492732048894706)
('Test: AUC, AUPR: ', 0.4941068750525594, 0.13867296049840724)
((928, 598), (928, 598), 84890.56, 91071.0)
('Error: ', tensor(76182.4375, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.5902039308426467, 0.2035486662586762)
('Test: AUC, AUPR: ', 0.5945118832801699, 0.18378774779881593)
((928, 598), (928, 598), 111062.31, 91071.0)
('Error: ', tensor(71807.3750, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7150280014811436, 0.34915944759255596)
('Test: AUC, AUPR: ', 0.7210296209079777, 0.32952647112926386)
((928, 598), (928, 598), 106666.02, 91071.0)
('Error: ', tensor(67639.9766, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7311517350591485, 0.4000865749616798)
('Test: AUC, AUPR: ', 0.7407830466155672, 0.38442669666543805)
((928, 598), (928, 598), 79224.77, 91071.0)
('Error: ', tensor(67231.4844, grad_fn=<AddBackward0>))
('Train: AUC, AUPR: ', 0.7394997445654645, 0.4139859396982631)
('Test: AUC, AUPR: ', 0.749812499881889, 0.398686649418244)
